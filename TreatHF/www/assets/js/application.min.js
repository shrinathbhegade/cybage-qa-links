(function(window) {
    window.acc = window.acc || {};
    window.acc.app = window.acc.app || {};
    window.acc.service = window.acc.service || {};
    var acc = window.acc;
    acc.app.versionPrefix = "acc_dev";
    acc.userGuid = "";
    acc.appIdentifier = "org.acc.treathf";
    acc.notificationUserGuid = "a7b3e523-3f8d-4b33-a1c4-ec9e9aa3a5bb";
    acc.iOSStoreUrl = "https://itunes.apple.com/us/developer/american-college-of-cardiology/id502174543#";
    acc.androidStoreUrl = "https://play.google.com/store/apps/dev?id=5189912010956845696&hl=en";
    acc.appVersionNumber = "2.0";
    acc.gaTrackIds = {
        web: "UA-3507894-37"
    };
    acc.baseUrl = "http://localhost:8000/www/";
    acc.notificationUrl = "https://tools.stage.acc.org/ACCUtility.Web/Notification";
    acc.gdprBannerUrl = "https://www.acc.org";
    acc.firebaseDynamicLink = {
        api: "https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=AIzaSyCkkMRZj_XgpJVSOEGDBQJnHU3coYTsI10",
        domainUriPrefix: "https://techcurl.page.link",
        link: acc.baseUrl + "#!/content/staticadviceviewpage"
    };
})(window);

(function(window) {
    var Lookup = {};
    Lookup.isNativeApplication = document.URL.indexOf("http://") === -1 && document.URL.indexOf("https://") === -1;
    Lookup.deviceType = navigator.userAgent.match(/iPod/i) == "iPod" ? "iPod" : navigator.userAgent.match(/iPad/i) == "iPad" ? "iPad" : navigator.userAgent.match(/iPhone/i) == "iPhone" ? "iPhone" : navigator.userAgent.match(/Android/i) == "Android" ? "Android" : navigator.userAgent.match(/BlackBerry/i) == "BlackBerry" ? "BlackBerry" : "Desktop";
    Lookup.isIPad = Lookup.deviceType == "iPad" ? true : false;
    Lookup.isIPhone = Lookup.deviceType == "iPhone" ? true : false;
    Lookup.isAndroid = Lookup.deviceType == "Android" ? true : false;
    window.Lookup = Lookup;
})(window);

(function(window) {
    var UtilityFunctions = {};
    UtilityFunctions.findAndGetValue = function(koArray, id) {
        var prop = koArray().filter(function(currentValue) {
            return currentValue.id() == id;
        })[0];
        return prop;
    };
    UtilityFunctions.getSelectedOptions = function(koOptionArray) {
        var options = koOptionArray().filter(function(currentValue) {
            return currentValue.isSelected();
        });
        return options;
    };
    window.UtilityFunctions = UtilityFunctions;
})(window);

(function(w) {
    var LOCAL_STORAGE_NAME = "HFPA_LOCAL_DATA";
    var LocalStorageService = function() {};
    LocalStorageService.prototype.setLocalStorageData = function(data) {
        localStorage.setItem(LOCAL_STORAGE_NAME, data);
    };
    LocalStorageService.prototype.getLocalStorageData = function() {
        return localStorage.getItem(LOCAL_STORAGE_NAME);
    };
    LocalStorageService.prototype.getNotificationData = function() {
        return JSON.parse(this.getLocalStorageData());
    };
    w.LocalStorageService = LocalStorageService;
})(window);

(function(w) {
    var SESSION_STORAGE_NAME = "HFPA_SESSION_DATA";
    var SessionStorageService = function() {};
    var originalData;
    SessionStorageService.prototype.setSessionStorageData = function(data) {
        var jsonData = JSON.parse(data);
        delete jsonData.copytext;
        delete jsonData.analytics;
        data = JSON.stringify(jsonData);
        sessionStorage.setItem(SESSION_STORAGE_NAME, data);
    };
    SessionStorageService.prototype.getSessionStorageData = function() {
        return sessionStorage.getItem(SESSION_STORAGE_NAME);
    };
    SessionStorageService.prototype.setOriginalJSONdata = function(data) {
        originalData = data;
    };
    SessionStorageService.prototype.resetApp = function() {
        this.setSessionStorageData(originalData);
    };
    SessionStorageService.prototype.saveGDMTData = function(data) {
        var jsonString = this.getSessionStorageData();
        var jsonData = JSON.parse(jsonString);
        jsonData.GDMT = data;
        this.setSessionStorageData(JSON.stringify(jsonData));
    };
    SessionStorageService.prototype.savePatientData = function(data) {
        var jsonString = this.getSessionStorageData();
        var jsonData = JSON.parse(jsonString);
        jsonData.patient = data;
        this.setSessionStorageData(JSON.stringify(jsonData));
    };
    SessionStorageService.prototype.getGDMTData = function() {
        var jsonString = this.getSessionStorageData();
        return JSON.parse(jsonString).GDMT;
    };
    SessionStorageService.prototype.getPatientData = function() {
        var jsonString = this.getSessionStorageData();
        return JSON.parse(jsonString).patient;
    };
    SessionStorageService.prototype.saveExceptionData = function(data) {
        var jsonString = this.getSessionStorageData();
        var jsonData = JSON.parse(jsonString);
        jsonData.exception = data;
        this.setSessionStorageData(JSON.stringify(jsonData));
    };
    SessionStorageService.prototype.getExceptionData = function() {
        var jsonString = this.getSessionStorageData();
        return JSON.parse(jsonString).exception;
    };
    SessionStorageService.prototype.getcontraindicationsData = function() {
        var jsonString = this.getSessionStorageData();
        return JSON.parse(jsonString).contraindications;
    };
    SessionStorageService.prototype.saveContraindicationsData = function(data) {
        var jsonString = this.getSessionStorageData();
        var jsonData = JSON.parse(jsonString);
        jsonData.contraindications = data;
        this.setSessionStorageData(JSON.stringify(jsonData));
    };
    SessionStorageService.prototype.getCopyTextData = function() {
        var jsonString = originalData;
        return JSON.parse(jsonString).copytext;
    };
    SessionStorageService.prototype.getAnalyticsData = function() {
        var jsonString = originalData;
        return JSON.parse(jsonString).analytics;
    };
    w.SessionStorageService = SessionStorageService;
})(window);

(function(w, SessionStorageService) {
    var JSONService = function() {};
    JSONService.prototype.hfLogic_jsonURL = "assets/data/hf_logic.json";
    JSONService.prototype.jsonURL = "assets/data/data.json?v=5";
    JSONService.prototype.sessionStorageService = new SessionStorageService();
    JSONService.prototype.hfLogicData;
    JSONService.prototype.loadJson = function(callback) {
        var totalJSON = 2;
        var onJsonLoad = function() {
            totalJSON--;
            if (totalJSON == 0) {
                callback();
            }
        };
        this.loadDataJson(onJsonLoad);
        this.loadHFLogicJson(onJsonLoad);
    };
    JSONService.prototype.loadDataJson = function(callback) {
        var that = this;
        $.getJSON(that.jsonURL, function(json) {
            that.sessionStorageService.setSessionStorageData(JSON.stringify(json));
            that.sessionStorageService.setOriginalJSONdata(JSON.stringify(json));
            if (callback) callback();
        }).fail(function(e) {
            w.logError("Error on file " + that.jsonURL);
        });
    };
    JSONService.prototype.loadHFLogicJson = function(callback) {
        var that = this;
        $.getJSON(that.hfLogic_jsonURL, function(json) {
            that.hfLogicData = json.hf_logic;
            if (callback) callback();
        });
    };
    w.JSONService = JSONService;
})(window, window.SessionStorageService);

(function(w, SessionStorageService, LocalStorageService) {
    var AppModel = function() {};
    AppModel.instance = null;
    AppModel.prototype.setGDMTData = function(data) {
        var sessionStorageService = new SessionStorageService();
        sessionStorageService.saveGDMTData(data);
    };
    AppModel.prototype.setPatientData = function(data) {
        var sessionStorageService = new SessionStorageService();
        sessionStorageService.savePatientData(data);
    };
    AppModel.prototype.setNotificationData = function(data) {
        var localStorageService = new LocalStorageService();
        localStorageService.setLocalStorageData(data);
    };
    AppModel.prototype.getGDMTData = function() {
        var sessionStorageService = new SessionStorageService();
        return sessionStorageService.getGDMTData();
    };
    AppModel.prototype.getPatientData = function() {
        var sessionStorageService = new SessionStorageService();
        return sessionStorageService.getPatientData();
    };
    AppModel.prototype.setExceptionData = function(data) {
        var sessionStorageService = new SessionStorageService();
        sessionStorageService.saveExceptionData(data);
    };
    AppModel.prototype.getExceptionData = function() {
        var sessionStorageService = new SessionStorageService();
        return sessionStorageService.getExceptionData();
    };
    AppModel.prototype.setContraindicationsData = function(data) {
        var sessionStorageService = new SessionStorageService();
        sessionStorageService.saveContraindicationsData(data);
    };
    AppModel.prototype.getContraindicationsData = function() {
        var sessionStorageService = new SessionStorageService();
        return sessionStorageService.getcontraindicationsData();
    };
    AppModel.prototype.resetApp = function() {
        var sessionStorageService = new SessionStorageService();
        sessionStorageService.resetApp();
    };
    AppModel.prototype.getNotificationData = function() {
        var localStorageService = new LocalStorageService();
        return localStorageService.getNotificationData();
    };
    AppModel.prototype.getCopytext = function(id) {
        var sessionStorageService = new SessionStorageService();
        var copytextData = sessionStorageService.getCopyTextData();
        return copytextData[id];
    };
    AppModel.prototype.getIdByCopyText = function(text) {
        var sessionStorageService = new SessionStorageService();
        var copyTextData = sessionStorageService.getCopyTextData();
        for (var id in copyTextData) {
            if (text === copyTextData[id]) return id;
        }
        return "";
    };
    AppModel.prototype.getAnalyticsData = function() {
        var sessionStorageService = new SessionStorageService();
        return sessionStorageService.getAnalyticsData();
    };
    AppModel.prototype.getHFLogicModel = function() {
        return HFLogicModel.getInstance();
    };
    AppModel.getInstance = function() {
        if (!AppModel.instance) {
            AppModel.instance = new AppModel();
        }
        return AppModel.instance;
    };
    w.AppModel = AppModel;
})(window, window.SessionStorageService, window.LocalStorageService);

(function(w, UtilFuns) {
    var HFLogicModel = function() {};
    HFLogicModel.instance = null;
    HFLogicModel.prototype.hfLogicData;
    HFLogicModel.prototype.getModIndList = function(databind, callback) {
        var that = this;
        var GDMT = {};
        var selectedACEARB = databind.gdmtVM.ACE_ARB.selectedOpt();
        GDMT.ACEI = selectedACEARB == "ACEI" ? true : false;
        GDMT.ARB = selectedACEARB == "ARB" ? true : false;
        GDMT.BB = getGdmtBB();
        var ARB_sacubatril = getARB_sacubatril() == "none" ? "no" : getARB_sacubatril() ? "yes" : "no";
        var ACE_ARB_BP = getACE_ARB_BP() == "none" ? "no" : getACE_ARB_BP() ? "yes" : "no";
        var BB_HeartRate = databind.gdmtVM.beta_blocker.ques()[0].selectedOpt() == "none" ? "no" : databind.gdmtVM.beta_blocker.ques()[0].selectedOpt() ? "yes" : "no";
        var NYHA = databind.patientVM.NYHA.selectedOpt();
        var LVEF = databind.patientVM.LVEF.selectedOpt();
        var filtered_Arr = that.hfLogicData.filter(function(currentValue, index, arr) {
            if (!currentValue.GDMTselection.ACEI && !currentValue.GDMTselection.ARB && !currentValue.GDMTselection.BB) return true;
            if (currentValue.GDMTselection.ACEI && GDMT.ACEI != currentValue.GDMTselection.ACEI) {
                return false;
            }
            if (currentValue.GDMTselection.ARB && GDMT.ARB != currentValue.GDMTselection.ARB) {
                return false;
            }
            if (currentValue.GDMTselection.BB && GDMT.BB != currentValue.GDMTselection.BB) {
                return false;
            }
            return true;
        });
        filtered_Arr = filtered_Arr.filter(function(currentValue, index, arr) {
            if (currentValue.ARB_sacubatril == "neutral") return true;
            return ARB_sacubatril == currentValue.ARB_sacubatril ? true : false;
        });
        filtered_Arr = filtered_Arr.filter(function(currentValue, index, arr) {
            if (currentValue.ACE_ARB_BP == "neutral") return true;
            return ACE_ARB_BP == currentValue.ACE_ARB_BP ? true : false;
        });
        filtered_Arr = filtered_Arr.filter(function(currentValue, index, arr) {
            if (currentValue.BB_HeartRate == "neutral") return true;
            return BB_HeartRate == currentValue.BB_HeartRate ? true : false;
        });
        filtered_Arr = filtered_Arr.filter(function(currentValue, index, arr) {
            if (currentValue.NYHA == "") {
                return true;
            }
            var nyha = NYHA;
            if (currentValue.RASInhibitor && currentValue.RASInhibitor.none) nyha = databind.patientVM.NYHA.selectedOpt();
            var arr = currentValue.NYHA.split("_");
            var flag = false;
            for (var i in arr) {
                if (arr[i] == nyha) {
                    flag = true;
                    break;
                }
            }
            return flag;
        });
        filtered_Arr = filtered_Arr.filter(function(currentValue, index, arr) {
            if (currentValue.LVEF == "") {
                return true;
            }
            var arr = currentValue.LVEF.split("_");
            var flag = false;
            for (var i in arr) {
                if (arr[i] == LVEF) {
                    flag = true;
                    break;
                }
            }
            return flag;
        });
        var isRASNoneSelected = databind.gdmtVM.ACE_ARB.selectedViewOpt() === "Neither";
        filtered_Arr = filtered_Arr.filter(function(item) {
            if (!item.RASInhibitor) return true;
            return isRASNoneSelected === item.RASInhibitor.none;
        });
        var medOptions = databind.patientVM.additionalMedications.options();
        filtered_Arr = filtered_Arr.filter(function(item) {
            var flag = true;
            var additionalMed = item.advice.additionalMed;
            if (additionalMed) flag = medOptions.some(function(option) {
                return option.id() === additionalMed.key && option.isSelected() === additionalMed.value;
            });
            return flag;
        });
        var indicationlist = [];
        for (var i = 0; i < filtered_Arr.length; i++) {
            var indiArr = filtered_Arr[i].Indication;
            for (var j = 0; j < indiArr.length; j++) {
                indicationlist.push(indiArr[j].id);
            }
        }
        var modifierlist = [];
        for (var i = 0; i < filtered_Arr.length; i++) {
            var modiArr = filtered_Arr[i].Modifier;
            for (var j = 0; j < modiArr.length; j++) {
                modifierlist.push(modiArr[j].id);
            }
        }
        var advicelist = [];
        for (var i = 0; i < filtered_Arr.length; i++) {
            var advice = filtered_Arr[i].advice;
            if (!advice) continue;
            advicelist.push({
                id: filtered_Arr[i].id,
                advice: advice,
                modis: filtered_Arr[i].Modifier,
                indis: filtered_Arr[i].Indication
            });
        }
        if (isRASNoneSelected && NYHA !== "NYHAI" && NYHA !== "NYHAUN") {
            indicationlist = [];
            modifierlist = [];
            var indication = databind.patientVM.indication.options();
            var modifier = databind.patientVM.modifier.options();
            for (var i = 0; i < indication.length; i++) indicationlist.push(indication[i].id());
            for (var i = 0; i < modifier.length; i++) {
                if (modifier[i].id() === "m1") continue;
                modifierlist.push(modifier[i].id());
            }
        }
        if (callback) {
            callback({
                indicationlist: indicationlist,
                modifierlist: modifierlist,
                advicelist: advicelist
            });
        }
        function getGdmtBB() {
            var selectedOpt = databind.gdmtVM.beta_blocker.drugs.selectedOpt();
            var options = databind.gdmtVM.beta_blocker.drugs.options();
            var option = options.filter(function(currentValue, index, arr) {
                return currentValue.id() == selectedOpt ? true : false;
            });
            return option[0].value();
        }
        function getARB_sacubatril() {
            var selectedACEARB = databind.gdmtVM.ACE_ARB.selectedOpt();
            if (!selectedACEARB || selectedACEARB == "Neither" || selectedACEARB == "ARNI") return false;
            var options = databind.gdmtVM.ACE_ARB.options();
            var option = options.filter(function(currentValue, index, arr) {
                return currentValue.id() == selectedACEARB ? true : false;
            });
            return option[0].que()[0].selectedOpt();
        }
        function getACE_ARB_BP() {
            var selectedACEARB = databind.gdmtVM.ACE_ARB.selectedOpt();
            if (!selectedACEARB || selectedACEARB == "Neither" || selectedACEARB == "ARNI") return false;
            var options = databind.gdmtVM.ACE_ARB.options();
            var option = options.filter(function(currentValue, index, arr) {
                return currentValue.id() == selectedACEARB ? true : false;
            });
            return option[0].que()[1].selectedOpt();
        }
    };
    HFLogicModel.prototype.getAdvice = function(userSelectionData) {};
    HFLogicModel.getInstance = function() {
        if (!HFLogicModel.instance) {
            HFLogicModel.instance = new HFLogicModel();
        }
        return HFLogicModel.instance;
    };
    w.HFLogicModel = HFLogicModel;
})(window, window.UtilityFunctions);

(function(window, AppModel) {
    var Notification = function() {};
    Notification.prototype.appStoreUri = "";
    var notificationUserGuid = window.acc.notificationUserGuid;
    var notificationUrl = window.acc.notificationUrl;
    var appIdentifier = window.acc.appIdentifier;
    var appVersionNumber = window.acc.appVersionNumber;
    var appostypecode = window.Lookup.deviceType == "iPad" || window.Lookup.deviceType == "iPhone" ? "iOS" : window.Lookup.deviceType == "Android" ? "Android" : "Web";
    var displayallusers = true;
    var osTypesCode = {
        iOS: "1",
        Android: "2",
        Web: "3",
        All: "4"
    };
    var notificationType = {
        critical: "1",
        nonCritical: "2"
    };
    var storageNotificationData = AppModel.getInstance().getNotificationData();
    var ajaxcall = function(uri, callback) {
        $.ajax({
            dataType: "json",
            url: uri,
            timeout: 3e4,
            success: function(result) {
                if (callback) {
                    callback(result);
                }
            },
            error: function(e) {
                console.log("ERROR");
                if (callback) {
                    callback(null);
                }
            }
        });
    };
    var callCriticalNotification = function(callback) {
        var appostype = osTypesCode[appostypecode];
        var notificationURI = notificationUrl + "/" + appIdentifier + "/" + appVersionNumber + "/" + appostype + "/" + notificationType.critical + "/" + displayallusers + "/" + notificationUserGuid;
        ajaxcall(notificationURI, callback);
    };
    var callNonCriticalNotification = function(callback) {
        var appostype = osTypesCode[appostypecode];
        var notificationURI = notificationUrl + "/" + appIdentifier + "/" + appVersionNumber + "/" + appostype + "/" + notificationType.nonCritical + "/" + displayallusers + "/" + notificationUserGuid;
        ajaxcall(notificationURI, callback);
    };
    var saveNotificationData = function(jsonData) {
        jsonData.version = appVersionNumber;
        storageNotificationData = storageNotificationData || {};
        if (jsonData.critical) {
            storageNotificationData.critical = jsonData.critical;
        }
        if (jsonData.noncritical) {
            storageNotificationData.noncritical = jsonData.noncritical;
        }
        if (!storageNotificationData.version) {
            storageNotificationData = jsonData;
        }
        if (storageNotificationData.version && storageNotificationData.version != jsonData.version) {
            storageNotificationData = jsonData;
        }
        AppModel.getInstance().setNotificationData(JSON.stringify(storageNotificationData));
    };
    Notification.prototype.callNotification = function(callback) {
        var jsonData = {
            critical: "",
            noncritical: ""
        };
        var loadcount = 0;
        var notificationLoaded = function() {
            if (loadcount >= 2) {
                saveNotificationData(jsonData);
                if (callback) callback();
            }
        };
        callCriticalNotification(function(data) {
            loadcount++;
            jsonData.critical = data;
            notificationLoaded();
        });
        callNonCriticalNotification(function(data) {
            loadcount++;
            jsonData.noncritical = data;
            notificationLoaded();
        });
    };
    Notification.prototype.getNonCriticalByOsType = function() {
        if (!storageNotificationData.noncritical) return [];
        var n_appVersionNumber = Number(appVersionNumber);
        var arr = storageNotificationData.noncritical.filter(function(currentValue, i) {
            return (currentValue.AppVersionNumber >= n_appVersionNumber || currentValue.AppVersionNumber == 0) && (currentValue.OsType == osTypesCode[appostypecode] || currentValue.OsType == osTypesCode.All);
        });
        arr = arr.sort(function(a, b) {
            var dt1 = Date.parse(a.EffectiveDate);
            var dt2 = Date.parse(b.EffectiveDate);
            return dt2.compareTo(dt1);
        });
        arr = arr.filter(function(currentValue, index, arr) {
            var ef = Date.parse(currentValue.EffectiveDate);
            var now = Date.parse(new Date());
            return now.compareTo(ef) >= 0 ? true : false;
        });
        arr = arr.filter(function(currentValue, index, arr) {
            var ex = Date.parse(currentValue.ExpirationDate);
            if (!ex) return true;
            var now = Date.parse(new Date());
            return now.compareTo(ex) <= 0 ? true : false;
        });
        return arr;
    };
    Notification.prototype.getCriticalByOsType = function() {
        if (!storageNotificationData.critical) return [];
        var n_appVersionNumber = Number(appVersionNumber);
        var arr = storageNotificationData.critical.filter(function(currentValue, i) {
            return (currentValue.AppVersionNumber >= n_appVersionNumber || currentValue.AppVersionNumber == 0) && (currentValue.OsType == osTypesCode[appostypecode] || currentValue.OsType == osTypesCode.All);
        });
        arr = arr.sort(function(a, b) {
            var dt1 = Date.parse(a.EffectiveDate);
            var dt2 = Date.parse(b.EffectiveDate);
            return dt2.compareTo(dt1);
        });
        arr = arr.filter(function(currentValue, index, arr) {
            var ef = Date.parse(currentValue.EffectiveDate);
            var now = Date.parse(new Date());
            return now.compareTo(ef) >= 0 ? true : false;
        });
        arr = arr.filter(function(currentValue, index, arr) {
            var ex = Date.parse(currentValue.ExpirationDate);
            if (!ex) return true;
            var now = Date.parse(new Date());
            return now.compareTo(ex) <= 0 ? true : false;
        });
        this.appStoreUri = osTypesCode[appostypecode] == 1 ? window.acc.iOSStoreUrl : osTypesCode[appostypecode] == 2 ? window.acc.androidStoreUrl : "";
        return arr;
    };
    window.notification = new Notification();
})(window, window.AppModel);

(function(w, pager, $) {
    var headRoutesData = {
        evaluate: "evaluate-Tab",
        advice: "advice-Tab",
        drugs: "drugs-Tab"
    };
    var auxRoutesData = {
        resources: "resources-Tab",
        about: "about-Tab",
        disclaimer: "disclaimer-Tab",
        news: "news-Tab"
    };
    var appRoutes = [ {
        url: "#!/content/evaluate"
    }, {
        url: "#!/content/advice/baselinetherapy"
    }, {
        url: "#!/content/resources"
    }, {
        url: "#!/content/disclaimer"
    }, {
        url: "#!/content/about"
    }, {
        url: "#!/content/news"
    }, {
        url: "#!/content/drugs"
    }, {
        url: "#!/content/drugs/view1"
    }, {
        url: "#!/content/drugs/view2"
    }, {
        url: "#!/content/staticadviceviewpage"
    } ];
    var Routing = function() {};
    Routing.getParams = function() {
        var query = window.location.hash.split("?")[1];
        var result = {};
        if (!query) return result;
        query.split("&").forEach(function(part) {
            var item = part.split("=");
            result[item[0]] = decodeURIComponent(item[1]);
        });
        return result;
    };
    Routing.prototype.routeGuard = function(p) {
        $(window).bind("hashchange", function(e) {
            var hash = window.location.hash.split("?")[0];
            var result = $.grep(appRoutes, function(e) {
                return e.url == hash;
            });
            if (result.length == 0) {
                pager.navigate("#!/content/staticadviceviewpage");
            }
        });
    };
    Routing.prototype.afterShow = function(p) {
        var cId = p.page.currentId;
        if (!cId && navigator) navigator.app.exitApp();
        $(window).scrollTop(0);
        cId = cId == "view1" || cId == "view2" ? cId = "drugs" : cId;
        if (cId == "evaluate" || cId == "advice" || cId == "drugs") {
            this.unselectHeadTabs();
            this.unselectAuxTabs();
            $("#" + headRoutesData[cId]).addClass("selected");
            $("#" + headRoutesData[cId]).addClass("active");
        }
        if (cId == "resources" || cId == "about" || cId == "resources" || cId == "disclaimer" || cId == "news") {
            this.unselectHeadTabs();
            this.unselectAuxTabs();
            $("#" + auxRoutesData[cId]).addClass("selected");
        }
    };
    Routing.prototype.unselectAuxTabs = function() {
        for (var id in auxRoutesData) {
            $("#" + auxRoutesData[id]).removeClass("selected");
        }
    };
    Routing.prototype.unselectHeadTabs = function() {
        for (var id in headRoutesData) {
            $("#" + headRoutesData[id]).removeClass("selected");
            $("#" + headRoutesData[id]).removeClass("active");
        }
    };
    window.Routing = Routing;
})(window, pager, $);

(function(w) {
    var DrugsView = function() {};
    DrugsView.prototype.databind;
    DrugsView.prototype.adviceList;
    DrugsView.prototype.init = function(databind) {
        var that = this;
        this.databind = databind;
        this.databind.drugSelected = ko.observable("");
        this.databind.drugName = ko.observable();
        this.databind.drugInitiation = ko.observable();
        this.databind.drugTitration = ko.observable();
        this.databind.drugMonitoring = ko.observable();
        this.databind.drugGuidelines = ko.observable();
        this.databind.guidelineHeading = ko.observable();
        this.databind.hideAccordion = ko.observable(false);
        this.databind.otherDrugReferences = ko.observableArray([]);
        this.databind.showSubTitle = ko.observable(false);
        this.databind.showQuickReferences = ko.observable("");
        this.databind.onDrugClick = function(data, e) {
            that.onDrugClick(data);
        };
        this.databind.onBackClick = function() {
            that.onAccordionClick({
                id: "divDrugReference",
                type: "ACC_COLLAPSE_ALL"
            });
            pager.navigate("#!/content/drugs/view1");
        };
        this.databind.accordionClick = function(data, e) {
            if (that.databind.drugSelected() == "idICD" || that.databind.drugSelected() == "idCRT") {
                data.type = "ACC_PANEL_ICD_CRT";
                that.onAccordionClick(data, e);
            } else {
                that.onAccordionClick(data, e);
            }
        };
        this.onAccordionClick({
            id: "divDrugReference",
            type: "ACC_COLLAPSE_ALL"
        });
    };
    DrugsView.prototype.onAccordionClick = function(data, event) {
        if (data.type == "ACC_PANEL_ICD_CRT") {
            var parentEl = $(event.currentTarget.parentElement);
            var el = parentEl.find(".collapsable-panel");
            if (!parentEl.hasClass("selected")) {
                parentEl.addClass("selected");
            } else {
                parentEl.removeClass("selected");
            }
            el.slideToggle("slow");
            var arrowEls = $("#" + data.id).find(".arrow-icon");
            var flag = false;
            for (var i = 0; i < arrowEls.length; i++) {
                if ($(arrowEls[i]).hasClass("selected")) {
                    flag = true;
                    break;
                }
            }
            var el = $("#" + data.id);
            $(el).find(".acc-collapse-all-text").hide();
            $(el).find(".acc-expend-all-text").hide();
        }
        if (data.type == "ACC_PANEL") {
            var parentEl = $(event.currentTarget.parentElement);
            var el = parentEl.find(".collapsable-panel");
            if (!parentEl.hasClass("selected")) {
                parentEl.addClass("selected");
            } else {
                parentEl.removeClass("selected");
            }
            el.slideToggle("slow");
            var arrowEls = $("#" + data.id).find(".arrow-icon");
            var flag = false;
            for (var i = 0; i < arrowEls.length; i++) {
                if ($(arrowEls[i]).hasClass("selected")) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                var el = $("#" + data.id);
                $(el).find(".acc-collapse-all-text").hide();
                $(el).find(".acc-expend-all-text").show();
            } else {
                var el = $("#" + data.id);
                $(el).find(".acc-expend-all-text").hide();
                $(el).find(".acc-collapse-all-text").show();
            }
        }
        if (data.type == "ACC_COLLAPSE_ALL") {
            var el = $("#" + data.id);
            $(el).find(".arrow-icon").removeClass("selected");
            var elPanel = el.find(".collapsable-panel").slideUp();
            $(el).find(".acc-collapse-all-text").hide();
            $(el).find(".acc-expend-all-text").show();
        }
        if (data.type == "ACC_EXPAND_ALL") {
            var el = $("#" + data.id);
            $(el).find(".arrow-icon").filter(function() {
                return !$(this).closest(".hide").length;
            }).addClass("selected");
            var elPanel = el.find(".collapsable-panel").slideDown();
            $(el).find(".acc-expend-all-text").hide();
            $(el).find(".acc-collapse-all-text").show();
        }
        if (data.type == "ACC_EXPAND_ALL_ICD_CRT") {
            var el = $("#" + data.id);
            $(el).find(".arrow-icon").addClass("selected");
            var elPanel = el.find(".collapsable-panel").slideDown(0);
            $(el).find(".acc-collapse-all-text").hide();
            $(el).find(".acc-expend-all-text").hide();
        }
        if (data.type == "ACC_COLLAPSE_ALL_WITHOUT_ANIM") {
            var el = $("#" + data.id);
            $(el).find(".arrow-icon").removeClass("selected");
            var elPanel = el.find(".collapsable-panel").slideUp(0);
            $(el).find(".acc-collapse-all-text").hide();
            $(el).find(".acc-expend-all-text").show();
        }
    };
    DrugsView.prototype.onPagerAfterShow = function(p) {
        var hash = window.location.hash.split("?")[0];
        if (hash.indexOf("content/drugs/view2") != -1) {
            var params = Routing.getParams();
            this.onDrugClick(params);
        }
        if (hash.indexOf("content/resources") != -1) {
            this.onAccordionClick({
                id: "idResourceAccordion",
                type: "ACC_COLLAPSE_ALL_WITHOUT_ANIM"
            });
        }
    };
    DrugsView.prototype.onDrugClick = function(data) {
        $("#guidlinesList li").each(function(index) {
            $(this).removeClass("selected");
        });
        $("#" + data.id).addClass("selected");
        this.showDrug(data.id);
    };
    DrugsView.prototype.showDrug = function(id) {
        var that = this;
        that.databind.hideAccordion(false);
        that.databind.otherDrugReferences([]);
        that.databind.showSubTitle(false);
        that.databind.showQuickReferences("");
        that.databind.drugSelected(id);
        if (id == "idACEI") {
            that.databind.drugName(that.databind.getCopyText("cp_ace_drug_heading"));
            that.databind.drugInitiation(that.databind.getCopyText("cp_ace_drug_init"));
            that.databind.drugTitration(that.databind.getCopyText("cp_ace_drug_tit"));
            that.databind.drugMonitoring(that.databind.getCopyText("cp_ace_drug_mon"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_ace_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idARBI") {
            that.databind.drugName(that.databind.getCopyText("cp_arb_drug_heading"));
            that.databind.drugInitiation(that.databind.getCopyText("cp_arb_drug_init"));
            that.databind.drugTitration(that.databind.getCopyText("cp_arb_drug_tit"));
            that.databind.drugMonitoring(that.databind.getCopyText("cp_arb_drug_mon"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_arb_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idBetaBlocker") {
            that.databind.drugName(that.databind.getCopyText("cp_bb_drug_heading"));
            that.databind.drugInitiation(that.databind.getCopyText("cp_bb_drug_init"));
            that.databind.drugTitration(that.databind.getCopyText("cp_bb_drug_tit"));
            that.databind.drugMonitoring(that.databind.getCopyText("cp_bb_drug_mon"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_bb_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idDiuretics") {
            that.databind.drugName(that.databind.getCopyText("cp_diuretic_drug_heading"));
            that.databind.drugInitiation(that.databind.getCopyText("cp_diuretic_drug_init"));
            that.databind.drugTitration(that.databind.getCopyText("cp_diuretic_drug_tit"));
            that.databind.drugMonitoring(that.databind.getCopyText("cp_diuretic_drug_mon"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_diuretic_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idImmunization") {
            that.databind.drugName(that.databind.getCopyText("cp_immunization_drug_heading"));
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_immunization_gui_heading"),
                text: that.databind.getCopyText("cp_immunization_gui_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_immunization_HP_heading"),
                text: that.databind.getCopyText("cp_immunization_HP_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_immunization_AIP_heading"),
                text: that.databind.getCopyText("cp_immunization_AIP_text")
            });
        } else if (id == "idARNIs") {
            that.databind.drugName(that.databind.getCopyText("cp_arni_drug_heading"));
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_initiation"),
                text: that.databind.getCopyText("cp_arni_drug_init")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_titration"),
                text: that.databind.getCopyText("cp_arni_drug_tit")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_monitoring"),
                text: that.databind.getCopyText("cp_arni_drug_mon")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_ci_cautions"),
                text: that.databind.getCopyText("cp_arni_ci_cautions")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_drug_gui_heading_arni"),
                text: that.databind.getCopyText("cp_arni_drug_gui")
            });
        } else if (id == "idAldosteroneAntagonists") {
            that.databind.drugName(that.databind.getCopyText("cp_aldosterone_drug_heading"));
            that.databind.drugInitiation(that.databind.getCopyText("cp_aldosterone_drug_init"));
            that.databind.drugTitration(that.databind.getCopyText("cp_aldosterone_drug_tit"));
            that.databind.drugMonitoring(that.databind.getCopyText("cp_aldosterone_drug_mon"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_aldosterone_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idHydralNitrates") {
            that.databind.drugName(that.databind.getCopyText("cp_hydralazine_drug_heading"));
            that.databind.drugInitiation(that.databind.getCopyText("cp_hydralazine_drug_init"));
            that.databind.drugTitration(that.databind.getCopyText("cp_hydralazine_drug_tit"));
            that.databind.drugMonitoring(that.databind.getCopyText("cp_hydralazine_drug_mon"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_hydralazine_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idIvabridine") {
            that.databind.drugName(that.databind.getCopyText("cp_ivabradine_drug_heading"));
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_initiation"),
                text: that.databind.getCopyText("cp_ivabradine_drug_init")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_titration"),
                text: that.databind.getCopyText("cp_ivabradine_drug_tit")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_monitoring"),
                text: that.databind.getCopyText("cp_ivabradine_drug_mon")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_ci_cautions"),
                text: that.databind.getCopyText("cp_ivabradine_ci_cautions")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_drug_gui_heading_arni"),
                text: that.databind.getCopyText("cp_ivabradine_drug_gui")
            });
        } else if (id == "idICD") {
            that.databind.hideAccordion(true);
            that.databind.drugName(that.databind.getCopyText("cp_icd_drug_heading"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_icd_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idCRT") {
            that.databind.hideAccordion(true);
            that.databind.drugName(that.databind.getCopyText("cp_crt_drug_heading"));
            that.databind.drugGuidelines(that.databind.getCopyText("cp_crt_drug_gui"));
            that.databind.guidelineHeading(that.databind.getCopyText("cp_drug_gui_heading"));
        } else if (id == "idSglt2") {
            that.databind.drugName(that.databind.getCopyText("cp_sglt2_drug_heading"));
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_initiation"),
                text: that.databind.getCopyText("cp_sglt2_drug_init")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_titration"),
                text: that.databind.getCopyText("cp_sglt2_drug_tit")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_monitoring"),
                text: that.databind.getCopyText("cp_sglt2_drug_mom")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_ci_cautions"),
                text: that.databind.getCopyText("cp_sglt2_ci_cautions")
            });
        } else if (id == "idGuideline") {
            that.databind.drugName(that.databind.getCopyText("cp_gui_drug_guiding"));
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_HF_target"),
                text: that.databind.getCopyText("cp_gui_HF_target_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_target"),
                text: that.databind.getCopyText("cp_gui_drug_target_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_start_gdmt"),
                text: that.databind.getCopyText("cp_gui_start_gdmt_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_barriers"),
                text: that.databind.getCopyText("cp_gui_barriers_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_diligent"),
                text: that.databind.getCopyText("cp_gui_diligent_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_tolerability"),
                text: that.databind.getCopyText("cp_gui_tolerability_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_only"),
                text: that.databind.getCopyText("cp_gui_drug_only_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_transcatheter"),
                text: that.databind.getCopyText("cp_gui_transcatheter_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_focus"),
                text: that.databind.getCopyText("cp_gui_drug_focus_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_perspective"),
                text: that.databind.getCopyText("cp_gui_perspective_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_optimize"),
                text: that.databind.getCopyText("cp_gui_drug_optimize_text")
            });
        } else if (id == "idSymptom") {
            that.databind.showSubTitle(true);
            that.databind.drugName(that.databind.getCopyText("cp_gui_drug_symptom"));
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_palliative"),
                text: that.databind.getCopyText("cp_gui_drug_palliative_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_transplant"),
                text: that.databind.getCopyText("cp_gui_drug_transplant_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_left"),
                text: that.databind.getCopyText("cp_gui_drug_left_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_investigational"),
                text: that.databind.getCopyText("cp_gui_drug_investigational_text")
            });
        } else if (id == "idConsiderations") {
            that.databind.drugName(that.databind.getCopyText("cp_gui_drug_considerations"));
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_capitalize"),
                text: that.databind.getCopyText("cp_gui_drug_capitalize_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_consider"),
                text: that.databind.getCopyText("cp_gui_drug_consider_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_simplify"),
                text: that.databind.getCopyText("cp_gui_drug_simplify_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_cost"),
                text: that.databind.getCopyText("cp_gui_drug_cost_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_improve"),
                text: that.databind.getCopyText("cp_gui_drug_improve_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_educate"),
                text: that.databind.getCopyText("cp_gui_drug_educate_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_recommend"),
                text: that.databind.getCopyText("cp_gui_drug_recommend_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_behavioral"),
                text: that.databind.getCopyText("cp_gui_drug_behavioral_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_anticipate"),
                text: that.databind.getCopyText("cp_gui_drug_anticipate_text")
            });
            that.databind.otherDrugReferences.push({
                heading: that.databind.getCopyText("cp_gui_drug_monitor"),
                text: that.databind.getCopyText("cp_gui_drug_monitor_text")
            });
        } else if (id == "idReferences") {
            that.databind.showQuickReferences("cp_gui_drug_references_text");
            that.databind.drugName(that.databind.getCopyText("cp_gui_drug_references"));
        } else if (id == "idReferral") {
            that.databind.showQuickReferences("cp_gui_drug_referral_text");
            that.databind.drugName(that.databind.getCopyText("cp_gui_drug_referral"));
        } else if (id == "idTMVR") {
            that.databind.showQuickReferences("cp_gui_tmvr_text");
            that.databind.drugName(that.databind.getCopyText("cp_gui_tmvr"));
        } else if (id == "idAfricanPatient") {
            that.databind.showQuickReferences("cp_gui_AA_Patients_text");
            that.databind.drugName(that.databind.getCopyText("cp_gui_AA_Patients"));
        } else if (id == "idPathophysiologic") {
            that.databind.showQuickReferences("cp_gui_pathophysiologic_text");
            that.databind.drugName(that.databind.getCopyText("cp_gui_pathophysiologic"));
        } else if (id == "idAuthForm") {
            that.databind.showQuickReferences("cp_gui_auth_form_text");
            that.databind.drugName(that.databind.getCopyText("cp_gui_auth_form"));
        }
        if (id == "idICD" || id == "idCRT") {
            this.onAccordionClick({
                id: "divDrugReference",
                type: "ACC_EXPAND_ALL_ICD_CRT"
            });
        } else {
            this.onAccordionClick({
                id: "divDrugReference",
                type: "ACC_COLLAPSE_ALL"
            });
        }
    };
    w.DrugsView = DrugsView;
})(window);

(function(w, UtilFuns) {
    var AdviceView = function() {};
    AdviceView.prototype.databind;
    AdviceView.prototype.adviceList;
    AdviceView.prototype.exceptionData;
    AdviceView.prototype.init = function(databind) {
        var that = this;
        this.databind = databind;
        this.databind.showRASContraindicationHeader = ko.observable(true);
        this.databind.acearbAdvice = ko.observable();
        this.databind.bbSummary = ko.observable();
        this.databind.diureticSummary = ko.observable();
        this.databind.acearbInitiation = ko.observable();
        this.databind.acearbTitration = ko.observable();
        this.databind.acearbMonitoring = ko.observable();
        this.databind.acearbGuidelines = ko.observable();
        this.databind.showBBExceptionBtn = ko.observable(false);
        this.databind.showDiureticExceptionBtn = ko.observable(false);
        this.databind.showAceArbExceptionBtn = ko.observable(false);
        this.databind.betaBlockerAdvice = ko.observable();
        this.databind.diureticAdvice = ko.observable();
        this.databind.additionalTherapy = ko.observableArray();
        this.databind.deviceTherapy = ko.observableArray();
        this.databind.advice_RAAS_contraindication = ko.observable({});
        this.databind.advice_RAAS_none_additional = ko.observable(null);
        this.databind.advice_BB_contraindication = ko.observable({});
        this.databind.advice_diuretic_contraindication = ko.observable({});
        this.databind.rasInsId = ko.observable("");
        window.adviceViewObj = this;
        this.databind.onViewInstructionClick = function(drugType) {
            if (drugType == "acearb") {
                if (window.adviceViewObj.databind.gdmtVM.ACE_ARB.selectedViewOpt() == "ARNI") {
                    pager.navigate("#!/content/drugs/view2?id=idARNIs");
                } else if (window.adviceViewObj.databind.gdmtVM.ACE_ARB.selectedOpt() == "ARB") {
                    pager.navigate("#!/content/drugs/view2?id=idARBI");
                } else {
                    pager.navigate("#!/content/drugs/view2?id=idACEI");
                }
            } else if (drugType == "betablocker") pager.navigate("#!/content/drugs/view2?id=idBetaBlocker"); else if (drugType == "diuretics") pager.navigate("#!/content/drugs/view2?id=idDiuretics"); else if (drugType.indexOf("arni") > -1) pager.navigate("#!/content/drugs/view2?id=idARNIs"); else if (drugType.indexOf("ivabradine") > -1) pager.navigate("#!/content/drugs/view2?id=idIvabridine"); else if (drugType.indexOf("aldosterone") > -1) pager.navigate("#!/content/drugs/view2?id=idAldosteroneAntagonists"); else if (drugType.indexOf("hydralazine") > -1) pager.navigate("#!/content/drugs/view2?id=idHydralNitrates"); else if (drugType.indexOf("icd") > -1) pager.navigate("#!/content/drugs/view2?id=idICD"); else if (drugType.indexOf("crt") > -1) pager.navigate("#!/content/drugs/view2?id=idCRT"); else if (drugType.indexOf("all_patient1") > -1) pager.navigate("#!/content/drugs/view2?id=idReferral"); else if (drugType.indexOf("all_patient2") > -1) pager.navigate("#!/content/drugs/view2?id=idSymptom"); else if (drugType.indexOf("guideline") > -1) pager.navigate("#!/content/drugs/view2?id=idGuideline"); else if (drugType.indexOf("acei") > -1) pager.navigate("#!/content/drugs/view2?id=idACEI"); else if (drugType.indexOf("arb") > -1) pager.navigate("#!/content/drugs/view2?id=idARBI"); else if (drugType.indexOf("SGLT2i") > -1) pager.navigate("#!/content/drugs/view2?id=idSglt2");
        };
        this.exceptionData = ko.mapping.fromJS(window.AppModel.getInstance().getExceptionData());
        this.databind.selectedExceptionData = ko.observable({
            id: "",
            heading1: "",
            heading2: "",
            description: "",
            options: []
        });
        this.databind.onShowExceptionPopup = function(data, e) {
            var jsonString = ko.mapping.toJSON(that.exceptionData[data.value]);
            that.databind.selectedExceptionData(JSON.parse(jsonString));
            clearInterval(w.displayinterval);
            w.displayinterval = setInterval(function() {
                if ($("#exampleModal1").css("display") == "block") {
                    if (!window.appResetting) $("#exampleModal1").find(".scrollable").scrollTop(0);
                    clearInterval(w.displayinterval);
                }
            }, 2);
        };
        this.databind.onExceptionSaveClick = function() {
            var id = that.databind.selectedExceptionData().id;
            var options = that.exceptionData[id].options();
            var selOptions = that.databind.selectedExceptionData().options;
            for (var i = 0; i < options.length; i++) {
                for (var j = 0; j < selOptions.length; j++) {
                    if (options[i].id() == selOptions[j].id) {
                        options[i].value(selOptions[j].value);
                        break;
                    }
                }
            }
            that.exceptionData[id].description(that.databind.selectedExceptionData().description);
            var jsonString = ko.mapping.toJSON(that.exceptionData);
            AppModel.getInstance().setExceptionData(JSON.parse(jsonString));
        };
        this.databind.sendMail = function() {
            var currentdate = new Date();
            var date = currentdate.toString("MM/dd/yyyy");
            var time = new Date().toString("hh:mmtt");
            time = ViewModel.prototype._adviceView.timeConversion(time);
            var datetime = date + " " + time;
            var subject = "Advice Summary [generated " + datetime + "]";
            ViewModel.prototype._adviceView.generateShortenURL(function(shortenURL) {
                if (shortenURL) {
                    var body = ViewModel.prototype._adviceView.getMailBody(datetime, shortenURL);
                    mymail = "mailto:?subject=" + subject + "&body=" + body + "";
                    window.location.href = mymail;
                }
            });
        };
        this.databind.printForIos = function() {
            ViewModel.prototype._adviceView.generateShortenURL(function(shortenURL) {
                if (shortenURL) {
                    window.open(shortenURL, "_blank");
                }
            }, true);
        };
        this.databind.printAdvicePage = function() {
            if (window.cordova) {
                cordova.plugins.printer.print();
            } else {
                window.print();
            }
        };
    };
    AdviceView.prototype.generateShortenURL = function(callback, isIos) {
        var that = this;
        var slOpt = that.databind.gdmtVM.beta_blocker.drugs.selectedOpt();
        slOpt = slOpt == "bb_opsl" ? "bb_op0" : slOpt;
        var firstLineAdvice = that.databind.gdmtVM.beta_blocker.drugs.firstLineAdvice[slOpt];
        var betablockerAdviceId = firstLineAdvice.advice();
        var slOpt = that.databind.gdmtVM.diuretic.ques()[0].selectedOpt();
        slOpt = slOpt == "none" || slOpt == false ? "no" : "yes";
        var firstLineAdvice = that.databind.gdmtVM.diuretic.firstLineAdvice[slOpt];
        var diureticAdviceId = firstLineAdvice.advice();
        var contraindicationsJson = JSON.parse(ko.mapping.toJSON(that.databind.contraindications));
        var arr = contraindicationsJson.ACE_ARB.ques;
        var acearbObj = {
            ques: [],
            description: "",
            show: false
        };
        arr.filter(function(currentValue, index, arr) {
            var obj = {
                que: "",
                options: []
            };
            var arry = currentValue.options;
            arry.filter(function(curr, index, arr) {
                if (curr.isSelected && curr.id != "que1_op1") {
                    obj.options.push(curr.copytext);
                    obj.que = currentValue.copytext;
                }
            });
            if (obj.options.length != 0) {
                acearbObj.ques.push(obj);
                acearbObj.show = true;
            }
        });
        acearbObj.description = contraindicationsJson.ACE_ARB.description;
        if (acearbObj.description) acearbObj.show = true;
        var arr = contraindicationsJson.beta_blocker.ques;
        var bbObj = {
            ques: [],
            description: "",
            show: false
        };
        arr.filter(function(currentValue, index, arr) {
            var obj = {
                que: "",
                options: []
            };
            var arry = currentValue.options;
            arry.filter(function(curr, index, arr) {
                if (curr.isSelected && curr.id != "que_con_bb_op1") {
                    obj.options.push(curr.copytext);
                }
            });
            if (obj.options.length != 0) {
                bbObj.ques.push(obj);
                bbObj.show = true;
            }
        });
        bbObj.description = contraindicationsJson.beta_blocker.description;
        if (bbObj.description) bbObj.show = true;
        var arr = contraindicationsJson.diuretic.ques;
        var diureticObj = {
            ques: [],
            description: "",
            show: false
        };
        arr.filter(function(currentValue, index, arr) {
            var obj = {
                que: "",
                options: []
            };
            var arry = currentValue.options;
            arry.filter(function(curr, index, arr) {
                if (curr.isSelected && curr.id != "que_con_du_op1") {
                    obj.options.push(curr.copytext);
                }
            });
            if (obj.options.length != 0) {
                diureticObj.ques.push(obj);
                diureticObj.show = true;
            }
        });
        diureticObj.description = contraindicationsJson.diuretic.description;
        if (diureticObj.description) diureticObj.show = true;
        var appModel = AppModel.getInstance();
        acearbAdviceId = appModel.getIdByCopyText(this.databind.acearbAdvice());
        var additionalTherapyIds = [];
        var therapy = that.databind.additionalTherapy();
        for (var i = 0; i < therapy.length; i++) {
            var copytextId = appModel.getIdByCopyText(therapy[i].summary);
            additionalTherapyIds.push({
                id: copytextId
            });
        }
        therapy = that.databind.deviceTherapy();
        for (var i = 0; i < therapy.length; i++) {
            var copytextId = appModel.getIdByCopyText(therapy[i].summary);
            additionalTherapyIds.push({
                id: copytextId
            });
        }
        var strAdditionalAdviceIds = JSON.stringify(additionalTherapyIds);
        var acearbException = JSON.stringify(acearbObj);
        var bbException = JSON.stringify(bbObj);
        var diureticException = JSON.stringify(diureticObj);
        var advice_RAAS_none_additional = "";
        if (that.databind.advice_RAAS_none_additional()) {
            advice_RAAS_none_additional = appModel.getIdByCopyText(that.databind.advice_RAAS_none_additional().summary);
        }
        var queryString = acearbAdviceId + "#" + betablockerAdviceId + "#" + diureticAdviceId + "#" + strAdditionalAdviceIds + "#" + acearbException + "#" + bbException + "#" + diureticException + "#" + advice_RAAS_none_additional + "#" + (isIos ? Date.now() : 0);
        var encodedData = window.btoa(queryString);
        if (!!isIos) {
            var mainURL = window.acc.baseUrl + "?" + Date.now() + "#!/content/staticadviceviewpage?data=" + encodedData;
            callback(mainURL);
            return;
        }
        var mainURL = window.acc.firebaseDynamicLink.link + "?data=" + encodedData;
        var data = JSON.stringify({
            dynamicLinkInfo: {
                domainUriPrefix: window.acc.firebaseDynamicLink.domainUriPrefix,
                link: mainURL
            }
        });
        $.ajax({
            url: window.acc.firebaseDynamicLink.api,
            type: "POST",
            data: data,
            contentType: "application/json;",
            dataType: "json"
        }).done(function(resp) {
            callback(resp.shortLink || mainURL);
        }).fail(function(a, b) {
            callback(mainURL);
            console.error(a, b);
        });
    };
    AdviceView.prototype.getMailBody = function(date, url) {
        var that = this;
        var appModel = AppModel.getInstance();
        var linebreak = "%0d%0a";
        var message = appModel.getCopytext("cp_email_generate_text") + date;
        message += linebreak;
        message += linebreak;
        message += appModel.getCopytext("cp_email_header_info") + url;
        message += linebreak;
        message += linebreak;
        var patient_profile = "";
        var nhya = that.databind.patientVM.NYHA;
        var nhyaOption = UtilFuns.findAndGetValue(nhya.options, nhya.selectedOpt());
        if (nhyaOption.value()) {
            patient_profile += linebreak;
            patient_profile += that.databind.getCopyText(nhyaOption.copytext() + "_email_text");
        }
        var lvef = that.databind.patientVM.LVEF;
        var lvefOption = UtilFuns.findAndGetValue(lvef.options, lvef.selectedOpt());
        if (lvefOption.value()) {
            patient_profile += linebreak;
            patient_profile += that.databind.getCopyText(lvefOption.copytext() + "_email_text");
        }
        var allIndication = that.databind.patientVM.indication.options();
        allIndication.filter(function(currentValue, index, arr) {
            if (currentValue.selectedOpt()) {
                var cpId = currentValue.copytext();
                patient_profile += linebreak;
                patient_profile += appModel.getCopytext(cpId + "_email_text");
            }
        });
        var allModifier = that.databind.patientVM.modifier.options();
        allModifier.filter(function(currentValue, index, arr) {
            if (currentValue.selectedOpt()) {
                var cpId = currentValue.copytext();
                patient_profile += linebreak;
                patient_profile += appModel.getCopytext(cpId + "_email_text");
            }
        });
        if (patient_profile) {
            message += appModel.getCopytext("cp_email_patient_profile_text");
            message += patient_profile;
            message += linebreak;
            message += linebreak;
        }
        message += appModel.getCopytext("cp_email_patient_advice_text");
        var slOpt = this.databind.gdmtVM.ACE_ARB.selectedOpt();
        var arr = this.databind.gdmtVM.ACE_ARB.options();
        arr = arr.filter(function(currentValue, index, arr) {
            return currentValue.id() == slOpt;
        });
        acearbAdviceId = appModel.getIdByCopyText(this.databind.acearbAdvice());
        message += linebreak;
        message += linebreak;
        message += appModel.getCopytext(acearbAdviceId + "_email_text");
        var rassCI = that.databind.advice_RAAS_contraindication();
        var rassDesc = $.trim(rassCI.description);
        if (rassCI.ques.length > 0 || rassDesc) {
            message += linebreak;
            message += appModel.getCopytext("cp_email_contraindication_text");
            var checkDuplicateText = "";
            for (var i = 0; i < rassCI.ques.length; i++) {
                var copyTexts = rassCI.ques[i].copyTexts;
                for (var j = 0; j < copyTexts.length; j++) {
                    var text = appModel.getCopytext(copyTexts[j]);
                    if (checkDuplicateText.indexOf(text) == -1) {
                        message += linebreak;
                        message += "-" + appModel.getCopytext(copyTexts[j] + "_email_text");
                    }
                    checkDuplicateText += ":" + text;
                }
            }
            var description = rassDesc;
            if (description) {
                var maxChars = 17;
                message += linebreak;
                if (description.length > 17) {
                    message += description.substring(0, maxChars);
                    message += "...";
                } else {
                    message += description;
                }
            }
        }
        var adviceRAASNoneAdd = that.databind.advice_RAAS_none_additional();
        if (adviceRAASNoneAdd) {
            var ctId = appModel.getIdByCopyText(adviceRAASNoneAdd.summary);
            switch (ctId) {
              case "cp_adv_at_arni10":
              case "cp_adv_at_arni24":
              case "cp_adv_at_arni10_black":
              case "cp_adv_at_arni24_black":
                message += linebreak;
                message += linebreak;
                message += appModel.getCopytext("cp_adv_at_arni_email_text");
                break;

              case "cp_adv_at_arni_not":
              case "cp_adv_at_arni_ace":
                message += linebreak;
                message += linebreak;
                message += appModel.getCopytext("cp_adv_at_arni_not_email_text");
                break;

              default:
                message += linebreak;
                message += linebreak;
                message += appModel.getCopytext(ctId + "_email_text");
                break;
            }
        }
        var betaBlockerCI = that.databind.advice_BB_contraindication();
        var bbDesc = $.trim(betaBlockerCI.description);
        if (betaBlockerCI.ques.length > 0 || bbDesc) {
            message += linebreak;
            message += linebreak;
            message += appModel.getCopytext("cp_email_BB_text");
            message += linebreak;
            message += appModel.getCopytext("cp_email_contraindication_text");
            var checkDuplicateText = "";
            var betaBlokerCIs = "";
            var count = 0;
            for (var i = 0; i < betaBlockerCI.ques.length; i++) {
                var options = betaBlockerCI.ques[i].options;
                for (var j = 0; j < options.length; j++) {
                    if (checkDuplicateText.indexOf(options[j]) == -1) {
                        betaBlokerCIs += linebreak;
                        betaBlokerCIs += "-" + options[j];
                        count++;
                    }
                    checkDuplicateText += ":" + options[j];
                }
            }
            if (count > 3) {
                message += linebreak;
                message += appModel.getCopytext("cp_email_multiple_text");
            } else {
                message += betaBlokerCIs;
            }
            var description = bbDesc;
            if (description) {
                var maxChars = 17;
                message += linebreak;
                if (description.length > 17) {
                    message += description.substring(0, maxChars);
                    message += "...";
                } else {
                    message += description;
                }
            }
        } else {
            var betaBlockerAdviceId = appModel.getIdByCopyText(this.databind.betaBlockerAdvice());
            message += linebreak;
            message += linebreak;
            message += appModel.getCopytext(betaBlockerAdviceId + "_email_text");
        }
        var additionalTherapies = that.databind.additionalTherapy();
        if (additionalTherapies.length > 0) {
            for (var i = 0; i < additionalTherapies.length; i++) {
                var id = additionalTherapies[i].id;
                switch (id) {
                  case "cp_adv_at_arni10":
                  case "cp_adv_at_arni24":
                  case "cp_adv_at_arni10_black":
                  case "cp_adv_at_arni24_black":
                    message += linebreak;
                    message += linebreak;
                    message += appModel.getCopytext("cp_adv_at_arni_email_text");
                    break;

                  case "cp_adv_at_arni_not":
                  case "cp_adv_at_arni_ace":
                    message += linebreak;
                    message += linebreak;
                    message += appModel.getCopytext("cp_adv_at_arni_not_email_text");
                    break;

                  default:
                    var ctId = appModel.getIdByCopyText(additionalTherapies[i].summary);
                    message += linebreak;
                    message += linebreak;
                    message += appModel.getCopytext(ctId + "_email_text");
                    break;
                }
            }
        }
        var diureticCI = that.databind.advice_diuretic_contraindication();
        if (diureticCI.ques.length > 0) {
            message += linebreak;
            message += appModel.getCopytext("cp_email_diuretics_text");
            message += linebreak;
            message += appModel.getCopytext("cp_email_contraindication_text");
            var checkDuplicateText = "";
            for (var i = 0; i < diureticCI.ques.length; i++) {
                var options = diureticCI.ques[i].options;
                for (var j = 0; j < options.length; j++) {
                    if (checkDuplicateText.indexOf(options[j]) == -1) {
                        message += linebreak;
                        message += "-" + options[j];
                    }
                    checkDuplicateText += ":" + options[j];
                }
            }
            var description = diureticCI.description;
            if (description) {
                var maxChars = 17;
                message += linebreak;
                if (description.length > 17) {
                    message += description.substring(0, maxChars);
                    message += "...";
                } else {
                    message += description;
                }
            }
        } else {
            var betaBlockerAdviceId = appModel.getIdByCopyText(this.databind.diureticAdvice());
            message += linebreak;
            message += linebreak;
            message += appModel.getCopytext(betaBlockerAdviceId + "_email_text");
        }
        var deviceTherapy = that.databind.deviceTherapy();
        if (deviceTherapy.length > 0) {
            for (var i = 0; i < deviceTherapy.length; i++) {
                var ctId = appModel.getIdByCopyText(deviceTherapy[i].summary);
                message += linebreak;
                message += linebreak;
                message += appModel.getCopytext(ctId + "_email_text");
            }
        }
        message += linebreak;
        message += linebreak;
        message += appModel.getCopytext("cp_email_footer_info");
        return message;
    };
    AdviceView.prototype.timeConversion = function(s) {
        var time = s.toLowerCase().split(":");
        var hours = parseInt(time[0]);
        var _ampm = time[1];
        if (_ampm.indexOf("am") != -1 && hours == 12) {
            time[0] = "00";
        }
        if (_ampm.indexOf("pm") != -1 && hours < 12) {
            time[0] = hours + 12;
        }
        return time.join(":").replace(/(am|pm)/, "");
    };
    AdviceView.prototype.resetExceptionData = function() {
        var that = this;
        var ace_arb = AppModel.getInstance().getGDMTData().ACE_ARB.selectedOpt == "ACEI" || AppModel.getInstance().getGDMTData().ACE_ARB.selectedOpt == "ARB" ? true : false;
        var neither = AppModel.getInstance().getGDMTData().ACE_ARB.options.filter(function(currentValue, index, arr) {
            return currentValue.id == "Neither";
        });
        var bb = AppModel.getInstance().getGDMTData().beta_blocker;
        var du = AppModel.getInstance().getGDMTData().diuretic;
        var arniFlag = neither[0].que[0].selectedOpt == "none" || !neither[0].que[0].selectedOpt ? false : true;
        var bbFlag = bb.drugs.selectedOpt == "bb_op0" ? false : true;
        var duFlag = du.ques[0].selectedOpt == "none" || !du.ques[0].selectedOpt ? false : true;
        if (arniFlag || ace_arb) {
            var options = that.exceptionData["ACE_ARB"].options();
            for (var i = 0; i < options.length; i++) {
                options[i].value(false);
            }
            that.exceptionData["ACE_ARB"].description("");
        }
        if (bbFlag) {
            var options = that.exceptionData["beta_blocker"].options();
            for (var i = 0; i < options.length; i++) {
                options[i].value(false);
            }
            that.exceptionData["beta_blocker"].description("");
        }
        if (duFlag) {
            var options = that.exceptionData["diuretic"].options();
            for (var i = 0; i < options.length; i++) {
                options[i].value(false);
            }
            that.exceptionData["diuretic"].description("");
        }
    };
    AdviceView.prototype.showAceArbAdvice = function() {
        var slOpt = this.databind.gdmtVM.ACE_ARB.selectedOpt();
        var arr = this.databind.gdmtVM.ACE_ARB.options();
        arr = arr.filter(function(currentValue, index, arr) {
            return currentValue.id() == slOpt;
        });
        var selectedDrug = arr[0].selectedOpt();
        var isNeither = slOpt == "Neither" ? true : false;
        this.databind.showAceArbExceptionBtn(false);
        this.databind.rasInsId("");
        this.databind.showRASContraindicationHeader(true);
        if (!isNeither) {
            var arniAdviceList = this.adviceList.filter(function(obj) {
                if (obj.advice.indexOf("ARNI_10") > -1 || obj.advice.indexOf("ARNI_24") > -1) {
                    return true;
                }
            });
            if (arniAdviceList.length > 0) {
                this.databind.acearbAdvice(this.databind.getCopyText("cp_ace_arb_on_arni"));
            } else {
                var firstLineAdvice = arr[0].firstLineAdvice[selectedDrug];
                var rasYesAdvice = this.adviceList.filter(function(obj) {
                    return obj.id === "RAS1_ace" || obj.id === "RAS1_arb" || obj.id === "RAS1" || obj.id === "RAS5" || obj.id === "RAS6" || obj.id === "RAS14" && selectedDrug != "op0";
                });
                if (rasYesAdvice.length === 1) {
                    var ras1Advice = this.adviceList.filter(function(obj) {
                        return obj.id === "RAS1_ace" || obj.id === "RAS1_arb";
                    })[0];
                    if (ras1Advice && selectedDrug !== "op0") {
                        this.databind.acearbAdvice(this.databind.getCopyText(firstLineAdvice.advice() + "_ras1"));
                    } else {
                        this.databind.acearbAdvice(this.databind.getCopyText("cp_" + rasYesAdvice[0].advice));
                    }
                } else {
                    this.databind.acearbAdvice(this.databind.getCopyText(firstLineAdvice.advice()));
                }
                this.databind.rasInsId("acearb");
            }
        } else {
            var ques = arr[0].que();
            var rasNoneAdvices = this.adviceList.filter(function(obj) {
                return obj.advice === "RASNone_sp" || obj.advice === "RASNone_1" || obj.advice === "RASNone_2" || obj.advice === "RASNone_3" || obj.advice === "RASNone_4" || obj.advice === "RASNone_5" || obj.advice === "RASNone_6";
            })[0];
            var isNoneSelected = this.databind.gdmtVM.ACE_ARB.selectedViewOpt() === "Neither";
            if (rasNoneAdvices && isNoneSelected) {
                this.databind.showAceArbExceptionBtn(true);
                this.databind.acearbAdvice(this.databind.getCopyText("cp_" + rasNoneAdvices.advice));
                this.databind.rasInsId("");
                if (rasNoneAdvices.advice === "RASNone_4") this.databind.rasInsId("arb"); else if (rasNoneAdvices.advice === "RASNone_2") this.databind.rasInsId("arni"); else if (rasNoneAdvices.advice === "RASNone_3" || rasNoneAdvices.advice === "RASNone_5") this.databind.rasInsId("acei");
                if (rasNoneAdvices.advice === "RASNone_4" || rasNoneAdvices.advice === "RASNone_5" || rasNoneAdvices.advice === "RASNone_6") this.databind.showRASContraindicationHeader(false);
                return;
            }
            var isArniSelected = this.databind.gdmtVM.ACE_ARB.selectedViewOpt() === "ARNI";
            var isRAS13 = this.adviceList.some(function(obj) {
                return obj.advice === "RAS13";
            });
            if (isArniSelected && isRAS13) {
                this.databind.acearbAdvice(this.databind.getCopyText("cp_ras13"));
                this.databind.rasInsId("arni");
                return;
            }
            var isRAS18 = this.adviceList.some(function(obj) {
                return obj.advice === "RAS18";
            });
            if (isArniSelected && isRAS18) {
                this.databind.acearbAdvice(this.databind.getCopyText("cp_RAS18"));
                this.databind.rasInsId("arni");
                return;
            }
            var ques = arr[0].que();
            var adviceid = ques[0].selectedOpt() == true ? "cp_neither_flt_on_arni" : "cp_neither_flt_not_arni";
            if (!ques[0].selectedOpt()) this.databind.showAceArbExceptionBtn(true);
            this.databind.acearbAdvice(this.databind.getCopyText(adviceid));
            this.databind.rasInsId("acearb");
        }
    };
    AdviceView.prototype.showBetaBlockerAdvice = function() {
        var slOpt = this.databind.gdmtVM.beta_blocker.drugs.selectedOpt();
        slOpt = slOpt == "bb_opsl" ? "bb_op0" : slOpt;
        var firstLineAdvice = this.databind.gdmtVM.beta_blocker.drugs.firstLineAdvice[slOpt];
        this.databind.betaBlockerAdvice(this.databind.getCopyText(firstLineAdvice.advice()));
        this.databind.showBBExceptionBtn(slOpt == "bb_op0" ? true : false);
    };
    AdviceView.prototype.showDiureticAdvice = function() {
        var slOpt = this.databind.gdmtVM.diuretic.ques()[0].selectedOpt();
        slOpt = slOpt == "none" || slOpt == false ? "no" : "yes";
        var firstLineAdvice = this.databind.gdmtVM.diuretic.firstLineAdvice[slOpt];
        this.databind.diureticAdvice(this.databind.getCopyText(firstLineAdvice.advice()));
        this.databind.showDiureticExceptionBtn(slOpt == "no" ? true : false);
    };
    AdviceView.prototype.showAdditionalTherapyAdvice = function() {
        var that = this;
        var advices = [];
        var adviceList = that.adviceList;
        that.databind.additionalTherapy([]);
        that.databind.deviceTherapy([]);
        var additionalTherapy = [];
        for (var i = 0; i < adviceList.length; i++) {
            var advice = adviceList[i].advice;
            var adviceData = adviceList[i].adviceData;
            var copyText = adviceData.copyText;
            if (advice == "ICD" || advice == "CRT") {
                that.databind.deviceTherapy.push({
                    summary: this.databind.getCopyText(copyText),
                    showInstructionLink: true,
                    id: copyText,
                    adviceData: adviceData
                });
            } else {
                var id = adviceData.viewInst ? adviceData.viewInst : copyText;
                if (id) additionalTherapy.push({
                    summary: this.databind.getCopyText(copyText),
                    showInstructionLink: true,
                    id: id,
                    adviceData: adviceData
                });
            }
        }
        additionalTherapy = additionalTherapy.filter(function(item, index, inputArray) {
            var i = 0;
            for (i = 0; i < inputArray.length; i++) if (item.id === inputArray[i].id) break;
            return i === index;
        });
        additionalTherapy.sort(function(item1, item2) {
            return item1.adviceData.sortOrder - item2.adviceData.sortOrder;
        });
        if (additionalTherapy.length && additionalTherapy[0].adviceData.sortOrder === 0) {
            that.databind.advice_RAAS_none_additional(additionalTherapy[0]);
        } else {
            that.databind.advice_RAAS_none_additional(null);
        }
        additionalTherapy = additionalTherapy.filter(function(item1, item2) {
            return item1.adviceData.sortOrder != 0;
        });
        that.databind.additionalTherapy(additionalTherapy);
    };
    AdviceView.prototype.getValidAdviceList = function(callback) {
        var that = this;
        AppModel.getInstance().getHFLogicModel().getModIndList(that.databind, function(data) {
            var advicelist = data.advicelist;
            var validAdvices = [];
            for (var i = 0; i < advicelist.length; i++) {
                var flag = false;
                var ANDORFlag = "clean";
                var adviceId = advicelist[i].advice.id;
                var indiModiComArr = advicelist[i].advice.indi_modi_com;
                if (indiModiComArr) {
                    for (var j = 0; j < indiModiComArr.length; j++) {
                        var indisflag = false;
                        var modisflag = false;
                        var arr = indiModiComArr[j].split("_");
                        var condition = arr[0];
                        var indicationId = arr[1].replace(/ /g, "");
                        var indicationValue = arr[2] == "true" ? true : false;
                        var modifierId = arr[3].replace(/ /g, "");
                        var modifierValue = arr[4] == "true" ? true : false;
                        indisflag = indicationId ? isIndicationOptionSelected(indicationId) : true;
                        modisflag = modifierId ? isModifierOptionSelected(modifierId) : true;
                        if (condition == "OR") {
                            if (indisflag == indicationValue && modisflag == modifierValue) {
                                flag = true;
                                break;
                            }
                        }
                        if (condition == "AND") {
                            if (indisflag == indicationValue && modisflag == modifierValue) {
                                flag = true;
                            } else {
                                flag = false;
                                break;
                            }
                        }
                        if (condition == "ANDOR") {
                            ANDORFlag = "dirty";
                            if (flag == true && indisflag == indicationValue && modisflag == modifierValue) {
                                ANDORFlag = "pass";
                                break;
                            }
                        }
                    }
                } else {
                    var isNoneSelected = that.databind.gdmtVM.ACE_ARB.selectedViewOpt() === "Neither";
                    if (isNoneSelected) flag = isValidRASNonAdvise(advicelist[i]);
                }
                if (ANDORFlag == "dirty") {
                    flag = ANDORFlag == "pass" ? true : false;
                }
                if (flag) {
                    validAdvices.push({
                        id: advicelist[i].id,
                        advice: advicelist[i].advice.id,
                        adviceData: advicelist[i].advice
                    });
                }
            }
            var selectedRAS = that.databind.gdmtVM.ACE_ARB.selectedViewOpt();
            if (selectedRAS !== "ARNI") {
                validAdvices = validAdvices.filter(function(element) {
                    return element.id !== "RAS13";
                });
            }
            var aceiDrugOp = UtilFuns.findAndGetValue(that.databind.gdmtVM.ACE_ARB.options, "ACEI").selectedOpt();
            if (aceiDrugOp === "op0") {
                validAdvices = validAdvices.filter(function(element) {
                    return element.id !== "RAS14";
                });
            } else {
                validAdvices = validAdvices.filter(function(element) {
                    return element.id !== "RAS6";
                });
            }
            var ciForIvabridine = that.databind.patientVM.indication.CIforIvabridine;
            if (!ciForIvabridine.noSelected()) {
                validAdvices = validAdvices.filter(function(element) {
                    return element.id !== "Ivabridine" && element.id !== "IvabridineRegular";
                });
            }
            var rasQues = that.databind.contraindications.ACE_ARB.ques;
            var que2 = UtilFuns.findAndGetValue(rasQues, "que2");
            var que3 = UtilFuns.findAndGetValue(rasQues, "que3");
            var que4 = UtilFuns.findAndGetValue(rasQues, "que4");
            var que5 = UtilFuns.findAndGetValue(rasQues, "que5");
            var rasOptions = que2.options().concat(que3.options()).concat(que4.options()).concat(que5.options());
            var rasSelectedOptions = UtilFuns.getSelectedOptions(function() {
                return rasOptions;
            });
            if (!rasSelectedOptions.length) {
                var que1 = UtilFuns.findAndGetValue(rasQues, "que1");
                rasSelectedOptions = que1.options();
            }
            validAdvices = validAdvices.filter(function(item) {
                var flag = true;
                var rasCI = item.adviceData.rasCI;
                if (rasCI) {
                    if (rasCI.orSelect && rasCI.orSelect.length) {
                        flag = rasSelectedOptions.some(function(selectOpt) {
                            return rasCI.orSelect.some(function(op) {
                                return selectOpt.id() === op;
                            });
                        });
                    }
                    if (rasCI.orNotSelect && rasCI.orNotSelect.length && flag) {
                        flag = !rasSelectedOptions.some(function(selectOpt) {
                            return rasCI.orNotSelect.some(function(op) {
                                return selectOpt.id() === op;
                            });
                        });
                    }
                    if (rasCI.andNotSelect && rasCI.andNotSelect.length && flag) {
                        for (var i = 0; i < rasCI.andNotSelect.length; i++) {
                            var selectOpt = rasCI.andNotSelect[i];
                            if (rasSelectedOptions.some(function(op) {
                                return selectOpt === op.id();
                            })) {
                                flag = false;
                                break;
                            }
                        }
                    }
                    if (rasCI.andSelect && rasCI.andSelect.length && flag) {
                        for (var i = 0; i < rasCI.andSelect.length; i++) {
                            var selectOpt = rasCI.andSelect[i];
                            if (!rasSelectedOptions.some(function(op) {
                                return selectOpt === op.id();
                            })) {
                                flag = false;
                                break;
                            }
                        }
                    }
                }
                return flag;
            });
            console.log(rasSelectedOptions);
            callback(validAdvices);
            function isIndicationOptionSelected(optionId) {
                var f = that.databind.patientVM.indication.options().filter(function(currentValue, index, arr) {
                    if (currentValue.id() == optionId && currentValue.selectedOpt()) return true;
                    return false;
                });
                return f.length == 0 ? false : true;
            }
            function isModifierOptionSelected(optionId) {
                var f = that.databind.patientVM.modifier.options().filter(function(currentValue, index, arr) {
                    if (currentValue.id() == optionId && currentValue.selectedOpt()) return true;
                    return false;
                });
                return f.length == 0 ? false : true;
            }
            function isValidRASNonAdvise(advice) {
                if (advice.id === "RASNone_sp") return true;
                var rasci = advice.advice.RAS_CI;
                var ques = that.databind.contraindications.ACE_ARB.ques;
                var rasAttemptedQues = ques().filter(function(currentValue, index) {
                    var que = UtilFuns.findAndGetValue(ques, currentValue.id());
                    return index != 0 && UtilFuns.getSelectedOptions(que.options).length;
                });
                var isQue2Selected = !!rasAttemptedQues.filter(function(currentValue) {
                    return currentValue.id() === "que2";
                }).length;
                if (isQue2Selected && advice.id === "RAS9None") return true;
                if (!rasci) {
                    return !rasAttemptedQues.length;
                }
                var adviceTriggerQues = rasci.split("_");
                var matchedQues = adviceTriggerQues.filter(function(currentValue) {
                    return UtilFuns.findAndGetValue(function() {
                        return rasAttemptedQues;
                    }, currentValue);
                });
                return adviceTriggerQues.length === matchedQues.length && rasAttemptedQues.length === matchedQues.length;
            }
        });
    };
    AdviceView.prototype.displayAdvicePage = function() {
        var that = this;
        var slOpt = that.databind.gdmtVM.ACE_ARB.selectedOpt();
        if (!slOpt) {
            pager.navigate("#!/content/evaluate");
            return true;
        }
        pager.navigate("#!/content/advice/baselinetherapy");
        $(window).scrollTop(0);
        clearTimeout(window.cleartimeoutAdvicePage);
        window.cleartimeoutAdvicePage = setTimeout(function() {
            that.getValidAdviceList(function(data) {
                that.adviceList = data;
                that.getAdviceSummary();
            });
        }, 100);
    };
    AdviceView.prototype.getAdviceSummary = function() {
        var jsonString = ko.mapping.toJSON(this.databind.contraindications);
        AppModel.getInstance().setContraindicationsData(JSON.parse(jsonString));
        var that = this;
        this.showAceArbAdvice();
        this.showBetaBlockerAdvice();
        this.showDiureticAdvice();
        this.showAdditionalTherapyAdvice();
        this.adviceAnalytics();
        this.showContraindications();
    };
    AdviceView.prototype.showContraindications = function() {
        var that = this;
        var contraindicationsJson = JSON.parse(ko.mapping.toJSON(this.databind.contraindications));
        AppModel.getInstance().setContraindicationsData(contraindicationsJson);
        var data = {
            ques: [],
            description: "",
            show: false
        };
        for (var i = 0; i < contraindicationsJson.ACE_ARB.ques.length; i++) {
            if (contraindicationsJson.ACE_ARB.ques[i].id === "que1") {
                continue;
            }
            var obj = {
                que: "",
                options: [],
                copyTexts: []
            };
            obj.que = that.databind.getCopyText(contraindicationsJson.ACE_ARB.ques[i].copytext);
            var options = contraindicationsJson.ACE_ARB.ques[i].options;
            for (var j = 0; j < options.length; j++) {
                if (options[j].isSelected) {
                    obj.options.push(that.databind.getCopyText(options[j].copytext));
                    obj.copyTexts.push(options[j].copytext);
                }
            }
            if (obj.options.length != 0) {
                data.ques.push(obj);
                data.show = true;
            }
        }
        data.description = contraindicationsJson.ACE_ARB.description;
        if (data.description) data.show = true;
        that.databind.advice_RAAS_contraindication(data);
        var data = {
            ques: [],
            description: "",
            show: false
        };
        for (var i = 0; i < contraindicationsJson.beta_blocker.ques.length; i++) {
            var obj = {
                que: "",
                options: []
            };
            var options = contraindicationsJson.beta_blocker.ques[i].options;
            for (var j = 0; j < options.length; j++) {
                if (options[j].id == "que_con_bb_op1") continue;
                if (options[j].isSelected) {
                    obj.options.push(that.databind.getCopyText(options[j].copytext));
                }
            }
            if (obj.options.length != 0) {
                data.ques.push(obj);
                data.show = true;
            }
        }
        data.description = contraindicationsJson.beta_blocker.description;
        if (data.description) data.show = true;
        that.databind.advice_BB_contraindication(data);
        var data = {
            ques: [],
            description: "",
            show: false
        };
        for (var i = 0; i < contraindicationsJson.diuretic.ques.length; i++) {
            var obj = {
                que: "",
                options: []
            };
            var options = contraindicationsJson.diuretic.ques[i].options;
            for (var j = 0; j < options.length; j++) {
                if (options[j].id == "que_con_du_op1") continue;
                if (options[j].isSelected) {
                    obj.options.push(that.databind.getCopyText(options[j].copytext));
                }
            }
            if (obj.options.length != 0) {
                data.ques.push(obj);
                data.show = true;
            }
        }
        data.description = contraindicationsJson.diuretic.description;
        if (data.description) data.show = true;
        that.databind.advice_diuretic_contraindication(data);
    };
    AdviceView.prototype.adviceAnalytics = function() {};
    w.AdviceView = AdviceView;
})(window, window.UtilityFunctions);

(function(w, UtilFuns, AppModel, ko, $) {
    var ViewModel = function() {};
    ViewModel.isNoneGDMTSelected = true;
    ViewModel.prototype.databind = {};
    ViewModel.prototype._contraindicationsTemp;
    ViewModel.prototype._contraindicationsData;
    ViewModel.prototype._gdmtData;
    ViewModel.prototype._patientData;
    ViewModel.prototype._adviceView = new w.AdviceView();
    ViewModel.prototype._drugsView = new w.DrugsView();
    ViewModel.prototype.disclaimerInit = function() {
        var that = this;
        var disclaimerStatus = localStorage.getItem("DISCLAIMER_STATUS");
        if (!disclaimerStatus) {
            that.databind.showDisclaimer(true);
        }
        if (disclaimerStatus == "show") {
            that.databind.showDisclaimer(true);
        }
        if (disclaimerStatus == "hide") {
            that.databind.showDisclaimer(false);
        }
    };
    ViewModel.prototype.init = function() {
        var that = this;
        var lastScrollPos = 0;
        $("[data-reveal]").on("open.zf.reveal", function() {
            lastScrollPos = $(window).scrollTop();
        });
        $("[data-reveal]").on("closed.zf.reveal", function() {
            var interval = setInterval(function() {
                $(window).scrollTop(lastScrollPos);
            }, 0);
            setTimeout(function() {
                clearInterval(interval);
            }, 800);
        });
        $(".contraindicated-modal").on("closed.zf.reveal", function(e) {
            var contraindicationsJson = JSON.parse(ko.mapping.toJSON(that.databind.contraindications));
            contraindicationsJson.ACE_ARB = that._contraindicationsData.ACE_ARB;
            contraindicationsJson.beta_blocker = that._contraindicationsData.beta_blocker;
            contraindicationsJson.diuretic = that._contraindicationsData.diuretic;
            ko.mapping.fromJS(contraindicationsJson, that.databind.contraindications);
        });
        $(".contraindications_textarea").focus(function(e) {
            $(".contraindicated-modal").each(function(index, element) {
                setTimeout(function() {
                    $(element).animate({
                        scrollTop: $(document).height()
                    }, 500);
                }, 300);
            });
        });
        $(".contraindications_textarea").on("input propertychange", function(e) {
            if (e.currentTarget.getAttribute("id") == "id_contraindications_RAAS_textarea") {
                that.databind.contraindications.ACE_ARB.description(this.value);
            }
            if (e.currentTarget.getAttribute("id") == "id_contraindication_beta_blocker_textarea") {
                that.databind.contraindications.beta_blocker.description(this.value);
            }
            if (e.currentTarget.getAttribute("id") == "id_contraindication_diuretic_textarea") {
                that.databind.contraindications.diuretic.description(this.value);
            }
            var textValue = $(e.currentTarget).val();
            if (textValue.length > 150) {
                $(e.currentTarget).val(textValue.substr(0, 150));
            }
        });
        $(document).on("touchend", ".contraindicationSaveButton", function(e) {
            document.activeElement.blur();
            that.databind.onContraindicationSaveClick({
                type: $(this).attr("ctype")
            });
            setTimeout(function() {
                $(".reveal").foundation("close");
            }, 100);
        });
        this.databind.onContraindicationSaveClick = function(data) {
            var contraindicationsJson = JSON.parse(ko.mapping.toJSON(that.databind.contraindications));
            if (data.type == "CONTRAINDICATION_RAAS") {
                that._contraindicationsData.ACE_ARB = contraindicationsJson.ACE_ARB;
            }
            if (data.type == "CONTRAINDICATION_BB") {
                that._contraindicationsData.beta_blocker = contraindicationsJson.beta_blocker;
            }
            if (data.type == "CONTRAINDICATION_Diuretic") {
                that._contraindicationsData.diuretic = contraindicationsJson.diuretic;
            }
            that.populateIndicationAndModifier();
        };
        this.databind.getTooltipText = function(id, element) {
            return that.databind.getCopyText(id);
        };
        this.databind.getCopyText = function(id) {
            return AppModel.getInstance().getCopytext(id);
        };
        this.databind.onClick = function(data, event) {
            if (!event || event.type == "load") return;
            if (data.type == "OPEN_CONTRAINDICATION_MODAL") {
                var contraindicationsJson = JSON.parse(ko.mapping.toJSON(that.databind.contraindications));
                contraindicationsJson.beta_blocker = that._contraindicationsData.beta_blocker;
                contraindicationsJson.ACE_ARB = that._contraindicationsData.ACE_ARB;
                contraindicationsJson.diuretic = that._contraindicationsData.diuretic;
                contraindicationsJson.ACE_ARB.hide = that.databind.contraindications.ACE_ARB.hide();
                contraindicationsJson.beta_blocker.hide = that.databind.contraindications.beta_blocker.hide();
                contraindicationsJson.diuretic.hide = that.databind.contraindications.diuretic.hide();
                ko.mapping.fromJS(contraindicationsJson, that.databind.contraindications);
                $("#" + data.id).foundation("open");
            } else if (data.type == "OPTION_CLICK_CONTRAINDICATION_MODAL") {
                that.onContraindicationOptionClick(data);
            } else if (data.type == "DISCLAIMER_CLICK") {
                localStorage.setItem("DISCLAIMER_STATUS", "hide");
                that.databind.showDisclaimer(false);
            } else if (data.type == "EVALUATE_CONTINUE_CLICK") {
                that.databind.getAdviceButtonState("active");
                that.databind.showContinueBtn(false);
                if (that.databind.indicationlist().length == 0 && that.databind.indicationlist().length == 0) {
                    that.databind.showFLTherapyBtn(true);
                } else {
                    that.databind.showPatientScenario(true);
                }
                if (!window.appResetting) $("html,body").stop().animate({
                    scrollTop: $("#idFurtherIndications").offset().top
                }, 1e3);
            } else if (data.type == "ACE_ARB_BG") {
                that.onButtonGroupClick(data);
            } else if (data.type == "ACE_ARB_NEITHER_QUESTIONS") {
                that.onACEARBQuestionClick(data);
                that._adviceView.resetExceptionData();
            } else if (data.type == "SELECT_BB_QUESTIONS") {
                that.onBBQuestionClick(data);
            } else if (data.type == "SELECT_DIURETIC_QUESTIONS") {
                that.onDIURETICQuestionClick(data);
                that._adviceView.resetExceptionData();
            } else if (data.type == "SELECT_MODIFIER_QUESTIONS") {
                that.onModifierQuestionClick(data);
            } else if (data.type == "SELECT_INDICATION_QUESTIONS") {
                that.onIndicationQuestionClick(data);
            } else if (data.type == "RESET_BUTTON") {
                window.appResetting = true;
                that.databind.getAdviceButtonState("disable_clickable");
                AppModel.getInstance().resetApp();
                ko.mapping.fromJS(AppModel.getInstance().getGDMTData(), that.databind.gdmtVM);
                ko.mapping.fromJS(AppModel.getInstance().getPatientData(), that.databind.patientVM);
                ko.mapping.fromJS(AppModel.getInstance().getExceptionData(), that._adviceView.exceptionData);
                ko.mapping.fromJS(AppModel.getInstance().getContraindicationsData(), that.databind.contraindications);
                that._contraindicationsData = JSON.parse(JSON.stringify(that._contraindicationsTemp));
                that.databind.acearbAdvice("");
                that.databind.betaBlockerAdvice("");
                that.databind.diureticAdvice("");
                that.databind.showAceArbExceptionBtn(false);
                that.databind.showBBExceptionBtn(false);
                that.databind.showDiureticExceptionBtn(false);
                that.databind.additionalTherapy([]);
                that.databind.deviceTherapy([]);
                window.lastRAASButtonClicked = "";
                that.databind.advice_RAAS_none_additional(null);
                window.appResetting = false;
                $("html,body").scrollTop(0);
            } else if (data.type == "EVALUATE_WARNING_HANDLER") {
                that.onDisableAdviceClick(data);
            } else if (data.type == "GET_ADVICE_SUMMARY") {
                that._adviceView.displayAdvicePage();
            } else if (data.type == "SCROLL_DOWN") {
                if (!window.appResetting) $("html,body").stop().animate({
                    scrollTop: $("#" + data.scrollTo).offset().top
                }, 1e3);
            } else if (data.type === "AD_MD_CLICK") {
                that.onAdditionalMedicationsClick(data);
            }
        };
        this.databind.onSomeEvent = function(data) {
            return that.onSomeEvent(data);
        };
        this.databind.staticPageEnabled = ko.observable(false);
        this.databind.isIosPrint = ko.observable(false);
        this.databind.acearbText = ko.observable();
        this.databind.betaBlockerText = ko.observable();
        this.databind.diureticText = ko.observable();
        this.databind.additionalTherapyText = ko.observableArray();
        this.databind.deviceTherapyText = ko.observableArray();
        this.databind.acearbException = ko.observable();
        this.databind.betablockerException = ko.observable();
        this.databind.diureticException = ko.observable();
        this.databind.showContinueBtn = ko.observable(true);
        this.databind.enableContinueBtn = ko.observable(false);
        this.databind.showFLTherapyBtn = ko.observable(false);
        this.databind.showPatientScenario = ko.observable(false);
        this.databind.getAdviceButtonState = ko.observable("disable_clickable");
        this.databind.indicationlist = ko.observable([]);
        this.databind.modifierlist = ko.observable([]);
        this.databind.isRequiredQuestion = ko.observable(true);
        this.databind.showDisclaimer = ko.observable(false);
        var initFlagObj = {};
        initFlagObj.initACE = true;
        this.databind.acearbSelect = ko.observable();
        this.databind.acearbSelect.subscribe(function(latest) {
            if (initFlagObj.initACE) {
                initFlagObj.initACE = false;
                return;
            }
            that.onACEOptionSelect(latest);
        }, this);
        initFlagObj.initBB = true;
        this.databind.bbSelect = ko.observable();
        this.databind.bbSelect.subscribe(function(newValue) {
            if (initFlagObj.initBB) {
                initFlagObj.initBB = false;
                return;
            }
            that.onBBOptionSelect(newValue);
            if (newValue != "bb_op0") {
                if (!window.appResetting) $("html,body").stop().animate({
                    scrollTop: $("#divBBQuestions").offset().top
                }, 1e3);
            } else {
                if (!window.appResetting) $("html,body").stop().animate({
                    scrollTop: $("#additionalMedsScroll").offset().top
                }, 1e3);
            }
        }, this);
        initFlagObj.initNYHA = true;
        this.databind.NYHASelect = ko.observable();
        this.databind.NYHASelect.subscribe(function(newValue) {
            if (initFlagObj.initNYHA) {
                initFlagObj.initNYHA = false;
                return;
            }
            that.onNYHAOptionSelect(newValue);
        }, this);
        initFlagObj.initLVEF = true;
        this.databind.LVEFSelect = ko.observable();
        this.databind.LVEFSelect.subscribe(function(newValue) {
            if (initFlagObj.initLVEF) {
                initFlagObj.initLVEF = false;
                return;
            }
            that.onLVEFOptionSelect(newValue);
        }, this);
        this.databind.criticalNotification = {
            Title: ko.observable(""),
            Text: ko.observable(""),
            DisplayAppStoreUrl: ko.observable(""),
            appStoreUri: ko.observable(""),
            hide: ko.observable(true)
        };
        this.databind.nonCriticalNotification = ko.observable([]);
        this.notificationInit();
        that.disclaimerInit();
    };
    ViewModel.prototype.notificationInit = function() {
        var that = this;
        window.notification.callNotification(function() {
            that.databind.nonCriticalNotification(window.notification.getNonCriticalByOsType());
            var criticalNotification = window.notification.getCriticalByOsType();
            if (criticalNotification.length > 0) {
                that.databind.criticalNotification.Title(criticalNotification[0].Title);
                that.databind.criticalNotification.Text(criticalNotification[0].Text);
                that.databind.criticalNotification.DisplayAppStoreUrl(criticalNotification[0].DisplayAppStoreUrl);
                that.databind.criticalNotification.appStoreUri(window.notification.appStoreUri);
                that.databind.criticalNotification.hide(false);
                $(".critical-screen .page").height($(window).height());
                $(window).scrollTop(0);
                $("body").css("overflow", "hidden");
                window.setScreenSpacerHeight();
            } else {
                that.databind.criticalNotification.hide(true);
            }
        });
    };
    ViewModel.prototype.onContraindicationOptionClick = function(data) {
        var that = this;
        if (data.id == "RAAS") {
            if (data.op_id == "que1_op1") {
                for (var i = 0; i < that.databind.contraindications.ACE_ARB.ques().length; i++) {
                    var options = that.databind.contraindications.ACE_ARB.ques()[i].options();
                    for (var j = 0; j < options.length; j++) {
                        if (options[j].id() != "que1_op1") {
                            options[j].isSelected(false);
                        }
                    }
                }
            } else {
                var queArr = that.databind.contraindications.ACE_ARB.ques().filter(function(currentValue, index, arr) {
                    return currentValue.id() == "que1";
                });
                var opArr = queArr[0].options().filter(function(currentValue, index, arr) {
                    return currentValue.id() == "que1_op1";
                });
                opArr[0].isSelected(false);
                var ques = that.databind.contraindications.ACE_ARB.ques;
                var que = UtilFuns.findAndGetValue(ques, data.que_id);
                var option = UtilFuns.findAndGetValue(que.options, data.op_id);
                if (option.dependent) {
                    var que = UtilFuns.findAndGetValue(ques, option.dependent.queId());
                    var depOption = UtilFuns.findAndGetValue(que.options, option.dependent.optionId());
                    var autoSelect = depOption.dependent.autoSelect();
                    if (autoSelect) {
                        depOption.isSelected(option.isSelected());
                    }
                }
            }
        }
        if (data.id == "BB") {
            if (data.op_id == "que_con_bb_op1") {
                for (var i = 0; i < that.databind.contraindications.beta_blocker.ques().length; i++) {
                    var options = that.databind.contraindications.beta_blocker.ques()[i].options();
                    for (var j = 0; j < options.length; j++) {
                        if (options[j].id() != "que_con_bb_op1") {
                            options[j].isSelected(false);
                        }
                    }
                }
            } else {
                var queArr = that.databind.contraindications.beta_blocker.ques().filter(function(currentValue, index, arr) {
                    return currentValue.id() == "que_con_bb";
                });
                var opArr = queArr[0].options().filter(function(currentValue, index, arr) {
                    return currentValue.id() == "que_con_bb_op1";
                });
                opArr[0].isSelected(false);
            }
        }
        if (data.id == "Diuretic") {
            if (data.op_id == "que_con_du_op1") {
                for (var i = 0; i < that.databind.contraindications.diuretic.ques().length; i++) {
                    var options = that.databind.contraindications.diuretic.ques()[i].options();
                    for (var j = 0; j < options.length; j++) {
                        if (options[j].id() != "que_con_du_op1") {
                            options[j].isSelected(false);
                        }
                    }
                }
            } else {
                var queArr = that.databind.contraindications.diuretic.ques().filter(function(currentValue, index, arr) {
                    return currentValue.id() == "que_con_diuretic";
                });
                var opArr = queArr[0].options().filter(function(currentValue, index, arr) {
                    return currentValue.id() == "que_con_du_op1";
                });
                opArr[0].isSelected(false);
            }
        }
    };
    ViewModel.prototype.loadStaticAdvice = function(p) {
        var encodedData = p.replace("data=", "");
        var decodedData = window.atob(encodedData);
        var splitData = decodedData.split("#");
        var acearbId = splitData[0];
        var showAceContra = acearbId !== "cp_RASNone_4" && acearbId !== "cp_RASNone_6" && acearbId !== "cp_RASNone_5";
        var bbId = splitData[1];
        var diureticId = splitData[2];
        var advice_RAAS_none_additional = splitData[7];
        if (advice_RAAS_none_additional) {
            this.databind.advice_RAAS_none_additional({
                summary: this.databind.getCopyText(advice_RAAS_none_additional)
            });
        }
        this.databind.staticPageEnabled(true);
        this.databind.acearbText(this.databind.getCopyText(acearbId));
        this.databind.showRASContraindicationHeader(showAceContra);
        this.databind.betaBlockerText(this.databind.getCopyText(bbId));
        this.databind.diureticText(this.databind.getCopyText(diureticId));
        if (splitData[3]) {
            var additionalAdviceId = JSON.parse(splitData[3]);
            for (var i = 0; i < additionalAdviceId.length; i++) {
                if (additionalAdviceId[i].id == "cp_adv_at_icd" || additionalAdviceId[i].id == "cp_adv_at_crt") {
                    this.databind.deviceTherapyText.push({
                        summary: this.databind.getCopyText(additionalAdviceId[i].id)
                    });
                } else {
                    this.databind.additionalTherapyText.push({
                        summary: this.databind.getCopyText(additionalAdviceId[i].id)
                    });
                }
            }
        }
        var acearbException = JSON.parse(splitData[4]);
        this.databind.acearbException(acearbException);
        var bbException = JSON.parse(splitData[5]);
        this.databind.betablockerException(bbException);
        var diureticException = JSON.parse(splitData[6]);
        this.databind.diureticException(diureticException);
        this.databind.onStaticPagePrint = function(event) {
            if (!event || event.type == "load") return;
            window.print();
        };
        var printId = parseInt(splitData[8]);
        this.databind.isIosPrint(!!printId);
        if (!!printId) {
            var savedId = parseInt(localStorage.getItem("printId"));
            if (!savedId || printId > savedId) {
                localStorage.setItem("printId", printId);
                var timer = setInterval(function() {
                    if (document.getElementById("spinner").style.display === "none") {
                        setTimeout(function() {
                            try {
                                window.print();
                            } catch (e) {
                                console.log(e);
                            }
                        }, 500);
                        clearInterval(timer);
                    }
                }, 500);
            } else {}
        }
    };
    ViewModel.prototype.initGDMT = function(data) {
        this._gdmtData = data;
    };
    ViewModel.prototype.initPatient = function(data) {
        this._patientData = data;
    };
    ViewModel.prototype.initKo = function() {
        if (!this._gdmtData) {
            w.logError("ViewModel : _gdmtData should not be null");
            return;
        }
        var gdmtVM = ko.mapping.fromJS(this._gdmtData);
        this.databind.gdmtVM = gdmtVM;
        var patientVM = ko.mapping.fromJS(this._patientData);
        this.databind.patientVM = patientVM;
        this._contraindicationsTemp = JSON.parse(JSON.stringify(AppModel.getInstance().getContraindicationsData()));
        this._contraindicationsData = JSON.parse(JSON.stringify(this._contraindicationsTemp));
        this.databind.contraindications = ko.mapping.fromJS(AppModel.getInstance().getContraindicationsData());
        this._adviceView.init(this.databind);
        this._drugsView.init(this.databind);
    };
    ViewModel.prototype.onPagerAfterShow = function(p) {
        $(".reveal").foundation("close");
        var cId = p.page.currentId;
        if (cId == "advice" || cId == "evaluate" || cId == "news") {
            this.notificationInit();
        }
        var hash = window.location.hash;
        if (this.databind.getAdviceButtonState() != "active") {
            if (hash == "#!/content/evaluate") {
                this.databind.getAdviceButtonState("disable_clickable");
            } else {
                this.databind.getAdviceButtonState("disable");
            }
        }
        if (this._drugsView) this._drugsView.onPagerAfterShow(p);
    };
    ViewModel.prototype.onDisableAdviceClick = function(data) {
        this.showWarningUI();
        if (!window.appResetting) $("html,body").stop().animate({
            scrollTop: $("#divPatientScenario").offset().top
        }, 1e3);
    };
    ViewModel.prototype.initChangeEvent = function(data) {
        window.addEventListener("hashchange", function(event) {
            var hash = window.location.hash;
            if (hash == "#!/content/advice/baselinetherapy") {
                ViewModel.prototype._adviceView.displayAdvicePage();
            }
        });
    };
    ViewModel.prototype.checkEvaluateScreenValid = function() {
        var invalidArr = [];
        var that = this;
        var testflag = false;
        var patientFlagACEARB = false;
        var selectedACEARB = that.databind.gdmtVM.ACE_ARB.selectedOpt();
        if (selectedACEARB == "") {
            invalidArr.push(that.databind.gdmtVM.ACE_ARB.warning);
            patientFlagACEARB = false;
        } else {
            var slOpt = selectedACEARB;
            var arr = that.databind.gdmtVM.ACE_ARB.options();
            arr = arr.filter(function(currentValue, index, arr) {
                return currentValue.id() == slOpt;
            });
            var ques = arr[0].que();
            if (slOpt == "Neither") {
                testflag = true;
                for (var i = 0; i < ques.length; i++) {
                    if (ques[i].selectedOpt() == "none") {
                        testflag = false;
                    }
                    if (ques[i].selectedOpt() == false && testflag == true) {
                        testflag = false;
                    }
                }
            } else {
                testflag = true;
                for (var i = 0; i < ques.length; i++) {
                    if (ques[i].selectedOpt() == "none") {
                        invalidArr.push(ques[i].warning);
                        testflag = false;
                    }
                }
            }
            patientFlagACEARB = testflag;
        }
        var patientFlagBB = false;
        var selectedBB = that.databind.gdmtVM.beta_blocker.drugs.selectedOpt();
        if (selectedBB == "bb_opsl") {
            invalidArr.push(that.databind.gdmtVM.beta_blocker.drugs.warning);
            patientFlagBB = false;
        } else if (selectedBB == "bb_op0") {
            patientFlagBB = false;
        } else {
            var ques = that.databind.gdmtVM.beta_blocker.ques();
            testflag = true;
            for (var i = 0; i < ques.length; i++) {
                if (ques[i].selectedOpt() == "none") {
                    invalidArr.push(ques[i].warning);
                    testflag = false;
                }
            }
            patientFlagBB = testflag;
        }
        var patientFlagDU = false;
        var selectedDu = that.databind.gdmtVM.diuretic.ques()[0].selectedOpt();
        if (selectedDu == "none") {
            invalidArr.push(that.databind.gdmtVM.diuretic.ques()[0].warning);
            patientFlagDU = false;
        } else {
            patientFlagDU = selectedDu ? true : false;
        }
        var hfAssessmentFlag = false;
        var NYHA = that.databind.patientVM.NYHA.selectedOpt();
        var LVEF = that.databind.patientVM.LVEF.selectedOpt();
        if (NYHA == "NYHASL" || LVEF == "LSL") {
            if (NYHA == "NYHASL") invalidArr.push(that.databind.patientVM.NYHA.warning);
            if (LVEF == "LSL") invalidArr.push(that.databind.patientVM.LVEF.warning);
            hfAssessmentFlag = true;
        }
        ViewModel.isNoneGDMTSelected = false;
        if (!patientFlagACEARB && !patientFlagBB && !patientFlagDU) {
            ViewModel.isNoneGDMTSelected = true;
        }
        var noGDMTSelected = true;
        if (patientFlagACEARB || patientFlagBB || patientFlagDU || hfAssessmentFlag) {
            noGDMTSelected = false;
        } else {}
        var options = UtilFuns.getSelectedOptions(that.databind.patientVM.additionalMedications.options);
        if (!options.length) invalidArr.push(that.databind.patientVM.additionalMedications.warning);
        if (invalidArr.length != 0) {
            this.showDisableContinueButton();
        } else {
            this.databind.getAdviceButtonState("disable_clickable");
            if (NYHA === "NYHAI" || NYHA === "NYHAUN") {
                this.databind.getAdviceButtonState("active");
                this.databind.showFLTherapyBtn(true);
                this.databind.showContinueBtn(false);
            } else {
                if (this.databind.showFLTherapyBtn()) {
                    this.databind.showContinueBtn(true);
                }
                this.databind.showFLTherapyBtn(false);
            }
            this.databind.enableContinueBtn(true);
        }
        if (invalidArr.length != 0) {}
        return invalidArr;
    };
    ViewModel.prototype.showWarningUI = function() {
        var that = this;
        var invalidArr = this.checkEvaluateScreenValid();
        for (var i = 0; i < invalidArr.length; i++) {
            invalidArr[i](true);
        }
    };
    ViewModel.prototype.onACEOptionSelect = function(data) {
        var that = this;
        var slOpt = that.databind.gdmtVM.ACE_ARB.selectedOpt();
        var arr = that.databind.gdmtVM.ACE_ARB.options();
        arr = arr.filter(function(currentValue, index, arr) {
            return currentValue.id() == slOpt;
        });
        if (arr.length > 0) arr[0].selectedOpt(data);
        var jsonString = ko.mapping.toJSON(this.databind.gdmtVM);
        AppModel.getInstance().setGDMTData(JSON.parse(jsonString));
    };
    ViewModel.prototype.onBBOptionSelect = function(data) {
        this.databind.contraindications.beta_blocker.hide(true);
        var that = this;
        var obj = that.databind.gdmtVM.beta_blocker.drugs;
        if (obj.selectedOpt() == "bb_op0" || obj.selectedOpt() == "bb_opsl") {
            var arr = this.databind.gdmtVM.beta_blocker.ques();
            for (var i = 0; i < arr.length; i++) {
                arr[i].selectedOpt("none");
                arr[i].warning(false);
            }
        }
        obj.selectedOpt(data);
        var contraindicationsJson = JSON.parse(ko.mapping.toJSON(this.databind.contraindications));
        this._contraindicationsData.beta_blocker = JSON.parse(JSON.stringify(this._contraindicationsTemp)).beta_blocker;
        contraindicationsJson.beta_blocker = JSON.parse(JSON.stringify(this._contraindicationsTemp)).beta_blocker;
        ko.mapping.fromJS(contraindicationsJson, this.databind.contraindications);
        if (obj.selectedOpt() == "bb_op0") {
            this.databind.contraindications.beta_blocker.hide(false);
            $("#id_contraindication_beta_blocker").removeClass("fadeIn animated").addClass("fadeIn animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function() {
                $(this).removeClass("fadeIn animated");
            });
        }
        if (obj.selectedOpt() == "bb_op1") that.databind.gdmtVM.beta_blocker.ques()[0].copytext("cp_bb_que_bisoprolol");
        if (obj.selectedOpt() == "bb_op2") that.databind.gdmtVM.beta_blocker.ques()[0].copytext("cp_bb_que_carvedilol");
        if (obj.selectedOpt() == "bb_op3") that.databind.gdmtVM.beta_blocker.ques()[0].copytext("cp_bb_que_carevedilolCR");
        if (obj.selectedOpt() == "bb_op4") that.databind.gdmtVM.beta_blocker.ques()[0].copytext("cp_bb_que_metoprolol");
        if (obj.selectedOpt() != "bb_opsl") {
            that.databind.gdmtVM.beta_blocker.drugs.warning(false);
        }
        var jsonString = ko.mapping.toJSON(this.databind.gdmtVM);
        AppModel.getInstance().setGDMTData(JSON.parse(jsonString));
        var validArr = that.checkEvaluateScreenValid();
        if (validArr.length == 0) {
            that.populateIndicationAndModifier();
        }
        that._adviceView.resetExceptionData();
    };
    ViewModel.prototype.onNYHAOptionSelect = function(data) {
        var that = this;
        var arr = that.databind.patientVM.NYHA;
        arr.selectedOpt(data);
        var jsonString = ko.mapping.toJSON(this.databind.patientVM);
        AppModel.getInstance().setPatientData(JSON.parse(jsonString));
        var NYHA = that.databind.patientVM.NYHA.selectedOpt();
        var LVEF = that.databind.patientVM.LVEF.selectedOpt();
        if (NYHA != "NYHASL" && LVEF != "LSL") {
            that.checkEvaluateScreenValid();
            that.populateIndicationAndModifier();
            if (!window.appResetting) $("html,body").stop().animate({
                scrollTop: $("#idBackgroundMedications").offset().top
            }, 1e3);
        } else {
            this.databind.indicationlist([]);
            this.databind.modifierlist([]);
            this.showDisableContinueButton();
        }
        if (NYHA != "NYHASL") {
            that.databind.patientVM.NYHA.warning(false);
        }
    };
    ViewModel.prototype.onLVEFOptionSelect = function(data) {
        var that = this;
        var arr = that.databind.patientVM.LVEF;
        arr.selectedOpt(data);
        var jsonString = ko.mapping.toJSON(this.databind.patientVM);
        AppModel.getInstance().setPatientData(JSON.parse(jsonString));
        var NYHA = that.databind.patientVM.NYHA.selectedOpt();
        var LVEF = that.databind.patientVM.LVEF.selectedOpt();
        if (NYHA != "NYHASL" && LVEF != "LSL") {
            that.checkEvaluateScreenValid();
            that.populateIndicationAndModifier();
            if (!window.appResetting) $("html,body").stop().animate({
                scrollTop: $("#idBackgroundMedications").offset().top
            }, 1e3);
        } else {
            this.databind.indicationlist([]);
            this.databind.modifierlist([]);
            this.showDisableContinueButton();
        }
        if (LVEF != "LSL") {
            that.databind.patientVM.LVEF.warning(false);
        }
    };
    ViewModel.prototype.showDisableContinueButton = function(data) {
        this.databind.showContinueBtn(true);
        this.databind.enableContinueBtn(false);
        this.databind.showFLTherapyBtn(false);
        this.databind.showPatientScenario(false);
        this.databind.getAdviceButtonState("disable_clickable");
    };
    ViewModel.prototype.showFirstlineButton = function(data) {
        this.databind.showContinueBtn(false);
        this.databind.enableContinueBtn(false);
        this.databind.showFLTherapyBtn(true);
        this.databind.showPatientScenario(false);
        this.databind.getAdviceButtonState("active");
    };
    ViewModel.prototype.onButtonGroupClick = function(data) {
        if (window.lastRAASButtonClicked) {
            if (window.lastRAASButtonClicked == data.value) {
                return;
            }
        }
        window.lastRAASButtonClicked = data.value;
        var contraindicationsJson = JSON.parse(ko.mapping.toJSON(this.databind.contraindications));
        this._contraindicationsData.ACE_ARB = JSON.parse(JSON.stringify(this._contraindicationsTemp)).ACE_ARB;
        contraindicationsJson.ACE_ARB = JSON.parse(JSON.stringify(this._contraindicationsTemp)).ACE_ARB;
        ko.mapping.fromJS(contraindicationsJson, this.databind.contraindications);
        this.databind.contraindications.ACE_ARB.hide(true);
        this.databind.gdmtVM.ACE_ARB.warning(false);
        var arr = this.databind.gdmtVM.ACE_ARB.options();
        for (var i = 0; i < arr.length; i++) {
            var questions = arr[i].que;
            for (var j = 0; j < questions().length; j++) {
                questions()[j].selectedOpt("none");
                questions()[j].warning(false);
            }
            arr[i].selectedOpt("op0");
        }
        this.databind.gdmtVM.ACE_ARB.selectedOpt(data.alias);
        this.databind.gdmtVM.ACE_ARB.selectedViewOpt(data.value);
        var jsonString = ko.mapping.toJSON(this.databind.gdmtVM);
        AppModel.getInstance().setGDMTData(JSON.parse(jsonString));
        $("#divCards").removeClass("fadeIn animated").addClass("fadeIn animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function() {
            $(this).removeClass("fadeIn animated");
        });
        $(".tooltip").each(function() {
            var id = $("#id_RAAS_tooltip").attr("aria-describedby");
            if (id != $(this).attr("id")) {
                $(this).remove();
            }
        });
        setTimeout(function() {
            if ($(".mytooltip").length > 0) {
                $(".mytooltip").foundation();
                $(".mytooltip").foundation("hide");
            }
        }, 200);
        if (data.alias == "Neither") {
            if (!window.appResetting) $("html,body").stop().animate({
                scrollTop: $("#divCards").offset().top
            }, 1e3);
            if (data.value == "Neither") {
                this.databind.contraindications.ACE_ARB.hide(false);
                $("#id_contraindication_RAAS").removeClass("fadeIn animated").addClass("fadeIn animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function() {
                    $(this).removeClass("fadeIn animated");
                });
                this.onACEARBQuestionClick({
                    checked: false,
                    type: "ACE_ARB_NEITHER_QUESTIONS",
                    value: "que1"
                });
            }
            if (data.value == "ARNI") {
                this.onACEARBQuestionClick({
                    checked: true,
                    type: "ACE_ARB_NEITHER_QUESTIONS",
                    value: "que1"
                });
            }
            this._adviceView.resetExceptionData();
        } else {
            var validArr = this.checkEvaluateScreenValid();
            if (validArr.length == 0) {
                this.populateIndicationAndModifier();
            }
        }
    };
    ViewModel.prototype.onACEARBQuestionClick = function(data) {
        var that = this;
        var slOpt = that.databind.gdmtVM.ACE_ARB.selectedOpt();
        var arr = that.databind.gdmtVM.ACE_ARB.options();
        arr = arr.filter(function(currentValue, index, arr) {
            return currentValue.id() == slOpt;
        });
        var ques = arr[0].que();
        arr = ques.filter(function(currentValue, index, arr) {
            return currentValue.id() == data.value;
        });
        if (arr[0].selectedOpt() == data.checked) {
            return;
        }
        arr[0].selectedOpt(data.checked);
        arr[0].warning(false);
        var jsonString = ko.mapping.toJSON(that.databind.gdmtVM);
        AppModel.getInstance().setGDMTData(JSON.parse(jsonString));
        var validArr = that.checkEvaluateScreenValid();
        if (validArr.length == 0) {
            that.populateIndicationAndModifier();
        }
    };
    ViewModel.prototype.onBBQuestionClick = function(data) {
        var that = this;
        var arr = that.databind.gdmtVM.beta_blocker.ques();
        arr = arr.filter(function(currentValue, index, arr) {
            currentValue.warning(false);
            return currentValue.id() == data.value;
        });
        if (arr[0].selectedOpt() == data.checked) {
            return;
        }
        arr[0].selectedOpt(data.checked);
        var jsonString = ko.mapping.toJSON(this.databind.gdmtVM);
        AppModel.getInstance().setGDMTData(JSON.parse(jsonString));
        var validArr = that.checkEvaluateScreenValid();
        if (validArr.length == 0) {
            that.populateIndicationAndModifier();
        }
        if (!window.appResetting) $("html,body").stop().animate({
            scrollTop: $("#additionalMedsScroll").offset().top
        }, 1e3);
    };
    ViewModel.prototype.onDIURETICQuestionClick = function(data) {
        var that = this;
        var arr = that.databind.gdmtVM.diuretic.ques();
        arr = arr.filter(function(currentValue, index, arr) {
            return currentValue.id() == data.value;
        });
        if (arr[0].selectedOpt() == data.checked) {
            return;
        }
        var contraindicationsJson = JSON.parse(ko.mapping.toJSON(this.databind.contraindications));
        this._contraindicationsData.diuretic = JSON.parse(JSON.stringify(this._contraindicationsTemp)).diuretic;
        contraindicationsJson.diuretic = JSON.parse(JSON.stringify(this._contraindicationsTemp)).diuretic;
        ko.mapping.fromJS(contraindicationsJson, this.databind.contraindications);
        arr[0].selectedOpt(data.checked);
        this.databind.contraindications.diuretic.hide(true);
        if (arr[0].selectedOpt() == false) {
            this.databind.contraindications.diuretic.hide(false);
            $("#id_contraindication_diuretic").removeClass("fadeIn animated").addClass("fadeIn animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function() {
                $(this).removeClass("fadeIn animated");
            });
        }
        arr[0].warning(false);
        var jsonString = ko.mapping.toJSON(this.databind.gdmtVM);
        AppModel.getInstance().setGDMTData(JSON.parse(jsonString));
        var validArr = that.checkEvaluateScreenValid();
        if (validArr.length == 0) {
            that.populateIndicationAndModifier();
        }
    };
    ViewModel.prototype.onAdditionalMedicationsClick = function(data) {
        var that = this;
        that.databind.patientVM.additionalMedications.warning(false);
        var options = that.databind.patientVM.additionalMedications.options;
        var option = UtilFuns.findAndGetValue(options, data.value);
        if (option.id() == "am5") {
            options().filter(function(item) {
                item.isSelected(false);
            });
            if (!window.appResetting) $("html,body").stop().animate({
                scrollTop: $("#diureticScroll").offset().top
            }, 1e3);
        } else {
            UtilFuns.findAndGetValue(options, "am5").isSelected(false);
        }
        option.isSelected(data.checked);
        var jsonString = ko.mapping.toJSON(that.databind.patientVM);
        AppModel.getInstance().setPatientData(JSON.parse(jsonString));
        var validArr = that.checkEvaluateScreenValid();
        if (validArr.length == 0) {
            that.populateIndicationAndModifier();
        }
    };
    ViewModel.prototype.onModifierQuestionClick = function(data) {
        var that = this;
        var arr = that.databind.patientVM.modifier.options();
        arr = arr.filter(function(currentValue, index, arr) {
            return currentValue.id() == data.value;
        });
        arr[0].selectedOpt(data.checked);
        that.dependentOptions(arr[0].id(), data.checked);
        var jsonString = ko.mapping.toJSON(that.databind.patientVM);
        AppModel.getInstance().setPatientData(JSON.parse(jsonString));
    };
    ViewModel.prototype.onIndicationQuestionClick = function(data) {
        var that = this;
        var arr = that.databind.patientVM.indication.options();
        arr = arr.filter(function(currentValue, index, arr) {
            return currentValue.id() == data.value;
        });
        arr[0].selectedOpt(data.checked);
        that.dependentOptions(arr[0].id(), data.checked);
        var jsonString = ko.mapping.toJSON(that.databind.patientVM);
        AppModel.getInstance().setPatientData(JSON.parse(jsonString));
    };
    ViewModel.prototype.dependentOptions = function(optionId, isChecked) {
        if (!isChecked) return;
        var that = this;
        var arrDep = that.databind.patientVM.dependent_indication_modifier();
        arrDep = arrDep.filter(function(currentValue, index, arr) {
            return currentValue.indication() == optionId || currentValue.modifier() == optionId;
        });
        if (!arrDep.length) return;
        var arrInd = that.databind.patientVM.indication.options();
        var arrMod = that.databind.patientVM.modifier.options();
        if (arrDep[0].indication() == optionId) {
            arrMod = arrMod.filter(function(currentValue, index, arr) {
                return currentValue.id() == arrDep[0].modifier();
            });
            if (arrMod.length) for (var i = 0; i < arrMod.length; i++) {
                arrMod[i].selectedOpt(false);
            }
        } else if (arrDep[0].modifier() == optionId) {
            arrInd = arrInd.filter(function(currentValue, index, arr) {
                return currentValue.id() == arrDep[0].indication();
            });
            if (arrInd.length) for (var i = 0; i < arrInd.length; i++) {
                arrInd[i].selectedOpt(false);
            }
        }
    };
    ViewModel.prototype.onSomeEvent = function(data) {
        var that = this;
        if (data.type == "ARB_ARC_OPTION_QUESTION") {
            var slOpt = that.databind.gdmtVM.ACE_ARB.selectedOpt();
            var arr = that.databind.gdmtVM.ACE_ARB.options();
            arr = arr.filter(function(currentValue, index, arr) {
                return currentValue.id() == slOpt;
            });
            return that.databind.getCopyText(arr[0].opQueCopytext());
        }
        if (data.type == "IS_ARB_ARC_OPTION_AVAILABLE") {
            var slOpt = that.databind.gdmtVM.ACE_ARB.selectedOpt();
            if (slOpt != "Neither") {
                if (!window.appResetting) $("html,body").stop().animate({
                    scrollTop: $("#divACEARBDrugs").offset().top
                }, 1e3);
            }
            return !slOpt || slOpt == "Neither" || slOpt == "ARNI" ? false : true;
        }
        if (data.type == "GET_SELECTED_ARB_ARC_OPTION") {
            var slOpt = that.databind.gdmtVM.ACE_ARB.selectedOpt();
            var arr = that.databind.gdmtVM.ACE_ARB.options();
            arr = arr.filter(function(currentValue, index, arr) {
                return currentValue.id() == slOpt;
            });
            setTimeout(function() {
                that.databind.acearbSelect(arr[0].selectedOpt());
            }, 100);
            return arr[0].options;
        }
        if (data.type == "GET_ACE_ARB_NEITHER_QUESTIONS") {
            var slOpt = that.databind.gdmtVM.ACE_ARB.selectedOpt();
            if (slOpt == "Neither") return [];
            var arr = that.databind.gdmtVM.ACE_ARB.options();
            var questions = [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i].id() == slOpt) {
                    questions = arr[i].que;
                    break;
                }
            }
            return questions;
        }
        if (data.type == "GET_BB_OPTION") {
            var arr = that.databind.gdmtVM.beta_blocker.drugs;
            setTimeout(function() {
                that.databind.bbSelect(arr.selectedOpt());
            }, 200);
            return arr.options();
        }
        if (data.type == "IS_BB_QUESTION") {
            var arr = that.databind.gdmtVM.beta_blocker.drugs;
            if (arr.selectedOpt() == "bb_op0" || arr.selectedOpt() == "bb_opsl") {
                var arr_bb = that.databind.gdmtVM.beta_blocker.ques();
                arr_bb.filter(function(currentValue, index, arr) {
                    currentValue.selectedOpt(false);
                });
            }
            return arr.selectedOpt() == "bb_op0" || arr.selectedOpt() == "bb_opsl" ? true : false;
        }
        if (data.type == "GET_BB_QUESTIONS") {
            var arr = that.databind.gdmtVM.beta_blocker.ques();
            return arr;
        }
        if (data.type == "GET_DIURETIC_QUESTIONS") {
            var arr = that.databind.gdmtVM.diuretic.ques();
            return arr;
        }
        if (data.type == "GET_NYHA_OPTION") {
            var arr = that.databind.patientVM.NYHA;
            setTimeout(function() {
                that.databind.NYHASelect(arr.selectedOpt());
            }, 200);
            return arr.options();
        }
        if (data.type == "GET_LVEF_OPTION") {
            var arr = that.databind.patientVM.LVEF;
            setTimeout(function() {
                that.databind.LVEFSelect(arr.selectedOpt());
            }, 200);
            var allLVEF = that.databind.patientVM.LVEF.options();
            allLVEF = allLVEF.filter(function(currentValue, index, arr) {
                if (currentValue.id() == "LUN") return false;
                return true;
            });
            return allLVEF;
        }
    };
    ViewModel.prototype.populateIndicationAndModifier = function() {
        var that = this;
        AppModel.getInstance().getHFLogicModel().getModIndList(this.databind, function(data) {
            var allModifier = that.databind.patientVM.modifier.options();
            var modifierlist = data.modifierlist;
            var advices = data.advicelist;
            var filter = allModifier.filter(function(currentValue, index, arr) {
                var flag = false;
                currentValue.selectedOpt(false);
                for (var i = 0; i < modifierlist.length; i++) {
                    if (modifierlist[i] == currentValue.id()) {
                        flag = true;
                        break;
                    }
                }
                return flag;
            });
            that.databind.modifierlist(filter);
            var allIndication = that.databind.patientVM.indication.options();
            var indicationlist = data.indicationlist;
            filter = allIndication.filter(function(currentValue, index, arr) {
                var flag = false;
                currentValue.selectedOpt(false);
                for (var i = 0; i < indicationlist.length; i++) {
                    if (indicationlist[i] == currentValue.id()) {
                        flag = true;
                        break;
                    }
                }
                return flag;
            });
            if (advices.some(function(item) {
                return item.id === "AAM14";
            })) {
                filter = filter.filter(function(item) {
                    return item.id() !== "i6" && item.id() !== "i7";
                });
            }
            that.databind.indicationlist(filter);
            if (that.databind.indicationlist().length == 0 && that.databind.modifierlist().length == 0) {
                var NYHA = that.databind.patientVM.NYHA.selectedOpt();
                var LVEF = that.databind.patientVM.LVEF.selectedOpt();
                if (!ViewModel.isNoneGDMTSelected && NYHA !== "NYHASL" && LVEF !== "LSL") that.showFirstlineButton();
                that.databind.showPatientScenario(false);
            } else {
                if (!that.databind.showContinueBtn()) that.databind.getAdviceButtonState("active");
                if (that.databind.showPatientScenario()) {
                    that.databind.showFLTherapyBtn(false);
                } else {
                    if (that.databind.indicationlist().length !== 0 || that.databind.modifierlist().length !== 0) {
                        that.databind.showContinueBtn(true);
                        that.databind.showFLTherapyBtn(false);
                    }
                }
            }
            var jsonString = ko.mapping.toJSON(that.databind.patientVM);
            AppModel.getInstance().setPatientData(JSON.parse(jsonString));
            $("#divIndication").removeClass("fadeIn animated").addClass("fadeIn animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function() {
                $(this).removeClass("fadeIn animated");
            });
            var ivabridineAdv = data.advicelist.filter(function(element) {
                return element.id === "Ivabridine";
            })[0];
            var ciForIvabridine = that.databind.patientVM.indication.CIforIvabridine;
            ciForIvabridine.isAdviceTriggered(false);
            ciForIvabridine.yesSelected(false);
            ciForIvabridine.noSelected(false);
            var rasNonCIs = ciForIvabridine.rasNonCIs();
            var que = UtilFuns.findAndGetValue(that.databind.contraindications.ACE_ARB.ques, "que5");
            var options = UtilFuns.getSelectedOptions(que.options);
            var selectedOpts = rasNonCIs.filter(function(el) {
                return !!options.filter(function(op) {
                    return el === op.id();
                })[0];
            });
            if (!selectedOpts.length) {
                var isIvabridine = UtilFuns.getSelectedOptions(that.databind.patientVM.additionalMedications.options).some(function(item) {
                    return item.id() === "am4";
                });
                ciForIvabridine.isAdviceTriggered(!!ivabridineAdv && !isIvabridine);
            }
            if (!ciForIvabridine.isAdviceTriggered()) {
                var modifierlist = that.databind.modifierlist();
                modifierlist = modifierlist.filter(function(currentValue, index, arr) {
                    return currentValue.id() !== "m3";
                });
                that.databind.modifierlist(modifierlist);
            }
        });
    };
    w.ViewModel = ViewModel;
})(window, window.UtilityFunctions, window.AppModel, ko, $);

var GDPRBanner = function() {
    var cookieString;
    function GDPRBanner() {}
    window.makeAck = function() {
        var cname = "ack-cookie-banner";
        var cvalue = new Date();
        var d = new Date();
        d.setTime(d.getTime() + 10 * 24 * 60 * 60 * 1e3);
        var expires = "expires=" + d.toUTCString();
        cookieString = cname + "=" + cvalue.toUTCString() + ";" + expires + ";path=/";
        if (Lookup.isNativeApplication) localStorage.setItem(cname, cookieString); else document.cookie = cookieString;
        removeBanner();
    };
    GDPRBanner.prototype.getCookieBanner = function() {
        var baseUri = window.acc.gdprBannerUrl;
        var cookieValue = getCookie("ack-cookie-banner");
        if (cookieValue) {
            $.ajax({
                method: "GET",
                url: baseUri + "/wapi/CookieBannerHelper/GetGDPRPolicyUpdatedDate"
            }).done(function(data) {
                var publishDate = data ? new Date(data) : "";
                if (publishDate && new Date(cookieValue) > publishDate) removeBanner(); else loadBanner(baseUri);
            });
        } else {
            loadBanner(baseUri);
        }
    };
    function getCookie(cname) {
        var name = cname + "=";
        if (Lookup.isNativeApplication) cookieString = localStorage.getItem(cname); else cookieString = document.cookie;
        var decodedCookie = decodeURIComponent(cookieString);
        var ca = decodedCookie.split(";");
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === " ") {
                c = c.substring(1);
            }
            if (c.indexOf(name) === 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }
    function removeBanner() {
        var elem = document.getElementById("cookie-banner");
        if (elem) elem.parentNode.removeChild(elem);
    }
    function loadBanner(baseUri) {
        var template = document.createElement("div");
        template.classList.add("hide-print");
        template.id = "cookie-banner";
        $.ajax({
            method: "GET",
            url: baseUri + "/external/vexternalcookiebanner"
        }).done(function(data) {
            template.innerHTML = data;
            document.body.appendChild(template);
            setBannerText();
        });
    }
    function setBannerText() {
        var copytext = window.AppModel.getInstance().getCopytext;
        if ($("#cookieWarning .col-md-9 .col-lg-9")) {
            $("#cookieWarning .col-md-9").html(copytext("cp_gdprBannerText"));
            $("#ackButton").html(copytext("cp_gdprBannerBtnText"));
        }
    }
    return GDPRBanner;
}();

(function() {
    if (!window.acc) {
        console.log("ERROR! - please check if settingsjs is properly merged from Grunt(window.acc is undefind)");
    }
    window.logError = function(errorString) {
        console.log(errorString);
    };
    var statusbar = function() {
        StatusBar.overlaysWebView(false);
        StatusBar.backgroundColorByName("black");
    };
    var splashScreen = function() {
        setTimeout(function() {
            navigator.splashscreen.hide();
        }, 4e3);
    };
    var deviceReadyCallBack = function() {
        splashScreen();
        statusbar();
    };
    document.addEventListener("deviceready", deviceReadyCallBack, false);
    window.setScreenSpacerHeight = function() {
        var viewportheight;
        if (typeof window.innerWidth !== "undefined") {
            viewportheight = window.innerHeight;
        } else if (typeof document.documentElement !== "undefined" && typeof document.documentElement.clientWidth !== "undefined" && document.documentElement.clientWidth !== 0) {
            viewportheight = document.documentElement.clientHeight;
        } else {
            viewportheight = document.getElementsByTagName("body")[0].clientHeight;
        }
        var mh = viewportheight - ($("header").outerHeight() + $("footer").outerHeight());
        $(".screen-spacer").css("min-height", mh);
    };
    var resizeTimer;
    window.onresize = function(event) {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(function() {
            window.setScreenSpacerHeight();
        }, 100);
    };
})();

(function(w, AppModel, ViewModel, JSONService, ko, pager, Routing) {
    var App = function() {};
    App.prototype.appModel = AppModel.getInstance();
    App.prototype.jsonService = new JSONService();
    App.prototype.viewModel;
    App.prototype.init = function() {
        var that = this;
        this.jsonService.loadJson(function() {
            that.jsonDataLoaded();
            that.hidePreloader();
            that.appModel.getHFLogicModel().hfLogicData = that.jsonService.hfLogicData;
            new window.GDPRBanner().getCookieBanner();
        });
    };
    App.prototype.hidePreloader = function() {
        setTimeout(function() {
            document.getElementById("spinner").style.display = "none";
        }, 800);
    };
    App.prototype.jsonDataLoaded = function() {
        var that = this;
        that.initViewModel();
        that.initKnockout();
    };
    App.prototype.initKnockout = function() {
        var that = this;
        var viewModel = this.viewModel.databind;
        pager.Href.hash = "#!/";
        pager.extendWithPage(viewModel);
        ko.applyBindings(viewModel);
        pager.start();
        var hash = window.location.hash.split("?")[0];
        if (hash == "#!/content/staticadviceviewpage") {
            var p = window.location.hash.split("?")[1];
            that.viewModel.loadStaticAdvice(p);
        } else {
            pager.navigate("#!/content/evaluate");
        }
        var routing = new Routing();
        routing.routeGuard();
        pager.afterShow.add(function(p) {
            routing.afterShow(p);
            that.viewModel.onPagerAfterShow(p);
        });
        $(document).foundation();
        this.foundationTooltipHandlers();
    };
    App.prototype.foundationTooltipHandlers = function() {
        $(window).click(function(e) {
            var flag = $(e.target).hasClass("mytooltip");
            if (!flag) {
                $(".tooltip").hide();
            }
        });
        $(window).scroll(function() {
            try {
                if (document.getElementsByClassName("mytooltip").length > 0) $(".mytooltip").foundation("hide");
            } catch (e) {}
        });
        document.addEventListener("touchstart", scrollStart, false);
        function scrollStart(e) {
            e.stopPropagation();
            try {
                if (document.getElementsByClassName("mytooltip").length > 0) $(".mytooltip").foundation("hide");
            } catch (e) {}
        }
    };
    App.prototype.initViewModel = function() {
        this.viewModel = new ViewModel();
        this.viewModel.init();
        this.viewModel.initGDMT(this.appModel.getGDMTData());
        this.viewModel.initPatient(this.appModel.getPatientData());
        this.viewModel.initKo();
        this.viewModel.initChangeEvent();
    };
    var app = new App();
    app.init();
})(window, window.AppModel, window.ViewModel, window.JSONService, ko, pager, window.Routing);