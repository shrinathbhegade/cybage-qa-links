
var isNativeApplication = (document.URL.indexOf("http") === -1 && document.URL.indexOf("https") === -1);
var focusMode = false;
const tosKey = 'ascvdTOS';

$(window).on('load', () => {
    appmodel.hideSplash(true);  
}); 

if (isNativeApplication) {
    var cordovaScript = document.createElement("script");
    cordovaScript.setAttribute("src", "../cordova.js");
    document.head.appendChild(cordovaScript);
    var deviceReadyCallBack = function () {
        $(window).on("scroll", remakeStickyKeyboard);
        var isiOS = navigator.userAgent.indexOf("iPhone") > -1 || navigator.userAgent.indexOf("iPad") > -1;
        setTimeout(function () {
            navigator.splashscreen.hide();
            $(".panzoom-element img").trigger("unveil");
        }, 1e3);
        var remakeStickyKeyboard = function (data, event) {
            if (Keyboard.isVisible) {
                sticky.destroy();
                sticky = new Waypoint.Sticky({
                    element: $(".sticky-holder")[0]
                });
            }
        };
    };
    document.addEventListener("deviceready", deviceReadyCallBack, false);
}

ko.bindingHandlers["ui-accordion"] = {
    init: function (element, valueAccessor, binding, viewModel) {
        $(element).addClass("accordion");
        var children = $(element).children();
        var bodies = $.map(children, function (child) {
            return $(child).children()[1];
        });
        var headers = $.map(children, function (child) {
            return $(child).children()[0];
        });
        $.each(children, function (childIndex, child) {
            var child = $(child);
            var header = $(child.children()[0]);
            header.addClass("toggle");
            var body = $(child.children()[1]);
            header.click(function () {
                $.each(headers, function (headerIndex, otherHeader) {
                    if (headerIndex !== otherHeader) {
                        $(otherHeader).parent().removeClass("selected");
                    }
                });
                $(this).parent().addClass("selected");
                body.slideDown();
                $.each(bodies, function (bodyIndex, otherBody) {
                    if (bodyIndex !== childIndex) {
                        $(otherBody).slideUp();
                    }
                });
            });
        });
        $.each(bodies, function (i, body) {
            if (i !== 0) {
                $(body).hide();
            }
        });
        $.each(children, function (i, child) {
            if (i == 0) {
                $(child).addClass("selected");
            }
        });
    },
    update: function (element, valueAccessor) { }
};

ko.bindingHandlers.toggle = {
    after: ["value", "attr"],
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        function updateModel() {
            if (isValueArray) {
                var index = ko.utils.arrayIndexOf(underlyingValue, viewModel);
                if (index > -1) {
                    underlyingValue.splice(index, 1);
                } else {
                    underlyingValue.push(viewModel);
                }
                if (isObservable) {
                    modelProperty.valueHasMutated();
                }
            } else {
                if (isObservable && isWritable) {
                    modelProperty(!modelProperty());
                } else {
                    viewModel[modelProperty] = !viewModel[modelProperty];
                }
            }
        }
        var modelProperty = valueAccessor();
        var underlyingValue = ko.utils.unwrapObservable(modelProperty);
        var isValueArray = underlyingValue instanceof Array;
        var isObservable = ko.isObservable(modelProperty);
        var isWritable = ko.isWriteableObservable(modelProperty);
        ko.utils.registerEventHandler(element, "click", updateModel);
    }
};

var tabchange = function (data, event) {
    $(".tabs-primary li").removeClass("selected");
    $('.nav-list li').removeClass('selected');
    if (data.page.currentId != "") {
        string = "." + data.page.currentId + "-Tab";
    } else {
        string = "." + data.page.route[data.page.route.length - 2] + "-Tab";
    }
    $(string).addClass("selected");
    var hash = location.hash;
    if (hash.indexOf("estimator") > -1 || hash.indexOf("recommendation") > -1) {
        notification.callWebApi("get", notification.criticalNotificationInputURL(), null, notification.notificationType.critical);
    }

    var view = viewHeight();
    var mh;
    mh = (view - ($('header').outerHeight() + $('footer').outerHeight()));
    $(".fill-page-height").css("min-height", mh);
};

var subtabchange = function (data, event) {
    $(".tabs:not(.tabs-primary) li").removeClass("selected");
    var string = "";
    if (data.page.currentId != "") {
        string = "." + data.page.currentId + "-Tab";
    } else {
        string = "." + data.page.route[data.page.route.length - 2] + "-Tab";
    }
    $(string).addClass("selected");
};

var loadTopofPage = function (data, event) {
    $("html, body").animate({
        scrollTop: 0
    });
};

var goBack = function () {
    window.history.back();
};

var panelScrollTop = function (data, event) {
    var offset = $(event.currentTarget).parent().parent().offset().top - 50;
    var winOffset = $(window).scrollTop();
    var newScroll = offset <= winOffset ? offset : 0;
    $(window).scrollTop(newScroll);
};

var pageScrollTop = function (data, event) {
    $(window).scrollTop(0);
};

var panelVisibleToggle = function (data, event) {
    var target = data + " .collapsable-panel";
    $(target).toggle();
};

var nestedPanelVisibleToggle = function (data, event) {
    var parentSection = $(data).parents('section.group-section').attr('id');
    if ($('.nested-accordion ' + data).hasClass('nested-selected')) {
        $('.nested-accordion ' + data).removeClass('nested-selected');
        $('.nested-accordion ' + data + ' .nested-collapsable-panel').removeClass('nested-selected');
    }
    else {
        $('.nested-accordion ' + data).addClass('nested-selected');
        $('.nested-accordion ' + data + ' .nested-collapsable-panel').addClass('nested-selected');
    }
    var target = '.nested-accordion ' + data + ' .nested-collapsable-panel';
    $(target).slideToggle();
    if ($('#' + parentSection + ' .nested-collapsable-panel.selected').length != 0) {
        $('#' + parentSection + '_action').attr('data-action', 'collapse');
        $('#' + parentSection + '_action').html('');
        $('#' + parentSection + '_action').html('Collapse All');
    }
    else {
        $('#' + parentSection + '_action').attr('data-action', 'expand');
        $('#' + parentSection + '_action').html('');
        $('#' + parentSection + '_action').html('Expand All');
    }
    return true;
};

var panelHide = function (data, event) {
    $(event.currentTarget).parents(".collapsable-panel").hide();
    $(event.currentTarget).parents(".selected").removeClass("selected");
};

var panelShow = function (data, event) {
    var target = data + " .collapsable-panel";
    $(target).show();
};

var listchange = function (data, event) {
    var hash = location.hash;
    $('.nav-list li').each(function () {
        var that = $(this);
        that[$('a', this).attr('href') === hash ? 'addClass' : 'removeClass']('selected');
    });
};

var sticky = new Waypoint.Sticky({
    element: $(".sticky-holder")[0]
});

var waypoint = new Waypoint({
    element: $(".shrink-waypoint"),
    handler: function (direction) {
        if (direction == "down") {
            $(".sticky-holder").addClass("shrink");
        } else {
            $(".sticky-holder").removeClass("shrink");
        }
    }
});

var remakeSticky = function (data, event) {
    sticky.destroy();
    sticky = new Waypoint.Sticky({
        element: $(".sticky-holder")[0]
    });
};

var panzoom = function (data, event) {
    var $windowheight = $(window).height() - 50;
    var $scaleZoom = $(".parent.panzoom").width() / $(".panzoom-element img").width();
    var resultZoom = "'scale(" + $scaleZoom + ")'";
    var $panHolder = $(".panzoom-element");
    var $panButtons = $(".panzoom-buttons");
    $(".parent.panzoom").height($windowheight);
    $panHolder.panzoom({
        $zoomIn: $panButtons.find(".zoom-in"),
        $zoomOut: $panButtons.find(".zoom-out"),
        $reset: $panButtons.find(".reset"),
        contain: "invert"
    });
};

var allSelectElements = document.getElementsByTagName("select");

for (var i = 0; i < allSelectElements.length; i++) {
    allSelectElements[i].addEventListener("touchstart", function (e) {
        e.stopPropagation();
    }, false);
}

const notShowAgain = function () {
    if (typeof (Storage) !== "undefined") {
        localStorage.setItem(tosKey, "true");
        appmodel.doNotShowAgainVisible(false);
    }
    return false;
};

// input text focus moved after next/go/return key press Start.
$(function () {
    // Code to transfer focus on keypad click event, should be done on document.ready() only.
    // Start
    if (typeof (Storage) !== "undefined") {
        if (localStorage.getItem(tosKey) !== null) {
          appmodel.doNotShowAgainVisible(false);
        }
    }
    (function ($) {
        $.fn.enterAsTab = function (options) {
            var settings = $.extend({
                'allowSubmit': false
            }, options);
            try {
                $('input').keypress(function (event) {
                    if (settings.allowSubmit) {
                        var type = $(this).attr("type");
                        if (type == "submit") {
                            return true;
                        }
                    }
                    if (event.keyCode == 13) {
                        var inputs = $(this).parents("body").eq(0).find(":input,select,a,button");
                        var idx = inputs.index(this);
                        if (idx == inputs.length - 1) {
                            idx = -1;
                        }
                        else {
                            inputs[idx].blur();
                            inputs[idx + 1].focus(); // handles submit buttons
                        }
                        return true;
                    }
                });
                return this;
            }
            catch (error) { }
        };
    })(jQuery);

    $("#body").enterAsTab({
        'allowSubmit': true
    });
    // End
});
// input text focus moved after next/go/return key press End.

$(window).on("resize", remakeSticky);

window.addEventListener("keyboardDidShow", function () {
    $("#scorebar").slideUp();
});

window.addEventListener("keyboardDidHide", function () {
    $("#scorebar").slideDown();
});

var _notification = function () {
    var self = this;
    self.showCritical = true;
    self.webApiUrl = 'https://tools.acc.org/ACCUtility.Web/';
    self.appId = 'org.acc.ldlcmanager';
    self.userGuid = 'a7b3e523-3f8d-4b33-a1c4-ec9e9aa3a5bb';
    self.appVersion = '1.0';
    self.osType = '';
    self.osTypes = {
        iOS: '1',
        Android: '2',
        Web: '3',
        All: '4'
    };
    self.appStoreURL = '';
    self.notificationType = {
        critical: '1',
        nonCritical: '2'
    };

    self.callWebApi = function (type, url, data, notificationType) {
        try {
            $.ajax({
                cache: false
                , url: self.webApiUrl + url
                , type: type
                , dataType: 'json'
                , data: data
                , timeout: 2000
                , success: function (data) {
                    if (notificationType === self.notificationType.critical && data && self.showCritical) {
                        data = $.grep(data, function (item) {
                            return (item.AppVersionNumber >= self.appVersion && (item.OsType == self.osType || item.OsType == self.osTypes.All));
                        });
                        if (data.length > 0 && appmodel) {
                            appmodel.criticalNotification(data);
                            $('#critical_notification').foundation('open');
                        }

                        localStorage.setItem('criticalNotification', JSON.stringify(data));

                    } else if (notificationType === self.notificationType.nonCritical && data) {
                        data = $.grep(data, function (item) {
                            return (item.AppVersionNumber >= self.appVersion && (item.OsType == self.osType || item.OsType == self.osTypes.All));
                        });
                        if (data.length > 0 && appmodel) {
                            appmodel.notificationData(data);
                        }

                        localStorage.setItem('nonCriticalNotification', JSON.stringify(data));
                    } else {
                        
                    }
                }
                , error: function (type) {
                    console.log("ERROR!!" + type.responseText);
                    self.CheckStoredNotification();
                }
            });
        } catch (e) {
            self.CheckStoredNotification();
            console.log("ERROR!!" + e);
        }
    };

    self.CheckStoredNotification = function () {
        if (localStorage.getItem('criticalNotification')) {
            var data = JSON.parse(localStorage.getItem('criticalNotification'));
            data = $.grep(data, function (item) {
                return (item.AppVersionNumber >= self.appVersion && (item.OsType == self.osType || item.OsType == self.osTypes.All));
            });
            if (data.length > 0 && appmodel) {
                appmodel.criticalNotification(data);
                $('#critical_notification').foundation('open');
            }
        }
        if (localStorage.getItem('nonCriticalNotification')) {

            var data = JSON.parse(localStorage.getItem('nonCriticalNotification'));
            data = $.grep(data, function (item) {
                return (item.AppVersionNumber >= self.appVersion && (item.OsType == self.osType || item.OsType == self.osTypes.All));
            });
            if (data.length > 0 && appmodel) {
                appmodel.notificationData(data);
            }
        }
    };

    self.criticalNotificationInputURL = function () {
        return 'Notification/' + self.appId + '/' + self.appVersion + '/' + self.osType + '/' + self.notificationType.critical + '/true/' + self.userGuid;
    };

    self.nonCriticalNotificationInputURL = function () {
        return 'Notification/' + self.appId + '/' + self.appVersion + '/' + self.osType + '/' + self.notificationType.nonCritical + '/true/' + self.userGuid;
    };
};

var notification = new _notification;
//Intialize ostype once;
if (isNativeApplication) {
    notification.osType = notification.osTypes.All;
} else {
    notification.osType = notification.osTypes.Web;
};


var appData = {};

var glossary = [{
    label: "Ankle - Brachial Index(ABI)",
    definition: "The ratio of the blood pressure in the ankle compared to blood pressure in the arm,  which can predict peripheral artery disease(PAD). "
}, {
    label: "ASCVD",
    definition: "Heart attack and stroke are usually caused by atherosclerotic cardiovascular disease(ASCVD). ASCVD develops because of a build - up of sticky cholesterol - rich plaque. Over time, this plaque can harden and narrow the arteries. "
}, {
    label: "C-reactive Protein",
    definition: "C-reactive protein (CRP) measures general levels of inflammation in your body.  High levels of CRP are caused by infections and many long-term diseases.  A CRP test,  however,  cannot show where the inflammation is located or what is causing it.  "
}, {
    label: "Cholesterol",
    definition: "Cholesterol is a waxy fat - like substance that travels through the blood.  In and of itself,  cholesterol isn't bad.  It actually helps create the outer coating of our cells and aids the body in making vitamin D and certain hormones. "
}, {
    label: "Coronary Artery Calcium (CAC) Score",
    definition: "A test that shows the presence of plaque or fatty build - up in the heart artery walls. "
}, {
    label: "Coronary Artery Disease",
    definition: "It happens when your coronary arteries--which act like fuel lines to supply blood to the heart--become damaged or diseased.  There is a build-up of fat and cholesterol in the blood that sticks to the inner walls of the arteries (this is also called atherosclerosis).  As this happens,  the arteries can narrow or become blocked.  Keep in mind,  coronary artery disease typically develops over decades; so many people don't even know they have it until it starts causing problems. "
}, {
    label: "Diabetes",
    definition: "When you have type 2 diabetes,  your body does not use or make insulin the way it should.  As a result,  the amount of sugar (glucose) in your blood becomes too high.  Over time,  high blood glucose levels can start to damage the blood vessels in the heart,  eyes,  kidneys,  brain,  and other parts of your body. "
}, {
    label: "HDL",
    definition: "HDL (high-density lipoprotein) cholesterol is sometimes referred to as &quot;good&quot; cholesterol,  because it helps move cholesterol out of the body.  HDL does this by binding with cholesterol in the bloodstream and carrying it back to the liver for disposal.  Higher HDL levels help to lower the risk of cardiovascular disease. "
}, {
    label: "Heart Attack",
    definition: "Your heart muscle needs oxygen and nutrients to work as it should.  A heart attack (your care provider may call it a myocardial infarction) usually occurs when blood flow to the heart is suddenly cut off.  When this happens,  the heart muscle is starved of oxygen-rich blood.  In just a short period of time,  part of the heart can be damaged or die.  That's why immediate care is critical--it can spare your heart and save your life.  If you think you are having a heart attack,  dial 9-1-1 immediately. "
}, {
    label: "High Blood Pressure",
    definition: "Blood pressure is the force of blood moving against the walls of your arteries.  Over time,  elevated blood pressure can weaken your heart,  blood vessels,  kidneys and other parts of your body. "
}, {
    label: "LDL",
    definition: "LDL (low - density lipoprotein) cholesterol is sometimes referred to as &quot;bad &quot;cholesterol. LDL carries mostly fat and only a small amount of protein from the liver to other parts of the body. A higher LDL level is considered a risk factor for coronary artery disease(CAD) because, under certain conditions, it can cause hardening of the arteries(atherosclerosis). "
}, {
    label: "Metabolic Syndrome",
    definition: "Metabolic syndrome is the combination of high blood pressure, high blood sugar, excess fat around the waist, low HDL( &quot;good&quot;) cholesterol, and high triglycerides. Metabolic syndrome is closely linked to insulin resistance, in which the body cannot use insulin properly. Metabolic syndrome increases your risk for cardiovascular disease, diabetes, and stroke. Weight loss and increased physical activity can help to reduce the risk for metabolic syndrome. "
}, {
    label: "Peripheral Artery Disease(PAD)",
    definition: "Peripheral artery disease (PAD) is a narrowing or blockage of arteries that causes poor blood flow to your legs or arms.  When you walk or exercise,  your leg muscles don't get enough blood and you can get painful cramps. "
}, {
    label: "Statin",
    definition: "Statins are a type of medicine commonly used to treat high cholesterol.  Statins block an enzyme the body needs to produce cholesterol,  thereby lowering the total amount of it in the blood. "
}, {
    label: "Stroke",
    definition: "Your brain is the master control center for your body.  It directs most of what you do--speedily orchestrating your movements,  emotions and ability to think,  talk and learn.  To do this,  your brain needs a steady supply of oxygen and nutrient-rich blood.  That's why if you suffer a stroke--when blood flow to the brain is cut off--brain cells can die very quickly.  Stroke is a leading cause of death and disability in adults.  According to the American Stroke Association,  a stroke occurs every 40 seconds in the United States. "
}, {
    label: "Triglycerides",
    definition: "Triglycerides are a type of fat found in your blood.  Your body uses them for energy.  Some triglycerides are needed for good health. However, high triglycerides may raise your risk of cardiovascular disease and may be a sign of metabolic syndrome. "
}];

var statins = [{
    id: "1",
    name: "Atorvastatin (Lipitor&reg;)",
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "--",
        htmlText: "--"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "10 (20) mg",
        htmlText: "<b>10</b> <i>(20)</i> <b>mg</b>"
    }, {
        name: "High Intensity Dose",
        type: "dosehigh",
        value: "(40*)&ndash;80 mg",
        htmlText: "<b>(40<strong>*</strong>)&ndash;80 mg</b>"
    }, {
        name: "Other",
        type: "other",
        value: "other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "14 (Mean plasma elimination) 20-30 (inhibitory activity for HMG-CoA reductase is 20 to 30 hours due to the contribution of active metabolites)"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "Yes"
    }, {
        name: "Optimal Frequency",
        type: "timeofday",
        value: "Any time of day/evening - Food not required"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "Yes"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "CYP3A4"
    }]
}, {
    id: "2",
    name: "Fluvastatin (Lescol&reg;)",
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "20&ndash;40 mg",
        htmlText: "<i>20&ndash;40 mg</i>"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "40 mg BID",
        htmlText: "<b>40 mg</b> BID"
    }, {
        name: "High Intensity Dose",
        type: "dosehigh",
        value: "--",
        htmlText: "--"
    }, {
        name: "Other",
        type: "other",
        value: "other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "3"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "Yes"
    }, {
        name: "Optimal Frequency",
        type: "timeofday",
        value: "Evening/bedtime - Food not required"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "No"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "(75%) CYP2C9; (5%) CYP2C8; and 20% CYP3A4"
    }]
}, {
    id: "3",
    name: "Fluvastatin XL (Lescol XL&reg;)",
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "--",
        htmlText: "--"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "80 mg ",
        htmlText: "<i>80 mg</i>"
    }, {
        name: "High Intensity Dose",
        type: "dosehigh",
        value: "--",
        htmlText: "--"
    }, {
        name: "Other",
        type: "other",
        value: "other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "9"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "Yes"
    }, {
        name: "Optimal Frequency",
        type: "timeofday",
        value: "Any time of day/evening-food not required"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "No"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "(75%) CYP2C9; (5%) CYP2C8; and 20% CYP3A4"
    }]
}, {
    id: "4",
    name: "Lovastatin (Mevacor&reg;)",
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "20 mg",
        htmlText: "<b>20 mg</b>"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "40 mg",
        htmlText: "<b>40 mg</b>"
    }, {
        name: "High Intensity Dose",
        type: "dosehigh",
        value: "--",
        htmlText: "--"
    }, {
        name: "Other",
        type: "other",
        value: "Other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "1. 1-1. 7"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "Yes"
    }, {
        name: "Optimal Frequency",
        type: "timeofday",
        value: "Evening/bedtime - Food required except for Altoprev extended-release formulation"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "Yes"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "CYP3A4"
    }]
}, {
    id: "5",
    name: "Pitavastatin (Livalo&reg;)",
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "1 mg",
        htmlText: "<i>1 mg</i>"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "2-4 mg",
        htmlText: "<i>2-4 mg</i>"
    }, {
        name: "High Intensity Dose",
        type: "dosehigh",
        value: "--",
        htmlText: "--"
    }, {
        name: "Other",
        type: "other",
        value: "Other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "12"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "Yes"
    }, {
        name: "Optimal Frequency",
        type: "timeofday",
        value: "Any time of day/evening - Food not required"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "No"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "Minimal CYP2C9 and CYP2C8"
    }]
}, {
    id: "6",
    name: "Pravastatin (Pravachol&reg;)",
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "10&ndash;20 mg",
        htmlText: "<b>10&ndash;20 mg</b>"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "40 (80) mg",
        htmlText: "<b>40 (80)</b> mg"
    }, {
        name: "High Intensity Dose",
        type: "dosehigh",
        value: "--",
        htmlText: "--"
    }, {
        name: "Other",
        type: "other",
        value: "Other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "1. 8"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "No"
    }, {
        name: "Optimal way to take Time of day Food required?",
        type: "timeofday",
        value: "Any time of day/evening - Food not required"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "No"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "Minimal CYP450 metabolism"
    }]
}, {
    id: "7",
    name: "Rosuvastatin (Crestor&reg;)",
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "--",
        htmlText: "--"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "(5) 10mg",
        htmlText: "<i>(5)</i> <b>10 mg</b>"
    }, {
        name: "High Intensity Dose",
        type: "dosehigh",
        value: "20 (40)mg",
        htmlText: "<b>20</b> <i>(40)</i> <b>mg</b>"
    }, {
        name: "Other",
        type: "other",
        value: "other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "19"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "No"
    }, {
        name: "Optimal Frequency",
        type: "timeofday",
        value: "Any time of day/evening - Food not required"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "No"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "Minimal CYP2C9"
    }]
}, {
    id: "8",
    name: "Simvastatin (Zocor&reg;)",
    alert: [{
        dose: "80",
        warning: "Simvastatin &ndash; Initiation at 80mg daily or increase of up to 80mg daily may cause harm (III,  A). "
    }],
    dose: [{
        name: "Low Intensity Dose",
        type: "doselow",
        value: "10 mg",
        htmlText: "<i>10 mg</i>"
    }, {
        name: "Moderate Intensity Dose",
        type: "dosemedium",
        value: "20-40** mg",
        htmlText: "<b>20-40<strong>**</strong> mg</b>"
    }, {
        name: "Other",
        type: "other",
        value: "other",
        htmlText: "Only the doses above are covered in Cholesterol Guideline"
    }],
    characteristics: [{
        name: "Half-life (h)",
        type: "halflife",
        value: "1. 9"
    }, {
        name: "Lipophilic?",
        type: "lipophilic",
        value: "Yes"
    }, {
        name: "Optimal Frequency",
        type: "timeofday",
        value: "Evening/bedtime - Food not required"
    }, {
        name: "P-glycoprotein substrate?",
        type: "pglycoprotein",
        value: "Yes"
    }, {
        name: "Pregnancy Category X",
        type: "pregnancy",
        value: "Yes"
    }, {
        name: "Primary Metabolism",
        type: "metabolism",
        value: "CYP3A4"
    }]
}];

var formData = {
    sex: [{
        label: "Male",
        value: "m"
    }, {
        label: "Female",
        value: "f"
    }],
    diabetic: [{
        label: "Yes",
        value: "true"
    }, {
        label: "No",
        value: "false"
    }],
    smoker: [{
        label: "Yes",
        value: "true"
    }, {
        label: "No",
        value: "false"
    }],
    hypertension: [{
        label: "Yes",
        value: "true"
    }, {
        label: "No",
        value: "false"
    }],
    infotext: {
        scorebar: {
            text: "Optimal risk factors include: Total cholesterol of ≤ 170 mg/dL (4.40 mmol/L), HDL-cholesterol of ≥ 50 mg/dL (1.30 mmol/L), Systolic BP of ≤ 110 mm Hg, Not taking medications for hypertension, Not a diabetic, Not a smoker"
        }
    },
    race: [{
        label: "White",
        value: "wh"
    }, {
        label: "African American",
        value: "aa"
    }, {
        label: "Other",
        value: "o"
    }],
    notifications: {
        blank: [{
            status: "",
            message: ""
        }],
        sex: [{
            status: "warning",
            message: "Sex is Missing"
        }],
        age: [{
            id: 0,
            status: "warning",
            message: "Age is Missing"
        }, {
            id: 1,
            status: "error",
            message: "Must enter age between 20-79 years"
        }, {
            id: 2,
            status: "highlighted",
            message: "This calculator only provides 10-year risk estimates for individuals 40 to 79 years of age."
        }, {
            id: 3,
            status: "highlighted",
            message: "Lifetime Risk Calculator only provides lifetime risk estimates for individuals 40 to 59 years of age."
        }],
        race: [{
            status: "warning",
            message: "Race is Missing"
        }, {
            status: "highlighted",
            message: "See the Estimate Warning below"
        }],
        totalCholesterol: [{
            status: "warning",
            message: "Total Cholesterol is Missing"
        }, {
            status: "error",
            message: "Must enter Total Cholesterol between 130 - 320 mg/dL"
        }, {
            status: "error",
            message: "Must enter Total Cholesterol between 3.367 - 8.288 mmol/L"
        }],
        hdlCholesterol: [{
            status: "warning",
            message: "HDL-Cholesterol is Missing"
        }, {
            status: "error",
            message: "Must enter HDL-Cholesterol between  20 - 100 mg/dL"
        }, {
            status: "error",
            message: "Must enter HDL-Cholesterol between 0.518 - 2.59 mmol/L"
        }],
        bloodPresure: [{
            status: "warning",
            message: "Systolic Blood Pressure is Missing"
        }, {
            status: "error",
            message: "Must enter Systolic Blood Pressure between 90-200 mm Hg"
        }],
        allData: [{
            status: "warning",
            message: "There is missing data. The inputs below have been highlighted."
        }, {
            status: "error",
            message: "There are errors on the page.  The inputs below have been highlighted."
        }],
        dbloodPresure: [{
            'status': 'warning',
            'message': 'Enter a value'
        }, {
            'status': 'warning',
            'message': 'Please enter a value between 60-130 mm Hg'
        }, {
            'status': 'error',
            'message': 'Please enter a value in the format xxx'
        }],
        allData: [{
            'status': 'warning',
            'message': 'There is missing data. The inputs below have been highlighted.'
        }, {
            'status': 'error',
            'message': 'There are errors on the page. The inputs below have been highlighted.'
        }],
        diabetic: [{
            status: "warning",
            message: "Diabetic is Missing"
        }],
        smoker: [{
            status: "warning",
            message: "Smoker is Missing"
        }],
        hypertension: [{
            status: "warning",
            message: "Treatment Hypertension is Missing"
        }]
    },
    recommendationText: {
        CASE_1: {
            title: "It may be reasonable to initiate moderate intensity statin therapy after clinician-patient discussion (IIb, C), continue statin therapy if already initiated (IIa, B), or stop statin therapy in circumstances that limit its potential benefit (IIb, B). ",
            tag: "",
            content: "",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><h5>Clinician-Patient Risk Discussion </h5><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li><li>A clinician patient risk discussion is recommended before initiating statin therapy to review net clinical benefit, weighing the potential for ASCVD risk reduction against the potential for statin-associated side effects, statin drug interactions and safety, yet emphasizing that side effects can be addressed successfully. (I,A)</li></ul><h5>Drug Therapy for Risk Reduction</h5><ul><li>In adults with diabetes older than 75 years of age, after a patient discussion of potential benefits and risks, it may be reasonable to initiate statin therapy. (IIb, C)</li><li>In adults > 75 years of age with LDL-C of 70 to 189 mg/dL (1.7 to 4.8 mmol/L), initiating a moderate- intensity statin may be reasonable. (IIb, B)</li><li>In adults with diabetes older than 75 years of age who are already on statin therapy, it is reasonable to continue statin therapy. (IIa, B)</li><li>In adults > 75 years of age, it may be reasonable to stop statin therapy when functional decline (physical or cognitive), multimorbidity, frailty or reduced life expectancy limit the potential benefits of statin therapy. (IIb, B)</li></ul><h5>Coronary Artery Calcium Score</h5><ul><li>In adults 76-80 years of age with LDL-C of 70 to 189 mg/dL (1.7 to 4.8 mmol/L), it may be reasonable to measure coronary artery calcium (CAC) to reclassify those with CAC = 0 to avoid statin therapy. (IIb, B)</li></ul>',
            email: "May be reasonable to initiate statin therapy after clinician-patient discussion or continue statin therapy if already initiated.  "
        },
        CASE_2: {
            title: "Conduct a clinical assessment and risk assessment. Moderate intensity statin may be reasonable if discussion deems benefits outweigh risks.",
            tag: "",
            content: "",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><h5>Clinician-Patient Risk Discussion</h5><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li><li>A clinician patient risk discussion is recommended before initiating statin therapy to review net clinical benefit, weighing the potential for ASCVD risk reduction against the potential for statin-associated side effects, statin drug interactions and safety, yet emphasizing that side effects can be addressed successfully. (I,A)</li></ul><h5>Drug Therapy for Risk Reduction</h5><ul><li>In adults > 75 years of age with LDL-C of 70 to 189 mg/dL (1.7 to 4.8 mmol/L), initiating a moderate- intensity statin may be reasonable. (IIb, B)</li><li>In adults > 75 years of age, it may be reasonable to stop statin therapy when functional decline (physical or cognitive), multimorbidity, frailty or reduced life expectancy limit the potential benefits of statin therapy. (IIb, B)</li></ul><h5>Coronary Artery Calcium Score</h5><ul><li>In adults 76-80 years of age with LDL-C of 70 to 189 mg/dL (1.7 to 4.8 mmol/L), it may be reasonable to measure coronary artery calcium (CAC) to reclassify those with CAC = 0 to avoid statin therapy. (IIb, B)</li></ul>',
            email: "Conduct a clinical assessment and risk assessment."
        },
        CASE_3: {
            title: "Emphasize lifestyle to reduce risk factors. ",
            tag: "",
            content: "",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li></ul>',
            email: "Emphasize lifestyle to reduce risk factors."
        },
        CASE_4: {
            title: "May consider moderate intensity statin for patients with LDL 70-189  mg/dL and risk-enhancing factors, after risk discussion. - (IIb, B)",
            tag: "",
            content: "<ul><li>ASCVD risk enhancers include family history of premature ASCVD; persistently elevated LDL-C ≥ 160 mg/dL; CKD; metabolic syndrome; conditions specific to women; inflammatory diseases; ethnicity factors; persistently elevated triglycerides (≥175-499 mg/mL); hs-CRP > 2.0 mg/L; Lp(a) levels > 50 mg/dL or > 125 mmol/L; apo B ≥ 130 mg/dL. See recommendations below for more details. </li><li>In selected patients, if the decision to use statins remains uncertain after risk assessment and discussion, it is reasonable to use a CAC score as part of the decision-making process. (IIa, B) </li></ul>",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><h5>Clinician-Patient Risk Discussion</h5><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li><li>A clinician-patient risk discussion is recommended before initiating statin therapy to review net clinical benefit, weighing the potential for ASCVD risk reduction against the potential for statin-associated side effects, statin-drug interactions and safety, yet emphasizing that side effects can be addressed successfully. (I,A)</li></ul><h5>Drug Therapy for Risk Reduction</h5><ul><li>In patients at borderline risk, in risk discussion, the presence of risk-enhancing may justify initiation of moderate-intensity statin therapy. (IIb, B)</li></ul><h5>Coronary Artery Calcium Score</h5><ul><li>In intermediate-risk or selected borderline-risk adults, if the decision about statin usage remains uncertain, it is reasonable to use a coronary artery calcium (CAC) score in the decision to withhold, postpone or initiate statin therapy. (IIa, B)</li><li>In intermediate-risk adults or selected borderline-risk adults in whom a CAC score  is measured for the purpose of making a treatment decision, AND <ul><li>If CAC=0, it is reasonable to withhold statin therapy and reassess in 5-10 years, as long as higher risk factors are absent (diabetes mellitus, family history of premature CHD, cigarette smoking);</li><li>If CAC= 1 to 99, it is reasonable to initiate statin therapy for patients ≥ 55 years of age;</li><li>If CAC≥ 100 or CAC ≥ 75th percentile, it is reasonable to initiate statin therapy.(IIa, B)</li></ul></li></ul><h5>Risk Modifying Factors</h5><ul><li>Clinicians should consider conditions specific to women such as premature menopause (age < 40 years) and history of pregnancy-associated disorders (hypertension, preeclampsia, gestational diabetes, small-for-gestational-age infants, pre-term deliveries); when discussing lifestyle intervention and the potential for benefit of statin therapy. (I,B)</li><li>For clinical decision-making in adults of different race/ethnicities, it is reasonable for clinicians to review race/ethnic features that can influence ASCVD risk so as to adjust choice of statin or intensity of treatment. (IIa, B)</li><li>In patients with heart failure with reduced ejection fraction due to ischemic heart disease who have a reasonable life expectancy (3-5 years) and are not already on a statin due to ASCVD, clinicians may consider initiation of moderate-intensity statin therapy to reduce the occurrence of ASCVD events. (IIb, B) </li></ul><h5>LDL-C < 70 mg/dL (<1.8 mmol/L)</h5><ul><li>For patients with LDL-C <70 mg/dL (<1.8 mmol/L), measurement of direct LDL-C or modified LDL-C estimate is reasonable to improve accuracy over the Friedewald formula (IIa, C)</li></ul>',
            email: "May consider moderate intensity statin in presence of risk-enhancing factors. "
        },
        CASE_5: {
            title: "Moderate intensity statin is recommended for patients with LDL-C 70-189 mg/dL (1.7 to 4.8 mmol/L) , if decided upon as part of a clinician-patient discussion. LDL-C should be reduced by at least 30%, (I,A)  ",
            tag: "",
            content: "<ul><li>Presence of risk enhancing factors or certain comorbidities favor statin initiation.</li><li>ASCVD risk enhancers include family history of premature ASCVD; persistently elevated LDL-C ≥ 160 mg/dL; CKD; metabolic syndrome; conditions specific to women; inflammatory diseases; ethnicity factors; persistently elevated triglycerides (≥175-499 mg/mL); hs-CRP > 2.0 mg/L; Lp(a) levels > 50 mg/dL or > 125 mmol/L; apo B ≥ 130 mg/dL. See recommendations below for more details. </li><li>If the decision to use statins remains uncertain after risk assessment and discussion, it is reasonable to use a CAC score as part of the decision-making process. (IIa, B) </li></ul>",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><h5>Clinician-Patient Risk Discussion</h5><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li><li>A clinician-patient risk discussion is recommended before initiating statin therapy to review net clinical benefit, weighing the potential for ASCVD risk reduction against the potential for statin-associated side effects, statin-drug interactions and safety, yet emphasizing that side effects can be addressed successfully. (I,A)</li></ul><h5>Drug Therapy for Risk Reduction</h5><ul><li>In adults at intermediate-risk, statin therapy reduces risk of ASCVD and in the context of a risk discussion, if a decision is made for statin therapy, a moderate-intensity statin should be recommended. (I,A)</li><li>In intermediate-risk adults, risk-enhancing factors favor initiation or intensification of statin therapy. (IIa, B)</li><li>In intermediate risk patients, LDL-C levels should be reduced by ≥30%, and for optimal ASCVD risk reduction, especially in high-risk patients, achieve LDL-C reductions of ≥50%. (I, A)</li><li>In intermediate-risk adults who would benefit from more aggressive LDL-C lowering and in whom high-intensity statins are advisable, but not acceptable or tolerated, it may be reasonable to add a non-statin drug (ezetimibe or bile acid sequestrant) to a moderate-intensity statin. (IIb, B)</li></ul><h5>Coronary Artery Calcium Score</h5><ul><li>In intermediate-risk or selected borderline-risk adults if the decision about statin usage remains uncertain, it is reasonable to use a coronary artery calcium (CAC) score in the decision to withhold, postpone or initiate statin therapy. (IIa, B)</li><li>In intermediate-risk adults or selected borderline-risk adults in whom a CAC score  is measured for the purpose of making a treatment decision, AND<ul><li>If CAC=0, it is reasonable to withhold statin therapy and reassess in 5-10 years, as long as higher risk factors are absent (diabetes mellitus, family history of premature CHD, cigarette smoking);</li><li>If CAC= 1 to 99, it is reasonable to initiate statin therapy for patients ≥ 55 years of age;</li><li>If CAC ≥ 100 or CAC ≥ 75th percentile, it is reasonable to initiate statin therapy. (IIa, B)</li></ul></li></ul><h5>Risk Modifying Factors</h5><ul><li>Clinicians should consider conditions specific to women such as premature menopause (age < 40 years) and history of pregnancy-associated disorders (hypertension, preeclampsia, gestational diabetes, small-for-gestational-age infants, preterm deliveries); when discussing lifestyle intervention and the potential for benefit of statin therapy. (I,B)</li><li>In adults 40-75 years and LDL-C 70-189 mg/dL (1.7 to 4.8 mmol/L)  at 10-year ASCVD risk ≥ 7.5%, chronic kidney disease not treated with dialysis or kidney transplantation, is a risk-enhancing factor and initiation of a moderate-intensity statin or moderate intensity statin combined with ezetimibe can be useful  (IIa, B) </li><li>In adults 40-75 years and LDL-C 70-189 mg/dL (1.7 to 4.8 mmol/L)  at 10-year ASCVD risk ≥ 7.5%, chronic inflammatory disorders or HIV, it can be useful in risk discussion to favor moderate intensity statin or high-intensity statin therapy. (IIa, B) </li><li>For clinical decision-making in adults of different race/ethnicities, it is reasonable for clinicians to review race/ethnic features that can influence ASCVD risk so as to adjust choice of statin or intensity of treatment. (IIa, B)</li><li>In patients with heart failure with reduced ejection fraction due to ischemic heart disease who have a reasonable life expectancy (3-5 years) and are not already on a statin due to ASCVD, clinicians may consider initiation of moderate-intensity statin therapy to reduce the occurrence of ASCVD events. (IIb, B)</li></ul><h5>Hypertriglyceridemia</h5><ul><li>In adults 40 to 75 years with moderate or severe hypertriglyceridemia and ASCVD risk ≥ 7.5%, it is reasonable to re-evaluate ASCVD risk after lifestyle and secondary factors are addressed, and consider a persistently elevated triglyceride level as a factor favoring initiation or intensification of statin therapy ( IIa, B)</li><li>In adults 40-75 years with severe hypertriglyceridemia (fasting triglycerides ≥ 500) and if ASCVD risk is ≥ 7.5%, it is reasonable to both address reversible causes of high triglyceride and initiate statin therapy. (IIa B)</li> <li>In adults with severe hypertriglyceridemia (fasting triglycerides ≥ 500 mg/dL(> 5.7 mmol/L) and especially fasting triglycerides ≥ 1000 mg/dL(11.3 mmol/L)), it is reasonable to identify and address other causes of hypertriglyceridemia; and if triglycerides are persistently elevated or increasing, to further reduce triglycerides using a very low fat diet, avoidance of refined carbohydrates and alcohol, omega-3 fatty acids and if necessary to prevent acute pancreatitis, fibrate therapy. (IIa, B)</li></ul><h5>LDL-C < 70 mg/dL (<1.8 mmol/L)</h5><ul><li>For patients with LDL-C <70 mg/dL (<1.8 mmol/L), measurement of direct LDL-C or modified LDL-C estimate is reasonable to improve accuracy over the Friedewald formula (IIa, C)</li></ul>',
            email: "Moderate intensity statin is recommended if decided upon as part of a clinician-patient discussion. "
        },
        CASE_6: {
            title: "Maximally-tolerated statin initiation is recommended for high risk patients with LDL-C 70-189 mg/dL. Risk reduction of LDL-C ≥ 50% is optimal. (I,A)",
            tag: "",
            content: "<ul><li>Presence of risk enhancing factors favor statin initiation or possibly intensification.</li><li>ASCVD risk enhancers include family history of premature ASCVD; persistently elevated LDL-C ≥ 160 mg/dL; CKD; metabolic syndrome; conditions specific to women; inflammatory diseases; ethnicity factors; persistently elevated triglycerides (≥175-499 mg/mL); hs-CRP > 2.0 mg/L; Lp(a) levels > 50 mg/dL or > 125 mmol/L; apo B ≥ 130 mg/dL. See recommendations below for more details. </li></ul>",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><h5>Clinician-Patient Risk Discussion</h5><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li><li>A clinician-patient risk discussion is recommended before initiating statin therapy to review net clinical benefit, weighing the potential for ASCVD risk reduction against the potential for statin-associated side effects, statin-drug interactions and safety, yet emphasizing that side effects can be addressed successfully. (I,A)</li></ul><h5>Drug Therapy for Risk Reduction</h5><ul><li>In intermediate risk patients, LDL-C levels should be reduced by ≥30%, and for optimal ASCVD risk reduction, especially in high-risk patients, achieve LDL-C reductions of ≥50%. (I, A)</li><li>If in the context of a risk discussion, maximal ASCVD risk reduction is desired, it is reasonable to use a high intensity statin to lower LDL-C by ≥50%. This provides increased benefit, especially when 10-year ASCVD risk is ≥20%. (Discussion text)</li></ul><h5>Risk Modifying Factors</h5><ul><li>Clinicians should consider conditions specific to women such as premature menopause (age < 40 years) and history of pregnancy-associated disorders (hypertension, preeclampsia, gestational diabetes, small-for-gestational-age infants, preterm deliveries) ; when discussing lifestyle intervention and the potential for benefit of statin therapy. (I,B)</li><li>For clinical decision-making in adults of different race/ethnicities, it is reasonable for clinicians to review race/ethnic features that can influence ASCVD risk so as to adjust choice of statin or intensity of treatment. (IIa, B)</li><li>In adults 40-75 years and LDL-C 70-189 mg/dL (1.7 to 4.8 mmol/L) at 10-year ASCVD risk ≥ 7.5%, chronic kidney disease not treated with dialysis or kidney transplantation, is a risk-enhancing factor and initiation of a moderate-intensity statin or moderate-intensity statin combined with ezetimibe can be useful. (IIa, B) </li><li>In adults 40-75 years of age with LDL-C 70-189 mg/dL (1.7 to 4.8 mmol/L) who have a 10-year ASCVD risk ≥7.5%, chronic inflammatory disorders or HIV, it can be useful in risk discussion to favor moderate intensity statin or high-intensity statin therapy. (IIa, B) </li><li>In patients with heart failure with reduced ejection fraction due to ischemic heart disease who have a reasonable life expectancy (3-5 years) and are not already on a statin due to ASCVD, clinicians may consider initiation of moderate-intensity statin therapy to reduce the occurrence of ASCVD events. (IIb, B) </li></ul><h5>Hypertriglyceridemia</h5><ul><li>In adults 40 to 75 years with moderate or severe hypertriglyceridemia and ASCVD risk ≥ 7.5%, it is reasonable to re-evaluate ASCVD risk after lifestyle and secondary factors are addressed, and consider a persistently elevated triglyceride level as a factor favoring initiation or intensification of statin therapy. (IIa B)</li><li>In adults 40-75 years with severe hypertriglyceridemia (fasting triglycerides ≥ 500) and if ASCVD risk is ≥ 7.5%, it is reasonable to both address reversible causes of high triglycerides and to initiate statin therapy.( IIa, B)</li><li>In adults with severe hypertriglyceridemia (fasting triglycerides ≥ 500 mg/dL (>5.7 mmol/L)  and especially, when triglycerides ≥ 1000 mg/dL(11.3 mmol/L)), it is reasonable to identify and address other causes of hypertriglyceridemia; and if triglycerides are persistently elevated or increasing, to further reduce triglycerides using a very low fat diet, avoidance of refined carbohydrates and alcohol, omega-3 fatty acids and if necessary to prevent acute pancreatitis, fibrate therapy. (IIa, B)</li></ul><h5>LDL-C < 70 mg/dL (<1.8 mmol/L)</h5><ul><li>For patients with LDL-C <70 mg/dL (<1.8 mmol/L), measurement of direct LDL-C or modified LDL-C estimate is reasonable to improve accuracy over the Friedewald formula (IIa, C)</li></ul>',
            email: "Maximally-tolerated statin initiation is recommended to reduce LDL-C ≥ 50%. "
        },
        CASE_7: {
            title: "Statin initiation is indicated in the context of a clinician-patient risk discussion (I, A). Statin intensity may depend on presence of additional risk factors. ",
            tag: "",
            content: "<ul><li>Initiating a moderate intensity statin is indicated for diabetes patients without multiple risk factors. (I,A)</li><li>If diabetes patient has multiple ASCVD risk factors, high intensity statin is reasonable to reduce LDL-C by at least 50%. (IIa, B)</li><li>In addition to generally applicable risk factors, diabetes-specific risk enhancers include long duration (≥10 years for T2D or ≥ 20 year for T1D; albuminuria ≥ 30 mcg albumin/mg creatinine; eGFR <60 ml/min/m<sup>2</sup>; retinopathy; and neuropathy.</li></ul>",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><h5>Clinician-Patient Risk Discussion</h5><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li><li>A clinician-patient risk discussion is recommended before initiating statin therapy to review net clinical benefit, weighing the potential for ASCVD risk reduction against the potential for statin-associated side effects, statin-drug interactions and safety, yet emphasizing that side effects can be addressed successfully. (I,A)</li></ul><h5>Drug Therapy for Risk Reduction</h5><ul><li>In adults 40 to 75 years of age with diabetes, regardless of estimated 10-year ASCVD risk, moderate intensity statins therapy is indicated. (I,A)</li><li>In patients with diabetes who have multiple ASCVD risk factors, it is reasonable to prescribe high-intensity statin therapy to reduce LDL-C by 50% or more. (IIa, B)</li></ul><h5>Risk Modifying Factors</h5><ul><li>Clinicians should consider conditions specific to women such as premature menopause (age < 40 years) and history of pregnancy-associated disorders (hypertension, preeclampsia, gestational diabetes, small-for-gestational-age infants, preterm deliveries), when discussing lifestyle intervention and the potential for benefit of statin therapy. (I,B)</li><li>For clinical decision-making in adults of different race/ethnicities, it is reasonable for clinicians to review race/ethnic features that can influence ASCVD risk so as to adjust choice of statin or intensity of treatment. (IIa, B)</li></ul>',
            email: "Statin initiation is indicated in the context of a clinician-patient risk discussion. "
        },
        CASE_8: {
            title: "Statin initiation is indicated in the context of a clinician-patient risk discussion (I, A). Statin intensity may depend on presence of additional risk factors. It is reasonable to add ezetimibe to reduce LDL-C ≥ 50%. (IIb, C)",
            tag: "",
            content: "<ul><li>Initiating a moderate intensity statin is indicated for diabetes patients with no multiple ASCVD risk factors. (I,A)</li><li>If diabetes patient has multiple ASCVD risk factors, high intensity statin is reasonable to reduce LDL-C by at least ≥ 30% and optimally by at least 50%. (IIa, B)</li><li>When ASCVD risk is > 20%, it is reasonable to add ezetimibe to reduce LDL-C ≥ 50%. (IIb, C)</li><li>In addition to generally applicable risk factors, diabetes-specific risk enhancers include long duration (≥10 years for T2D or ≥ 20 year for T1D; albuminuria ≥ 30 mcg albumin/mg creatinine; eGFR <60 ml/min/m<sup>2</sup>; retinopathy; and neuropathy.</li></ul>",
            guidelines: '<h2> 2018 Cholesterol Guideline Recommendations</h2><h5>Clinician-Patient Risk Discussion</h5><ul><li>Clinicians and patients should engage in a risk discussion that considers risk factors, adherence to healthy lifestyle, the potential for ASCVD risk-reduction benefits and the potential for adverse effects and drug–drug interactions, as well as patient preferences for an individualized treatment decision. (I,B)</li><li>A clinician patient risk discussion is recommended before initiating statin therapy to review net clinical benefit, weighing the potential for ASCVD risk reduction against the potential for statin-associated side effects, statin drug interactions and safety, yet emphasizing that side effects can be addressed successfully.  (I,A)</li></ul><h5>Drug Therapy for Risk Reduction</h5><ul><li>In adults 40 to 75 years of age with diabetes, regardless of estimated 10-year ASCVD risk, moderate intensity statins therapy is indicated. (I,A)</li><li>In patients with diabetes who have multiple ASCVD risk factors, it is reasonable to prescribe high-intensity statin therapy to reduce LDL-C by at least 50%. (IIa, B)</li><li>In adults with diabetes and 10-year ASCVD risk > 20%, it is reasonable to add ezetimibe to maximum tolerated statin therapy to reduce LDL-C by ≥50%. (IIB, C)</li></ul><h5>Risk Modifying Factors</h5><ul><li>Clinicians should consider conditions specific to women such as premature menopause (age < 40 years)  and history of pregnancy-associated disorders (hypertension, preeclampsia, gestational diabetes, small-for-gestational age infants, preterm deliveries); when discussing lifestyle intervention and the potential for benefit of statin therapy. (I,B)</li><li>For clinical decision-making in adults of different ethnicities, it is reasonable for clinicians to review ethnic features that can influence ASCVD risk so as to adjust choice of statin or intensity of treatment. (IIa, B)</li><li>In adults 40-75 years who have LDL-C 70-189 mg/dL (1.7 to 4.8 mmol/L) and 10-year ASCVD risk ≥7.5%, chronic kidney disease not treated with dialysis or kidney transplantation, is a risk-enhancing factor and initiation of a moderate-intensity statin or moderate-intensity statins combined with ezetimibe can be useful. (IIa, B)</li><li>In adults 40-75 years who have LDL-C 70-189 mg/dL (1.7 to 4.8 mmol/L) and 10-year ASCVD risk ≥7.5%, chronic inflammatory disorders or HIV, it can be useful in risk discussion to favor moderate intensity statin or high-intensity statin therapy. (IIa, B)</li><li>In patients with heart failure with reduced ejection fraction due to ischemic heart disease who have a reasonable life expectancy (3-5 years) and are not already on a statin due to ASCVD, clinicians may consider initiation of moderate-intensity statin therapy to reduce the occurrence of ASCVD events. (IIb, B) </li></ul><h5>Hypertriglyceridemia</h5><ul><li>In adults 40 to 75 years with moderate or severe hypertriglyceridemia and ASCVD risk ≥7.5%, it is reasonable to re-evaluate ASCVD risk after lifestyle and secondary factors are addressed, and consider a persistently elevated triglyceride level as a factor favoring initiation or intensification of statin therapy.  (IIa, B)</li><li>In adults 40-75 years with severe hypertriglyceridemia (fasting triglycerides ≥500) and if ASCVD risk is ≥ 7.5%, it is reasonable to both address reversible causes of high triglyceride and to initiate statin therapy.( IIa, B)</li><li>In adults with severe hypertriglyceridemia (fasting triglycerides ≥ 500 mg/dL (> 5.7 mmol/L) and especially, when triglycerides ≥ 1000 mg/dL (11.3 mmol/L)), it is reasonable to identify and address other causes of hypertriglyceridemia; and if triglycerides are persistently elevated or increasing, to further reduce triglycerides using a very low fat diet, avoidance of refined carbohydrates and alcohol, omega-3 fatty acids and if necessary to prevent acute pancreatitis, fibrate therapy. (IIa, B)</li></ul>',
            email: "Statin initiation is indicated in the context of a clinician-patient risk discussion. "
        },
        CASE_9: {
            title: "See key suggestions below for LDL-C management in young adults 20-39.",
            tag: "",
            content: '<ul><li><b>In patients without phenotypically severe hypercholesterolemia: </b><br/> -	Expert consensus discussion suggests beginning risk assessment by estimating lifetime risk. Multiple risk factors indicate lifestyle intervention.</li> <li><b>In patients with persistent, moderate hypercholesterolemia (LDL-C 160-189 mg/dL (4.1-4.8 mmol/L)):</b> <br/> -	Expert consensus discussion suggests that lifestyle intervention is indicated, and long-term statin therapy would be beneficial, especially for those with other risk enhancing factors.</li><li><b>In patients with severe hypercholesterolemia (LDL-C >190 mg/dL (≥4.9 mmol/L)): </b><br/> -	Expert consensus discussion suggests lifestyle intervention is indicated. <br/> -	Guideline also recommends maximally tolerated therapy statin therapy.  (I, B)<br/>-	If recommended LDL-C reduction of > 50% is not achieved, then possible addition of non-statin therapies is also recommended. </li> <li><b>In patients with diabetes either of long duration (≥10 years of T2D, ≥20 years of T1D), and/or albuminuria (≥30 mcg albumin/mg creatinine), eGFR <60 ml/min/m², retinopathy, neuropathy: </b><br/> -	Expert consensus discussion suggests lifestyle intervention is indicated. <br/> -	Guideline recommends that it may be reasonable to initiate statin therapy. (IIb, C)</li> </ul>',
            email: "Not In A Statin Benefit Group Due To Age <40 Years "
        }
    }
};

function formObject(data) {
    var self = this;
    self.$debug = false;
    self.Race = ko.observable();
    self.Age = ko.observable();
    self.Sex = ko.observable();
    self.HDLCholesterolValue = ko.observable();
    self.TotalCholesterolValue = ko.observable();
    self.BloodPressure = ko.observable();
    self.DBloodPressure = ko.observable();
    self.Diabetic = ko.observable();
    self.Smoker = ko.observable();
    self.Hypertension = ko.observable();
    self.UnitOfMeasure = ko.observable(false);
    self.UOMChange = function (newValue) {
        var type = newValue == true ? "si" : "us";
        var hdl = self.HDLCholesterolValue();
        var totc = self.TotalCholesterolValue();
        var m = .0259;
        if (newValue) {
            if (hdl != null) self.HDLCholesterolValue((hdl * m).toFixed(4));
            if (totc != null) self.TotalCholesterolValue((totc * m).toFixed(4));
        } else {
            if (hdl != null) self.HDLCholesterolValue((hdl / m).toFixed(0));
            if (totc != null) self.TotalCholesterolValue((totc / m).toFixed(0));
        }
        sessionStorage.setItem("v2uom", newValue);
    };
    self.UOMAction = function () {
        self.UOMChange(self.UnitOfMeasure());
        return true;
    };
    self.HDLCholesterolValue.subscribe(function (newValue) {
        sessionStorage.setItem("v2hdlc", newValue);
    });
    self.TotalCholesterolValue.subscribe(function (newValue) {
        sessionStorage.setItem("v2totalc", self.TotalCholesterolValue());
    });
    self.HDLCholesterol = ko.pureComputed(function () {
        var i = self.HDLCholesterolValue();
        var m = self.UnitOfMeasure() ? .0259 : 1;
        var value = i / m;
        return value;
    }, self);
    self.TotalCholesterol = ko.pureComputed(function () {
        var i = self.TotalCholesterolValue();
        var m = self.UnitOfMeasure() ? .0259 : 1;
        var value = i / m;
        return value;
    }, self);
    self.Age.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2age", newValue);
    });
    self.Sex.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2sex", newValue);
    });
    self.Race.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2race", newValue);
    });
    self.BloodPressure.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2bloodpressure", newValue);
    });
    self.DBloodPressure.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2DBpressure", newValue);
    });//code added for DB changes
    self.Diabetic.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2diabetic", newValue);
    }); //code for diabetes
    self.Smoker.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2smoker", newValue);
    });
    self.Hypertension.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
        sessionStorage.setItem("v2hypertension", newValue);
    });
    self.HDLCholesterol.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
    });
    self.TotalCholesterol.subscribe(function (newValue) {
        self.TenYearRiskCalculations();
    });

    self.computedValuesAvailable = ko.pureComputed(function () {
        if (self.Sex() && self.Age() != null && self.Age() >= 40 && self.Age() <= 79 && self.Race() && self.HDLCholesterol() != null && self.HDLCholesterol() >= 20 && self.HDLCholesterol() <= 100 && self.BloodPressure() != null && self.BloodPressure() >= 90 && self.BloodPressure() <= 200 && self.TotalCholesterol() != null && self.TotalCholesterol() >= 130 && self.TotalCholesterol() <= 320 && (self.Diabetic() != null || self.Diabetic() != undefined) && (self.Smoker() != null || self.Smoker() != undefined) && (self.Hypertension() != null || self.Hypertension() != undefined)) {
            return true;
        } else {
            return false;
        }
    }, self);
    self.isRealNumber = function ($object) {
        if (!isNaN($object) && $object != null && $object) {
            return true;
        }
        return false;
    };
    self.isAfrican = function () {
        var i = false;
        if (self.Race() == "African American") i = true;
        return i;
    };
    self.isMale = function () {
        var i = false;
        if (self.Sex() == "Male") i = true;
        return i;
    };
    self.isFemale = function () {
        var i = false;
        if (self.Sex() == "Female") i = true;
        return i;
    };
    self.isDiabetic = function () {
        var i = false;
        if (self.Diabetic() == "Yes") i = true;
        return i;
    };
    self.isSmoker = function () {
        var i = false;
        if (self.Smoker() == "Yes") i = true;
        return i;
    };
    self.isHypertension = function () {
        var i = false;
        if (self.Hypertension() == "Yes") i = true;
        return i;
    };
    self.AgeConverted = function () {
        return Math.log(self.Age());
    };
    self.AgeSquared = function () {
        return self.AgeConverted() * self.AgeConverted();
    };
    self.HDLCholesterolConverted = function () {
        return Math.log(self.HDLCholesterol());
    };
    self.TotalCholesterolConverted = function () {
        return Math.log(self.TotalCholesterol());
    };
    self.agetc = function () {
        return self.TotalCholesterolConverted() * self.AgeConverted();
    };
    self.agehdl = function () {
        return self.HDLCholesterolConverted() * self.AgeConverted();
    };
    self.agetsbp = function () {
        return self.AgeConverted() * self.trlnsbp();
    };
    self.agentsbp = function () {
        return self.AgeConverted() * self.ntlnsbp();
    };
    self.trlnsbp = function () {
        return Math.log(self.BloodPressure()) * Number(self.isHypertension());
    };
    self.ntlnsbp = function () {
        return Math.log(self.BloodPressure()) * Number(!self.isHypertension());
    };
    self.agesmoke = function () {
        return self.AgeConverted() * Number(self.isSmoker());
    };
    self.agedm = function () {
        return self.AgeConverted() * Number(self.isDiabetic);
    };
    self.opt_hdl = function () {
        return Math.log(50);
    };
    self.opt_tc = function () {
        return Math.log(170);
    };
    self.opt_agetc = function () {
        return self.opt_tc() * self.AgeConverted();
    };
    self.opt_agehdl = function () {
        return self.opt_hdl() * self.AgeConverted();
    };
    self.opt_agetsbp = function () {
        return self.AgeConverted() * self.opt_trlnsbp();
    };
    self.opt_agentsbp = function () {
        return self.AgeConverted() * self.opt_ntlnsbp();
    };
    self.opt_trlnsbp = function () {
        return Math.log(110) * Number(false);
    };
    self.opt_ntlnsbp = function () {
        return Math.log(110) * Number(!false);
    };
    self.otp_agesmoke = function () {
        return self.AgeConverted() * Number(false);
    };
    self.opt_agedm = function () {
        return self.AgeConverted() * Number(false);
    };
    self.s010 = function () {
        var i;
        if (self.isAfrican() && self.isFemale()) i = .95334;
        if (!self.isAfrican() && self.isFemale()) i = .96652;
        if (self.isAfrican() && self.isMale()) i = .89536;
        if (!self.isAfrican() && self.isMale()) i = .91436;
        return i;
    };
    self.mnxb = function () {
        var i;
        if (self.isAfrican() && self.isFemale()) i = 86.6081;
        if (!self.isAfrican() && self.isFemale()) i = -29.1817;
        if (self.isAfrican() && self.isMale()) i = 19.5425;
        if (!self.isAfrican() && self.isMale()) i = 61.1816;
        return i;
    };
    self.predictCalculate = function () { //logic includes diabetes values for 10 year ascvd risk calculator
        var i;
        if (self.isAfrican() && self.isFemale()) i = 17.1141 * self.AgeConverted() + .9396 * self.TotalCholesterolConverted() + -18.9196 * self.HDLCholesterolConverted() + 4.4748 * self.agehdl() + 29.2907 * self.trlnsbp() + -6.4321 * self.agetsbp() + 27.8197 * self.ntlnsbp() + -6.0873 * self.agentsbp() + .6908 * Number(self.isSmoker()) + .8738 * Number(self.isDiabetic());
        if (!self.isAfrican() && self.isFemale()) i = -29.799 * self.AgeConverted() + 4.884 * (self.AgeConverted() * self.AgeConverted()) + 13.54 * self.TotalCholesterolConverted() + -3.114 * self.agetc() + -13.578 * self.HDLCholesterolConverted() + 3.149 * self.agehdl() + 2.019 * self.trlnsbp() + 1.957 * self.ntlnsbp() + 7.574 * Number(self.isSmoker()) + -1.665 * self.agesmoke() + .661 * Number(self.isDiabetic());
        if (self.isAfrican() && self.isMale()) i = 2.469 * self.AgeConverted() + .302 * self.TotalCholesterolConverted() + -.307 * self.HDLCholesterolConverted() + 1.916 * self.trlnsbp() + 1.809 * self.ntlnsbp() + .549 * Number(self.isSmoker()) + .645 * Number(self.isDiabetic());
        if (!self.isAfrican() && self.isMale()) i = 12.344 * self.AgeConverted() + 11.853 * self.TotalCholesterolConverted() + -2.664 * self.agetc() + -7.99 * self.HDLCholesterolConverted() + 1.769 * self.agehdl() + 1.797 * self.trlnsbp() + 1.764 * self.ntlnsbp() + 7.837 * Number(self.isSmoker()) + -1.795 * self.agesmoke() + .658 * Number(self.isDiabetic());
        return i;
    };
    self.optimalPredictCalculate = function () {
        var i;
        if (self.isAfrican() && self.isFemale()) i = 17.1141 * self.AgeConverted() + .9396 * self.opt_tc() + -18.9196 * self.opt_hdl() + 4.4748 * self.opt_agehdl() + 29.2907 * self.opt_trlnsbp() + -6.4321 * self.opt_agetsbp() + 27.8197 * self.opt_ntlnsbp() + -6.0873 * self.opt_agentsbp() + .6908 * Number(false) + .8738 * Number(false);
        if (!self.isAfrican() && self.isFemale()) i = -29.799 * self.AgeConverted() + 4.884 * self.AgeSquared() + 13.54 * self.opt_tc() + -3.114 * self.opt_agetc() + -13.578 * self.opt_hdl() + 3.149 * self.opt_agehdl() + 2.019 * self.opt_trlnsbp() + 1.957 * self.opt_ntlnsbp() + 7.574 * Number(false) + -1.665 * self.otp_agesmoke() + .661 * Number(false);
        if (self.isAfrican() && self.isMale()) i = 2.469 * self.AgeConverted() + .302 * self.opt_tc() + -.307 * self.opt_hdl() + 1.916 * self.opt_trlnsbp() + 1.809 * self.opt_ntlnsbp() + .549 * Number(false) + .645 * Number(false);
        if (!self.isAfrican() && self.isMale()) i = 12.344 * self.AgeConverted() + 11.853 * self.opt_tc() + -2.664 * self.opt_agetc() + -7.99 * self.opt_hdl() + 1.769 * self.opt_agehdl() + 1.797 * self.opt_trlnsbp() + 1.764 * self.opt_ntlnsbp() + 7.837 * Number(false) + -1.795 * self.otp_agesmoke() + .658 * Number(false);
        return i;
    };
    self.TenYearRiskCalculations = function () {
        var valuesAvailable = false;
        if (self.Sex() && self.Age() && self.Age() >= 40 && self.Age() <= 79 && self.Race() && self.HDLCholesterol() && self.HDLCholesterol() >= 20 && self.HDLCholesterol() <= 100 && self.BloodPressure() && self.BloodPressure() >= 90 && self.BloodPressure() <= 200 && self.TotalCholesterol() && self.TotalCholesterol() >= 130 && self.TotalCholesterol() <= 320 && (self.Diabetic() != null || self.Diabetic() != undefined) && (self.Smoker() != null || self.Smoker() != undefined) && (self.Hypertension() != null || self.Hypertension() != undefined)) {
            valuesAvailable = true;
        }
        if (valuesAvailable) {
            self.predict(self.predictCalculate()); //to check diabetes in 10 year calc
            self.optimalPredict(self.optimalPredictCalculate()); //to check diabetes in 10 year OPTIMAL calc
        } else {
            self.predict(null);
            self.optimalPredict(null);
        }
    };
    self.predict = ko.observable();
    self.optimalPredict = ko.observable();
    self.cvdPredict = ko.pureComputed(function () { //LHS Score
        if (self.computedValuesAvailable()) {
            return 1 - Math.pow(this.s010(), Math.exp(this.predict() - this.mnxb()));
        }
        return NaN;
    }, self);
    self.optimalCvdPredict = ko.pureComputed(function () { //LHS Score

        if (self.computedValuesAvailable()) {
            return i = 1 - Math.pow(this.s010(), Math.exp(this.optimalPredict() - this.mnxb()));
        }
        return NaN;
    }, self);
    self.TenYearRisk = ko.pureComputed(function () {
        
        var i = "~%";
        if (self.cvdPredict() != 1 && !isNaN(self.cvdPredict())) {
            var number = self.cvdPredict() * 100;
            i = number.toFixed(1) + "%";
        }
        return i;
    }, self);
    self.TenYearOptimal = ko.pureComputed(function () {
        var i = "~%";
        if (self.optimalCvdPredict() != 1 && !isNaN(self.optimalCvdPredict())) {
            var number = self.optimalCvdPredict() * 100;
            i = number.toFixed(1) + "%";
        }
        return i;
    }, self);
    self.major = ko.computed(function () {
        var tc = self.TotalCholesterol();
        var bp = self.BloodPressure();
        var dbp = self.DBloodPressure();
        if (self.TotalCholesterol() == "")
            tc = undefined;
        if (self.BloodPressure() == "")
            bp = undefined;
        if (self.DBloodPressure() == "")
            dbp = undefined;

        var i = (tc >= 240 ? 1 : 0) + (bp >= 160 ? 1 : 0) + (dbp >= 100 ? 1 : 0) + (self.isHypertension() ? 1 : 0) + (self.isSmoker() ? 1 : 0) + (self.isDiabetic() ? 1 : 0);
        return i;
    }, self);
    self.elevated = ko.computed(function () {
        var tc = self.TotalCholesterol();
        var bp = self.BloodPressure();
        var dbp = self.DBloodPressure();
        if (self.TotalCholesterol() == "")
            tc = undefined;
        if (self.BloodPressure() == "")
            bp = undefined;
        if (self.DBloodPressure() == "")
            dbp = undefined;

        var i = ((tc >= 200 && tc < 240 ? 1 : 0) + (dbp >= 90 && dbp < 100 ? 1 : 0) + (bp >= 140 && bp < 160 && self.isHypertension() == false ? 1 : 0) >= 1 ? 1 : 0) * (self.major() == 0 ? 1 : 0);
        return i;
    }, self);
    self.allOptimal = ko.computed(function () {
        var tc = self.TotalCholesterol();
        var bp = self.BloodPressure();
        var dbp = self.DBloodPressure();
        if (self.TotalCholesterol() == "")
            tc = undefined;
        if (self.BloodPressure() == "")
            bp = undefined;
        if (self.DBloodPressure() == "")
            dbp = undefined;
        var i;
        i = ((tc < 180 ? 1 : 0) + (bp < 120 ? 1 : 0) + (dbp < 80 ? 1 : 0) * (self.isHypertension() ? 0 : 1) == 3 ? 1 : 0) * (self.major() == 0 ? 1 : 0);
        return i;
    }, self);
    self.notOptimal = ko.computed(function () {
        var tc = self.TotalCholesterol();
        var bp = self.BloodPressure();
        var dbp = self.DBloodPressure();
        if (self.TotalCholesterol() == "")
            tc = undefined;
        if (self.BloodPressure() == "")
            bp = undefined;
        if (self.DBloodPressure() == "")
            dbp = undefined;

        var i = ((tc >= 180 && tc < 200 ? 1 : 0) + (dbp >= 80 && dbp < 100 ? 1 : 0) + (bp >= 120 && bp < 140 && self.isHypertension() == false ? 1 : 0)) * (self.elevated() == 0 ? 1 : 0) * (self.major() == 0 ? 1 : 0) >= 1 ? 1 : 0;

        return i;
    }, self);
    self.lifeTimeRisk = ko.pureComputed(function () { //tbd
        i = "~%";
        if (self.Sex() != null || self.Sex() != undefined || self.Race() != null || self.Race() != undefined) {
            i = self.Sex() == "Male" ? "5%" : "8%";
        }
        return i;
    }, self);
    //yourLifeTimeRisk code for DB requirement changes
    self.yourLifeTimeRisk = ko.pureComputed(function () {
        var i = "~";
        if (self.computedValuesAvailable()) {
            if (self.major() > 1) i = self.lookupASCVD("major2");
            if (self.major() == 1) i = self.lookupASCVD("major1");
            if (self.elevated() == 1) i = self.lookupASCVD("elevated");
            if (self.notOptimal() == 1) i = self.lookupASCVD("notOptimal");
            if (self.allOptimal() == 1) i = self.lookupASCVD("allOptimal");
        }
        return `${i}%`;//i + "%";
    }, self);
    self.lookupASCVD = function (category) {
        if (self.Sex()) return eval("self.ascvdTable." + self.Sex().toLowerCase() + "." + category + "");
        return "~";
    };
    self.ascvdTable = {
        female: {
            major2: 50,
            major1: 39,
            elevated: 39,
            notOptimal: 27,
            allOptimal: 8
        },
        male: {
            major2: 69,
            major1: 50,
            elevated: 46,
            notOptimal: 36,
            allOptimal: 5
        }
    };
    self.appStorage = function () {
        isSession = false;
        if (sessionStorage.getItem("v2age") != "" && sessionStorage.getItem("v2age") !== null && sessionStorage.getItem("v2age") != "null" && sessionStorage.getItem("v2age") != "undefined") {
            self.Age(sessionStorage.getItem("v2age"));
        }
        if (sessionStorage.getItem("v2sex") != "" && sessionStorage.getItem("v2sex") !== null && sessionStorage.getItem("v2sex") != "null" && sessionStorage.getItem("v2sex") != "undefined") {
            self.Sex(sessionStorage.getItem("v2sex"));
        }
        if (sessionStorage.getItem("v2race") != "" && sessionStorage.getItem("v2race") !== null && sessionStorage.getItem("v2race") != "null" || sessionStorage.getItem("v2race") != "undefined") {
            self.Race(sessionStorage.getItem("v2race"));
        }
        if (sessionStorage.getItem("v2totalc") != "" && sessionStorage.getItem("v2totalc") !== null && sessionStorage.getItem("v2totalc") != "null" && sessionStorage.getItem("v2totalc") != "undefined") {
            self.TotalCholesterolValue(sessionStorage.getItem("v2totalc"));
        }
        if (sessionStorage.getItem("v2hdlc") != "" && sessionStorage.getItem("v2hdlc") !== null && sessionStorage.getItem("v2hdlc") != "null" && sessionStorage.getItem("v2hdlc") != "undefined") {
            self.HDLCholesterolValue(sessionStorage.getItem("v2hdlc"));
        }
        if (sessionStorage.getItem("v2bloodpressure") != "" && sessionStorage.getItem("v2bloodpressure") !== null && sessionStorage.getItem("v2bloodpressure") != "null" && sessionStorage.getItem("v2bloodpressure") != "undefined") {
            self.BloodPressure(sessionStorage.getItem("v2bloodpressure"));
        }
        if (sessionStorage.getItem("v2DBpressure") != "" && sessionStorage.getItem("v2DBpressure") !== null && sessionStorage.getItem("v2DBpressure") != "null" && sessionStorage.getItem("v2DBpressure") != "undefined") {
            self.DBloodPressure(sessionStorage.getItem("v2DBpressure")); //added code for DB changes
        }
        if (sessionStorage.getItem("v2diabetic") != "" && sessionStorage.getItem("v2diabetic") !== null && sessionStorage.getItem("v2diabetic") != "null" && sessionStorage.getItem("v2diabetic") != "undefined") {
            self.Diabetic(sessionStorage.getItem("v2diabetic")); //code for diabetes
        }
        if (sessionStorage.getItem("v2smoker") != "" && sessionStorage.getItem("v2smoker") !== null && sessionStorage.getItem("v2smoker") != "null" && sessionStorage.getItem("v2smoker") != "undefined") {
            self.Smoker(sessionStorage.getItem("v2smoker"));
        }
        if (sessionStorage.getItem("v2hypertension") != "" && sessionStorage.getItem("v2hypertension") !== null && sessionStorage.getItem("v2hypertension") != "null" && sessionStorage.getItem("v2hypertension") != "undefined") {
            self.Hypertension(sessionStorage.getItem("v2hypertension"));
        }
        if (sessionStorage.getItem("v3uom") !== null && sessionStorage.getItem("v3uom") !== "" && sessionStorage.getItem("v2uom") !== sessionStorage.getItem("v3uom")) {
            sessionStorage.setItem("v2uom", sessionStorage.getItem("v3uom"));
            if (sessionStorage.getItem("v2uom") === "true") {
                self.UnitOfMeasure(true);
            } else {
                self.UnitOfMeasure(false);
            }
            self.UOMChange(self.UnitOfMeasure());
        } else if (sessionStorage.getItem("v2uom") === "true") {
            self.UnitOfMeasure(true);
        } else {
            self.UnitOfMeasure(false);
        }
        isSession = true;
    };
    if (sessionStorage.length != 0) {
        var UnitOfMeasureSession;
        if (performance.navigation !== undefined) {
            if (performance.navigation.type == 0 || performance.navigation.type == 2) {
                self.appStorage();
            } else {
                UnitOfMeasureTypeSession = sessionStorage.getItem("v2uom");
                if (sessionStorage.getItem("v2uom") === "true") {
                    UnitOfMeasureSession = true;
                } else {
                    UnitOfMeasureSession = false;
                }
                sessionStorage.clear();
                sessionStorage.setItem("v2uom", UnitOfMeasureTypeSession);
                self.UnitOfMeasure(UnitOfMeasureSession);
            }
        }
    }
}

function viewModel() {
    var self = this;
    self.hideSplash = ko.observable(false);
    self.doNotShowAgainVisible = ko.observable(true);
    self.$debug = true;
    self.FormData = formData;
    self.AppData = appData;
    self.Statins = ko.observableArray(statins);
    self.Glossary = glossary;
    self.glossaryItems = ko.observableArray();
    for (var i in self.Glossary) {
        self.glossaryItems.push(self.Glossary[i]);
    }
    self.glossaryQuery = ko.observable("");
    self.Form = ko.observable(new formObject());
    self.glossaryQuery.subscribe(function (value) {
        self.glossaryItems.removeAll();
        for (var i in self.Glossary) {
            if (self.Glossary[i].label.toLowerCase().indexOf(value.toLowerCase()) >= 0) {
                self.glossaryItems.push(self.Glossary[i]);
            }
        }
    });
    self.validate = ko.observable(false);
    self.sexValidation = ko.pureComputed(function () {
        if (self.Form().Sex() == null && self.validate() == true) {
            return self.FormData.notifications.sex[0];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);
    self.diabeticValidation = ko.pureComputed(function () {
        if (self.Form().Diabetic() == null && self.validate() == true) {
            return self.FormData.notifications.diabetic[0];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);
    self.smokerValidation = ko.pureComputed(function () {
        if (self.Form().Smoker() == null && self.validate() == true) {
            return self.FormData.notifications.smoker[0];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);
    self.hypertensionValidation = ko.pureComputed(function () {
        if (self.Form().Hypertension() == null && self.validate() == true) {
            return self.FormData.notifications.hypertension[0];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);
    self.ageValidation = ko.pureComputed(function () {
        if (self.Form().Age() == null && self.validate() == true) {
            return self.FormData.notifications.age[0];
        } else if (self.Form().Age() != null && (self.Form().Age() > 79 || self.Form().Age() < 20)) {
            return self.FormData.notifications.age[1];
        } else if (self.Form().Age() != null && self.Form().Age() >= 20 && self.Form().Age() < 40) {
            return self.FormData.notifications.age[2];
        } else if (self.Form().Age() != null && self.Form().Age() > 59 && self.Form().Age() <= 79) {
            return self.FormData.notifications.age[3];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);
    self.raceValidation = ko.pureComputed(function () {
        if (self.Form().Race() == null && self.validate() == true) {
            return self.FormData.notifications.race[0];
        } else if (self.Form().Race() != null && self.Form().Race() == "Other") {
            return self.FormData.notifications.race[1];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);
    self.hdlValidation = ko.pureComputed(function () {
        var i = self.FormData.notifications.blank[0];
        if (isNaN(self.Form().HDLCholesterol()) && self.validate() == true) {
            i = self.FormData.notifications.hdlCholesterol[0];
        } else if (self.Form().HDLCholesterol() != null && (self.Form().HDLCholesterol() < 20 || self.Form().HDLCholesterol() > 100)) {
            i = self.Form().UnitOfMeasure() ? self.FormData.notifications.hdlCholesterol[2] : self.FormData.notifications.hdlCholesterol[1];
        } else {
            i = self.FormData.notifications.blank[0];
        }
        return i;
    }, self);
    self.totalCholesterolValidation = ko.pureComputed(function () {
        var i = self.FormData.notifications.blank[0];
        if (isNaN(self.Form().TotalCholesterol()) && self.validate() == true) {
            i = self.FormData.notifications.totalCholesterol[0];
        } else if (self.Form().TotalCholesterol() != null && (self.Form().TotalCholesterol() < 130 || self.Form().TotalCholesterol() > 320)) {
            i = self.Form().UnitOfMeasure() ? self.FormData.notifications.totalCholesterol[2] : self.FormData.notifications.totalCholesterol[1];
        } else {
            i = self.FormData.notifications.blank[0];
        }
        return i;
    }, self);
    self.bloodPresureValidation = ko.pureComputed(function () {
        if (self.Form().BloodPressure() == null && self.validate() == true) {
            return self.FormData.notifications.bloodPresure[0];
        } else if (self.Form().BloodPressure() != null && (self.Form().BloodPressure() < 90 || self.Form().BloodPressure() > 200)) {
            return self.FormData.notifications.bloodPresure[1];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);
    self.DBloodPressureValidation = ko.pureComputed(function () {
        if (self.Form().DBloodPressure() == null && self.validate() == true) {
            return self.FormData.notifications.dbloodPresure[0];
        } else if (self.Form().DBloodPressure() != null && !(new RegExp("^[0-9]{1,3}$")).test(self.Form().DBloodPressure())) {
            return self.FormData.notifications.dbloodPresure[2];
        } else if (self.Form().DBloodPressure() != null && (self.Form().DBloodPressure() < 60 || self.Form().DBloodPressure() > 130)) {
            return self.FormData.notifications.dbloodPresure[1];
        } else {
            return self.FormData.notifications.blank[0];
        }
    }, self);	//added by pooja
    self.isRaceOther = ko.pureComputed(function () {
        if (self.Form().Race() != null) {
            return self.Form().Race() == "Other" ? true : false;
        } else {
            return false;
        }
    }, self);
    self.recommendationUnlock = ko.pureComputed(function () {
        if (self.Form().Sex() != null && self.Form().Age() != null && self.Form().Age() >= 20 && self.Form().Age() <= 79 && self.Form().Race() != null && self.Form().HDLCholesterol() != null && self.Form().HDLCholesterol() >= 20 && self.Form().HDLCholesterol() <= 100 && self.Form().BloodPressure() != null && self.Form().BloodPressure() >= 90 && self.Form().BloodPressure() <= 200 && self.Form().TotalCholesterol() != null && self.Form().TotalCholesterol() >= 130 && self.Form().TotalCholesterol() <= 320 && (self.Form().Diabetic() != null || self.Form().Diabetic() != undefined) && (self.Form().Smoker() != null || self.Form().Smoker() != undefined) && (self.Form().Hypertension() != null || self.Form().Hypertension() != undefined)) {
            return true;
        } else {
            return false;
        }
    }, self);
    self.allDataValidation = ko.pureComputed(function () {
        var i = self.FormData.notifications.blank[0];
        if (self.ageValidation().status == "highlighted") { }
        if (self.validate == true || self.sexValidation().status == "warning" || self.ageValidation().status == "warning" || self.raceValidation().status == "warning" || self.hdlValidation().status == "warning" || self.totalCholesterolValidation().status == "warning" || self.bloodPresureValidation().status == "warning" || self.diabeticValidation().status == "warning" || self.hypertensionValidation().status == "warning" || self.smokerValidation().status == "warning") {
            i = self.FormData.notifications.allData[0];
        }
        if (self.sexValidation().status == "error" || self.raceValidation().status == "error" || self.ageValidation().status == "error" || self.hdlValidation().status == "error" || self.totalCholesterolValidation().status == "error" || self.bloodPresureValidation().status == "error" || self.diabeticValidation().status == "error" || self.hypertensionValidation().status == "error" || self.smokerValidation().status == "error") {
            i = self.FormData.notifications.allData[1];
        }
        //remakeSticky();
        return i;
    }, self);
    self.recommendationType = ko.pureComputed(function () {
        var i = "";
        var age = self.Form().Age();
        var cvRisk = null;
        if (self.Form().cvdPredict() != 1 && !isNaN(self.Form().cvdPredict())) {
            var number = self.Form().cvdPredict() * 100;
            cvRisk = number.toFixed(1);
        }

        if (cvRisk != null) {
            if (self.Form().isDiabetic()) {
                if (age > 75) {
                    i = self.FormData.recommendationText.CASE_1;
                }
                if (age >= 40 && age <= 75) {
                    if (cvRisk < 20) {
                        i = self.FormData.recommendationText.CASE_7;
                    } else if (cvRisk >= 20) {
                        i = self.FormData.recommendationText.CASE_8;
                    }
                }
            } else {
                if (age > 75) {
                    i = self.FormData.recommendationText.CASE_2;
                }
                if (age >= 40 && age <= 75) {
                    if (cvRisk < 5) {
                        i = self.FormData.recommendationText.CASE_3;
                    } else if (cvRisk >= 5 && cvRisk <= 7.4) {
                        i = self.FormData.recommendationText.CASE_4;
                    } else if (cvRisk >= 7.5 && cvRisk <= 19.9) {
                        i = self.FormData.recommendationText.CASE_5;
                    } else if (cvRisk >= 20) {
                        i = self.FormData.recommendationText.CASE_6;
                    }
                }
            }
            if (age >= 20 && age <= 39) {
                i = self.FormData.recommendationText.CASE_9;
            }
        }
        return i;
    }, self);
    self.resetAll = function () {

        self.validate(false);
        self.Form().Race(undefined);
        self.Form().Age(undefined);
        self.Form().Sex(null);
        self.Form().HDLCholesterolValue(undefined);
        self.Form().TotalCholesterolValue(undefined);
        self.Form().BloodPressure(undefined);
        self.Form().Diabetic(null);
        self.Form().Smoker(null);
        self.Form().Hypertension(null);
        self.Form().DBloodPressure(undefined);
    };
    self.numberTrim = function (value, unit) {
        var number = value;
        if (number == null) {
            number = 0;
        }
        number = parseFloat(number).toFixed(4);
        if (!unit) {
            number = parseFloat(number).toFixed(0);
        }
        return number;
    };
    self.criticalNotification = ko.observableArray([]);
    self.appStoreURL = ko.observable(notification.appStoreURL);
    self.notificationData = ko.observableArray([]);
}

var appmodel = new viewModel();

pager.Href.hash = "#!/";

pager.extendWithPage(appmodel);

ko.applyBindings(appmodel);

pager.start();

$(".panzoom-element img").unveil();

if (!isNativeApplication) {
    notification.callWebApi("get", notification.criticalNotificationInputURL(), null, notification.notificationType.critical);
}

var getQueryString = function (field, url) {
    var href = url ? url : window.location.href;
    var reg = new RegExp("[?&]" + field + "=([^&#]*)", "i");
    var string = reg.exec(href);
    return string ? string[1] : null;
};

var path = "#!/calulate/estimator/";

var params = pager.page.route[pager.page.route.length - 1];

if (params == undefined) {
    params = "";
} else {
    if (getQueryString("unitofmeasurement") != null) {
        if (getQueryString("unitofmeasurement") == "true" || getQueryString("unitofmeasurement").toLowerCase() == "si") appmodel.Form().UnitOfMeasure(true);
    }
    if (getQueryString("age") != null) {
        appmodel.Form().Age(getQueryString("age"));
    }
    if (getQueryString("gender") != null) {
        var queryGender = getQueryString("gender");
        if (queryGender == "m" || queryGender == "male" || queryGender == "Male") {
            appmodel.Form().Sex("Male");
        } else if (queryGender == "f" || queryGender == "female" || queryGender == "Female") {
            appmodel.Form().Sex("Female");
        }
    }
    if (getQueryString("race") != null) {
        var queryRace = getQueryString("race");
        if (queryRace == "wh") {
            appmodel.Form().Race("White");
        } else if (queryRace == "aa") {
            appmodel.Form().Race("African American");
        } else if (queryRace == "ot") {
            appmodel.Form().Race("Other");
        }
    }
    if (getQueryString("hdlCholesterol") != null) {
        appmodel.Form().HDLCholesterolValue(getQueryString("hdlCholesterol"));
    }
    if (getQueryString("hdl") != null) {
        appmodel.Form().HDLCholesterolValue(getQueryString("hdl"));
    }
    if (getQueryString("totalCholesterol") != null) {
        appmodel.Form().TotalCholesterolValue(getQueryString("totalCholesterol"));
    }
    if (getQueryString("chol") != null) {
        appmodel.Form().TotalCholesterolValue(getQueryString("chol"));
    }
    if (getQueryString("bloodPressure") != null || getQueryString("bp") != null) {
        var bpQuery = getQueryString("bloodPressure") != null ? getQueryString("bloodPressure") : getQueryString("bp");
        appmodel.Form().BloodPressure(bpQuery);
    }
    if (getQueryString("hasDiabetes") != null || getQueryString("diab") != null) { //diabetes code
        var queryDiabetic = getQueryString("hasDiabetes") != null ? getQueryString("hasDiabetes") : getQueryString("diab");
        queryDiabetic == "t" || queryDiabetic == "true" ? appmodel.Form().Diabetic("Yes") : appmodel.Form().Diabetic("No");
    }
    if (getQueryString("isSmoker") != null || getQueryString("smoker") != null) {
        var smokeQuery = getQueryString("isSmoker") != null ? getQueryString("isSmoker") : getQueryString("smoker");
        smokeQuery == "t" || smokeQuery == "true" ? appmodel.Form().Smoker("Yes") : appmodel.Form().Smoker("No");
    }
    if (getQueryString("hyp") != null || getQueryString("hasHypertension") != null) {
        var hypeQuery = getQueryString("hyp") != null ? getQueryString("hyp") : getQueryString("hasHypertension");
        hypeQuery == "t" || hypeQuery == "true" ? appmodel.Form().Hypertension("Yes") : appmodel.Form().Hypertension("No");
    }
    if (appmodel.recommendationUnlock()) {
        if (getQueryString("redirect") != null) {
            var isRedirect = getQueryString("redirect");
            if (isRedirect == "t" || isRedirect == "true") {
                path = "#!/calulate/recommendation/";
            } else {
                path = "#!/calulate/";
            }
        } else {
            path = "#!/calulate/recommendation/";
        }
    }
}
path += params;


pager.navigate(path);

$("#email").click(function () {
    if (isNativeApplication) {
        cordova.plugins.email.open({
            to: "",
            cc: "",
            bcc: "",
            subject: "ASCVD Risk Estimator Recommendation",
            body: decodeURI(getBody().replace(new RegExp("%0D%0A", "g"), "<br>")),
            isHtml: true
        });
    } else {
        this.href = "mailto:you@yourdomain.com?subject=ASCVD Risk Estimator Recommendation&body=";
        this.href += getBody();
    }
    return true;
});

function getBody() {
    var linebreak = "%0D%0A";
    var doublelinebreak = linebreak + linebreak;
    var body = "";
    var unitOfMeasure = appmodel.Form().UnitOfMeasure() ? "(mmol/L)" : "(mg/dL)";
    body += "-- 10 YEAR RISK: " + encodeURIComponent(appmodel.Form().TenYearRisk()) + " -- ";
    body += "LIFETIME RISK: " + encodeURIComponent(appmodel.Form().yourLifeTimeRisk()) + " --" + doublelinebreak;
    body += "--RECOMMENDATION--" + doublelinebreak;
    body += encodeURIComponent(appmodel.recommendationType().email) + doublelinebreak;
    body += "--PATIENT INFORMATION--" + linebreak;
    body += "DEMOGRAPHICS" + linebreak;
    body += " %E2%80%A2 Sex: " + appmodel.Form().Sex() + linebreak;
    body += " %E2%80%A2 Race: " + appmodel.Form().Race() + linebreak;
    body += " %E2%80%A2 Age: " + appmodel.Form().Age() + linebreak;
    body += linebreak;
    body += "LABS" + linebreak;
    body += " %E2%80%A2 Total Chol: " + appmodel.Form().TotalCholesterolValue() + unitOfMeasure + linebreak;
    body += " %E2%80%A2 HDL Chol: " + appmodel.Form().HDLCholesterolValue() + unitOfMeasure + linebreak;
    body += " %E2%80%A2 Systolic Blood Pressure: " + appmodel.Form().BloodPressure() + linebreak;
    body += linebreak;
    body += "PERSONAL HISTORY" + linebreak;
    body += " %E2%80%A2 Diabetic: " + (appmodel.Form().isDiabetic() ? "Yes" : "No") + linebreak;
    body += " %E2%80%A2 Smoker: " + (appmodel.Form().isSmoker() ? "Yes" : "No") + linebreak;
    body += " %E2%80%A2 Treatment for Hypertension: " + (appmodel.Form().isHypertension() ? "Yes" : "No");
    return body;
}


$('.icon .home').click(function () {
    $(document).scrollTop(0);

    if (!(navigator.userAgent.indexOf("MSIE") > -1)) {
        if ($('#offCanvas').hasClass('is-open')) {
            $('.sticky-holder').removeClass('stuck');
        }
    }
});
var resetTooltip = function () {
    $('.tooltip').css('display', 'none');
    $('.tooltip').attr('aria-hidden', 'true');
    $('.tooltip').attr('data-is-active', 'false');
    $('.tooltip').attr('style', 'display:none');
};
$(document).scroll(function () {
    //if(!(navigator.userAgent.indexOf("iPhone") > -1 || navigator.userAgent.indexOf("iPad") > -1)){
    if ($(window).scrollTop() != 0) {
        if (!$('.sticky-holder').hasClass('stuck')) {
            $('.sticky-holder').addClass('stuck');
        }
        if (!(navigator.userAgent.indexOf("MSIE") > -1)) {
            if ($('#offCanvas').hasClass('is-open')) {
                $('.sticky-holder').removeClass('stuck');
            }
        }


    } else {
        if ($('.sticky-holder').hasClass('stuck')) {
            $('.sticky-holder').removeClass('stuck');
            remakeSticky();
        }

    }
    //  }
    resetTooltip();
});

//# sourceMappingURL=application.min.js.map
function viewHeight() {
    var viewportheight;

    // the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight
    if (typeof window.innerWidth !== 'undefined') {
        viewportheight = window.innerHeight;
    }

    //	 IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)
    else if (typeof document.documentElement !== 'undefined' && typeof document.documentElement.clientWidth !== 'undefined' && document.documentElement.clientWidth !== 0) {
        viewportheight = document.documentElement.clientHeight;
    }

    //	 older versions of IE
    else {
        viewportheight = document.getElementsByTagName('body')[0].clientHeight;
    }
    return viewportheight;
}

window.onresize = function (event) {
    var view = viewHeight();
    var mh;
    mh = (view - ($('header').outerHeight() + $('footer').outerHeight()));
    $(".fill-page-height").css("min-height", mh);
};


//GDPR
function getCookieBanner() {
    var cookieValue = getCookie('ascvd-cookie');
    if (cookieValue) {
        $.ajax({
            method: 'GET',
            url: arguments[0] + '/wapi/CookieBannerHelper/GetGDPRPolicyUpdatedDate'
        }).done(function (data) {
            var publishDate = data ? new Date(data) : "";
            if (publishDate && new Date(cookieValue) > publishDate)
                removeBanner();
            else
                loadBanner(arguments[0]);
        });
    }
    else {
        loadBanner(arguments[0]);
    }
}
function makeAck() {
    //set cookie
    var cname = 'ascvd-cookie';
    var cvalue = new Date();
    var d = new Date();
    //expires in 10 days
    d.setTime(d.getTime() + (10 * 24 * 60 * 60 * 1000));
    var expires = 'expires=' + d.toUTCString();
    CookieString = cname + '=' + cvalue.toUTCString() + ';' + expires + ';path=/;secure';
    document.cookie = CookieString;
    //remove banner
    removeBanner();
}
function removeBanner() {
    var elem = document.getElementById('cookie-banner');
    if (elem)
        elem.parentNode.removeChild(elem);
}
function loadBanner() {
    var template = document.createElement('div');
    template.id = 'cookie-banner';
    $.ajax({
        method: 'GET',
        url: arguments[0] + '/external/vexternalcookiebanner'
    }).done(function (data) {
        template.innerHTML = data;
        document.body.appendChild(template);
    });
}
//name of the cookie (cname)
function getCookie(cname) {
    var name = cname + '=';
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) === 0) {
            return c.substring(name.length, c.length);
        }
    }
    return '';
}