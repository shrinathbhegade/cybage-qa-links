(function(global, factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    var arr = [];
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var support = {};
    var document = window.document, version = "3.6.0", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: "",
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },
        isArray: Array.isArray,
        isWindow: function(obj) {
            return obj != null && obj === obj.window;
        },
        isNumeric: function(obj) {
            return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
        },
        isPlainObject: function(obj) {
            if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
            }
            return true;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        type: function(obj) {
            if (obj == null) {
                return obj + "";
            }
            return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(code) {
            var script, indirect = eval;
            code = jQuery.trim(code);
            if (code) {
                if (code.indexOf("use strict") === 1) {
                    script = document.createElement("script");
                    script.text = code;
                    document.head.appendChild(script).parentNode.removeChild(script);
                } else {
                    indirect(code);
                }
            }
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        trim: function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [ arr ] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (;j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (;i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) {
                for (;i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var tmp, args, proxy;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        now: Date.now,
        support: support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = "length" in obj && obj.length, type = jQuery.type(obj);
        if (type === "function" || jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle = function(window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
            }
            return 0;
        }, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
            var i = 0, len = list.length;
            for (;i < len; i++) {
                if (list[i] === elem) {
                    return i;
                }
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, unloadHandler = function() {
            setDocument();
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {}
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }
            context = context || document;
            results = results || [];
            nodeType = context.nodeType;
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed && documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                    if (m = match[1]) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            if (elem && elem.parentNode) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                    } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    } else if ((m = match[3]) && support.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType !== 1 && selector;
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {} finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + " "] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = doc.documentElement;
            parent = doc.defaultView;
            if (parent && parent !== parent.top) {
                if (parent.addEventListener) {
                    parent.addEventListener("unload", unloadHandler, false);
                } else if (parent.attachEvent) {
                    parent.attachEvent("onunload", unloadHandler);
                }
            }
            documentIsHTML = !isXML(doc);
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find["ID"];
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";
                    if (div.querySelectorAll("[msallowcapture^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                        rbuggyQSA.push("~=");
                    }
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                    if (!div.querySelectorAll("a#" + expando + "+*").length) {
                        rbuggyQSA.push(".#.+[+~]");
                    }
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");
                    if (div.querySelectorAll("[name=d]").length) {
                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function(div) {
                    support.disconnectedMatch = matches.call(div, "div");
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) {
                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || "";
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                diff = cache[1];
                            } else {
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ];
                                        }
                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function(elem) {
                    return elem.disabled === false;
                },
                disabled: function(elem) {
                    return elem.disabled === true;
                },
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                selected: function(elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                text: function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function(elem, context, xml) {
                var oldCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                outerCache[dir] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (;i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            } ];
            for (;i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [ addCombinator(elementMatcher(matchers), matcher) ];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (;j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1, len = elems.length;
                if (outermost) {
                    outermostContext = context !== document && context;
                }
                for (;i !== len && (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        while (matcher = elementMatchers[j++]) {
                            if (matcher(elem, context, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                        }
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) {
                            matchedCount--;
                        }
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) {
                        matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                        Sizzle.uniqueSort(results);
                    }
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });
        if (!assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return div.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function(elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function(div) {
            return div.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function(elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext;
    var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    var risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier === "string") {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) >= 0 !== not;
        });
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ":not(" + expr + ")";
        }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, len = this.length, ret = [], self = this;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) {
            return this;
        }
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                match = [ null, selector, null ];
            } else {
                match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for (match in context) {
                            if (jQuery.isFunction(this[match])) {
                                this[match](context[match]);
                            } else {
                                this.attr(match, context[match]);
                            }
                        }
                    }
                    return this;
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem && elem.parentNode) {
                        this.length = 1;
                        this[0] = elem;
                    }
                    this.context = document;
                    this.selector = selector;
                    return this;
                }
            } else if (!context || context.jquery) {
                return (context || rootjQuery).find(selector);
            } else {
                return this.constructor(context).find(selector);
            }
        } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
        } else if (jQuery.isFunction(selector)) {
            return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
        }
        if (selector.selector !== undefined) {
            this.selector = selector.selector;
            this.context = selector.context;
        }
        return jQuery.makeArray(selector, this);
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.extend({
        dir: function(elem, dir, until) {
            var matched = [], truncate = until !== undefined;
            while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {
                    if (truncate && jQuery(elem).is(until)) {
                        break;
                    }
                    matched.push(elem);
                }
            }
            return matched;
        },
        sibling: function(n, elem) {
            var matched = [];
            for (;n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    matched.push(n);
                }
            }
            return matched;
        }
    });
    jQuery.fn.extend({
        has: function(target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function() {
                var i = 0;
                for (;i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
            for (;i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        matched.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function(elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.unique(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnotwhite = /\S+/g;
    var optionsCache = {};
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (;list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    memory = false;
                    break;
                }
            }
            firing = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                } else if (memory) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        }, self = {
            add: function() {
                if (list) {
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            if (type === "function") {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            } else if (arg && arg.length && type !== "string") {
                                add(arg);
                            }
                        });
                    })(arguments);
                    if (firing) {
                        firingLength = list.length;
                    } else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            remove: function() {
                if (list) {
                    jQuery.each(arguments, function(_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (firing) {
                                if (index <= firingLength) {
                                    firingLength--;
                                }
                                if (index <= firingIndex) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                stack = undefined;
                if (!memory) {
                    self.disable();
                }
                return this;
            },
            locked: function() {
                return !stack;
            },
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if (firing) {
                        stack.push(args);
                    } else {
                        fire(args);
                    }
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                } else {
                                    newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function() {
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function(subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values);
                    } else if (!--remaining) {
                        deferred.resolveWith(contexts, values);
                    }
                };
            }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [ jQuery ]);
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler("ready");
                jQuery(document).off("ready");
            }
        }
    });
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed, false);
        window.removeEventListener("load", completed, false);
        jQuery.ready();
    }
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === "complete") {
                setTimeout(jQuery.ready);
            } else {
                document.addEventListener("DOMContentLoaded", completed, false);
                window.addEventListener("load", completed, false);
            }
        }
        return readyList.promise(obj);
    };
    jQuery.ready.promise();
    var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (jQuery.type(key) === "object") {
            chainable = true;
            for (i in key) {
                jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!jQuery.isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (;i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
    };
    jQuery.acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        Object.defineProperty(this.cache = {}, 0, {
            get: function() {
                return {};
            }
        });
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.accepts = jQuery.acceptData;
    Data.prototype = {
        key: function(owner) {
            if (!Data.accepts(owner)) {
                return 0;
            }
            var descriptor = {}, unlock = owner[this.expando];
            if (!unlock) {
                unlock = Data.uid++;
                try {
                    descriptor[this.expando] = {
                        value: unlock
                    };
                    Object.defineProperties(owner, descriptor);
                } catch (e) {
                    descriptor[this.expando] = unlock;
                    jQuery.extend(owner, descriptor);
                }
            }
            if (!this.cache[unlock]) {
                this.cache[unlock] = {};
            }
            return unlock;
        },
        set: function(owner, data, value) {
            var prop, unlock = this.key(owner), cache = this.cache[unlock];
            if (typeof data === "string") {
                cache[data] = value;
            } else {
                if (jQuery.isEmptyObject(cache)) {
                    jQuery.extend(this.cache[unlock], data);
                } else {
                    for (prop in data) {
                        cache[prop] = data[prop];
                    }
                }
            }
            return cache;
        },
        get: function(owner, key) {
            var cache = this.cache[this.key(owner)];
            return key === undefined ? cache : cache[key];
        },
        access: function(owner, key, value) {
            var stored;
            if (key === undefined || key && typeof key === "string" && value === undefined) {
                stored = this.get(owner, key);
                return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
            var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
            if (key === undefined) {
                this.cache[unlock] = {};
            } else {
                if (jQuery.isArray(key)) {
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key);
                    if (key in cache) {
                        name = [ key, camel ];
                    } else {
                        name = camel;
                        name = name in cache ? [ name ] : name.match(rnotwhite) || [];
                    }
                }
                i = name.length;
                while (i--) {
                    delete cache[name[i]];
                }
            }
        },
        hasData: function(owner) {
            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        discard: function(owner) {
            if (owner[this.expando]) {
                delete this.cache[owner[this.expando]];
            }
        }
    };
    var data_priv = new Data();
    var data_user = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                data_user.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function(elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        data: function(elem, name, data) {
            return data_user.access(elem, name, data);
        },
        removeData: function(elem, name) {
            data_user.remove(elem, name);
        },
        _data: function(elem, name, data) {
            return data_priv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
            data_priv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = data_user.get(elem);
                    if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        data_priv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data;
            }
            if (typeof key === "object") {
                return this.each(function() {
                    data_user.set(this, key);
                });
            }
            return access(this, function(value) {
                var data, camelKey = jQuery.camelCase(key);
                if (elem && value === undefined) {
                    data = data_user.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    data = data_user.get(elem, camelKey);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, camelKey, undefined);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                this.each(function() {
                    var data = data_user.get(this, camelKey);
                    data_user.set(this, camelKey, value);
                    if (key.indexOf("-") !== -1 && data !== undefined) {
                        data_user.set(this, key, value);
                    }
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
            return this.each(function() {
                data_user.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = data_priv.get(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = data_priv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    data_priv.remove(elem, [ type + "queue", key ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) {
                    defer.resolveWith(elements, [ elements ]);
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = data_priv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    var isHidden = function(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    };
    var rcheckableType = /^(?:checkbox|radio)$/i;
    (function() {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement("div")), input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();
    var strundefined = typeof undefined;
    support.focusinBubbles = "onfocusin" in window;
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                data_priv.remove(elem, "events");
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [ event ] : jQuery.makeArray(data, [ event ]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && jQuery.acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function(event) {
            event = jQuery.event.fix(event);
            var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function(event, handlers) {
            var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                for (;cur !== this; cur = cur.parentNode || this) {
                    if (cur.disabled !== true || event.type !== "click") {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + " ";
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var eventDoc, doc, body, button = original.button;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.which && button !== undefined) {
                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                }
                return event;
            }
        },
        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && e.preventDefault) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && e.stopPropagation) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && e.stopImmediatePropagation) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    data_priv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        data_priv.remove(doc, fix);
                    } else {
                        data_priv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
            var origFn, type;
            if (typeof types === "object") {
                if (typeof selector !== "string") {
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    fn = data;
                    data = undefined;
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (;i < l; i++) {
            data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
        }
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (data_priv.hasData(src)) {
            pdataOld = data_priv.access(src);
            pdataCur = data_priv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (data_user.hasData(src)) {
            udataOld = data_user.access(src);
            udataCur = jQuery.extend({}, udataOld);
            data_user.set(dest, udataCur);
        }
    }
    function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], ret) : ret;
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
            for (;i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    if (jQuery.type(elem) === "object") {
                        jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem);
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));
                    } else {
                        tmp = tmp || fragment.appendChild(context.createElement("div"));
                        tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        tmp = fragment.firstChild;
                        tmp.textContent = "";
                    }
                }
            }
            fragment.textContent = "";
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(fragment.appendChild(elem), "script");
                if (contains) {
                    setGlobalEval(tmp);
                }
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            return fragment;
        },
        cleanData: function(elems) {
            var data, elem, type, key, special = jQuery.event.special, i = 0;
            for (;(elem = elems[i]) !== undefined; i++) {
                if (jQuery.acceptData(elem)) {
                    key = elem[data_priv.expando];
                    if (key && (data = data_priv.cache[key])) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        if (data_priv.cache[key]) {
                            delete data_priv.cache[key];
                        }
                    }
                }
                delete data_user.cache[elem[data_user.expando]];
            }
        }
    });
    jQuery.fn.extend({
        text: function(value) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        remove: function(selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (;(elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            var elem, i = 0;
            for (;(elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = "";
                }
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var arg = arguments[0];
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                if (arg) {
                    arg.replaceChild(elem, this);
                }
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, true);
        },
        domManip: function(args, callback) {
            args = concat.apply([], args);
            var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    if (jQuery._evalUrl) {
                                        jQuery._evalUrl(node.src);
                                    }
                                } else {
                                    jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                                }
                            }
                        }
                    }
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {};
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === "none" || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                doc = iframe[0].contentDocument;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles = function(elem) {
        if (elem.ownerDocument.defaultView.opener) {
            return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        }
        return window.getComputedStyle(elem, null);
    };
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
        }
        if (computed) {
            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }
            if (rnumnonpx.test(ret) && rmargin.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + "" : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    (function() {
        var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement, container = document.createElement("div"), div = document.createElement("div");
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
        container.appendChild(div);
        function computePixelPositionAndBoxSizingReliable() {
            div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
            div.innerHTML = "";
            docElem.appendChild(container);
            var divStyle = window.getComputedStyle(div, null);
            pixelPositionVal = divStyle.top !== "1%";
            boxSizingReliableVal = divStyle.width === "4px";
            docElem.removeChild(container);
        }
        if (window.getComputedStyle) {
            jQuery.extend(support, {
                pixelPosition: function() {
                    computePixelPositionAndBoxSizingReliable();
                    return pixelPositionVal;
                },
                boxSizingReliable: function() {
                    if (boxSizingReliableVal == null) {
                        computePixelPositionAndBoxSizingReliable();
                    }
                    return boxSizingReliableVal;
                },
                reliableMarginRight: function() {
                    var ret, marginDiv = div.appendChild(document.createElement("div"));
                    marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                    marginDiv.style.marginRight = marginDiv.style.width = "0";
                    div.style.width = "1px";
                    docElem.appendChild(container);
                    ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
                    docElem.removeChild(container);
                    div.removeChild(marginDiv);
                    return ret;
                }
            });
        }
    })();
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    function vendorPropName(style, name) {
        if (name in style) {
            return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0, val = 0;
        for (;i < 4; i += 2) {
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = data_priv.get(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
                }
            } else {
                hidden = isHidden(elem);
                if (display !== "none" || !hidden) {
                    data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }
        return elements;
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {
            "float": "cssFloat"
        },
        style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    style[name] = value;
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
            }
        };
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) {
            return jQuery.swap(elem, {
                display: "inline-block"
            }, curCSS, [ elem, "marginRight" ]);
        }
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [ value ];
                for (;i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start = start / scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = {
            height: type
        };
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            display = jQuery.css(elem, "display");
            checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
            if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                style.display = "inline-block";
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else {
                display = undefined;
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = data_priv.access(elem, "fxshow", {});
            }
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;
                data_priv.remove(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
            style.display = display;
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) {
                animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) {
                return remaining;
            } else {
                deferred.resolveWith(elem, [ animation ]);
                return false;
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (;index < length; index++) {
                    animation.tweens[index].run(1);
                }
                if (gotoEnd) {
                    deferred.resolveWith(elem, [ animation, gotoEnd ]);
                } else {
                    deferred.rejectWith(elem, [ animation, gotoEnd ]);
                }
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || data_priv.get(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = data_priv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = data_priv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input = document.createElement("input"), select = document.createElement("select"), opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === strundefined) {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, value + "");
                    return value;
                }
            } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            } else {
                ret = jQuery.find.attr(elem, name);
                return ret == null ? undefined : ret;
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        elem[propName] = false;
                    }
                    elem.removeAttribute(name);
                }
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
            } else {
                return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
                }
            }
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            }
        };
    }
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === "string" && value, i = 0, len = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === "string" && value, i = 0, len = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        finalValue = value ? jQuery.trim(cur) : "";
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function() {
                if (type === "string") {
                    var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (type === strundefined || type === "boolean") {
                    if (this.className) {
                        data_priv.set(this, "__className__", this.className);
                    }
                    this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (;i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (;i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var nonce = jQuery.now();
    var rquery = /\?/;
    jQuery.parseJSON = function(data) {
        return JSON.parse(data + "");
    };
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || typeof data !== "string") {
            return null;
        }
        try {
            tmp = new DOMParser();
            xml = tmp.parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };
    var rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), ajaxLocation = window.location.href, ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    if (!state) {
                        s.mimeType = type;
                    }
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (state < 2) {
                            for (code in map) {
                                statusCode[code] = [ statusCode[code], map[code] ];
                            }
                        } else {
                            jqXHR.always(map[jqXHR.status]);
                        }
                    }
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [ "" ];
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();
            }
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                }
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            var wrap;
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
    };
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === "object") {
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join("&").replace(r20, "+");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new XMLHttpRequest();
        } catch (e) {}
    };
    var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
        0: 200,
        1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
    if (window.attachEvent) {
        window.attachEvent("onunload", function() {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key]();
            }
        });
    }
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function(options) {
        var callback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function(headers, complete) {
                    var i, xhr = options.xhr(), id = ++xhrId;
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function(type) {
                        return function() {
                            if (callback) {
                                delete xhrCallbacks[id];
                                callback = xhr.onload = xhr.onerror = null;
                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {
                                    complete(xhr.status, xhr.statusText);
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {
                                        text: xhr.responseText
                                    } : undefined, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    xhr.onerror = callback("error");
                    callback = xhrCallbacks[id] = callback("abort");
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function(_, complete) {
                    script = jQuery("<script>").prop({
                        async: true,
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return "script";
        }
    });
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
            return null;
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) {
            return [ context.createElement(parsed[1]) ];
        }
        parsed = jQuery.buildFragment([ data ], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = jQuery.trim(url.slice(off));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === "object") {
            type = "POST";
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params
            }).done(function(responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).complete(callback && function(jqXHR, status) {
                self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
            });
        }
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
                elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var docElem, win, elem = this[0], box = {
                top: 0,
                left: 0
            }, doc = elem && elem.ownerDocument;
            if (!doc) {
                return;
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }
            if (typeof elem.getBoundingClientRect !== strundefined) {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
                top: box.top + win.pageYOffset - docElem.clientTop,
                left: box.left + win.pageXOffset - docElem.clientLeft
            };
        },
        position: function() {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, elem = this[0], parentOffset = {
                top: 0,
                left: 0
            };
            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return elem.document.documentElement["client" + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (typeof noGlobal === strundefined) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
});

(function() {
    (function(n) {
        var x = this || (0, eval)("this"), u = x.document, M = x.navigator, v = x.jQuery, F = x.JSON;
        (function(n) {
            "function" === typeof define && define.amd ? define([ "exports", "require" ], n) : "object" === typeof exports && "object" === typeof module ? n(module.exports || exports) : n(x.ko = {});
        })(function(N, O) {
            function J(a, c) {
                return null === a || typeof a in T ? a === c : !1;
            }
            function U(b, c) {
                var d;
                return function() {
                    d || (d = a.a.setTimeout(function() {
                        d = n;
                        b();
                    }, c));
                };
            }
            function V(b, c) {
                var d;
                return function() {
                    clearTimeout(d);
                    d = a.a.setTimeout(b, c);
                };
            }
            function W(a, c) {
                c && c !== I ? "beforeChange" === c ? this.Kb(a) : this.Ha(a, c) : this.Lb(a);
            }
            function X(a, c) {
                null !== c && c.k && c.k();
            }
            function Y(a, c) {
                var d = this.Hc, e = d[s];
                e.R || (this.lb && this.Ma[c] ? (d.Pb(c, a, this.Ma[c]), this.Ma[c] = null, --this.lb) : e.r[c] || d.Pb(c, a, e.s ? {
                    ia: a
                } : d.uc(a)));
            }
            function K(b, c, d, e) {
                a.d[b] = {
                    init: function(b, g, k, l, m) {
                        var h, r;
                        a.m(function() {
                            var q = a.a.c(g()), p = !d !== !q, A = !r;
                            if (A || c || p !== h) A && a.va.Aa() && (r = a.a.ua(a.f.childNodes(b), !0)), p ? (A || a.f.da(b, a.a.ua(r)),
                            a.eb(e ? e(m, q) : m, b)) : a.f.xa(b), h = p;
                        }, null, {
                            i: b
                        });
                        return {
                            controlsDescendantBindings: !0
                        };
                    }
                };
                a.h.ta[b] = !1;
                a.f.Z[b] = !0;
            }
            var a = "undefined" !== typeof N ? N : {};
            a.b = function(b, c) {
                for (var d = b.split("."), e = a, f = 0; f < d.length - 1; f++) e = e[d[f]];
                e[d[d.length - 1]] = c;
            };
            a.G = function(a, c, d) {
                a[c] = d;
            };
            a.version = "3.5.1";
            a.b("version", a.version);
            a.options = {
                deferUpdates: !1,
                useOnlyNativeEvents: !1
            };
            a.a = function() {
                function b(a, b) {
                    for (var c in a) a.hasOwnProperty(c) && b(c, a[c]);
                }
                function c(a, b) {
                    if (b) for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);
                    return a;
                }
                function d(a, b) {
                    a.__proto__ = b;
                    return a;
                }
                function e(b, c, d, e) {
                    var h = b[c].match(r) || [];
                    a.a.q(d.match(r), function(b) {
                        a.a.pa(h, b, e);
                    });
                    b[c] = h.join(" ");
                }
                var f = {
                    __proto__: []
                } instanceof Array, g = "function" === typeof Symbol, k = {}, l = {};
                k[M && /Firefox\/2/i.test(M.userAgent) ? "KeyboardEvent" : "UIEvents"] = [ "keyup", "keydown", "keypress" ];
                k.MouseEvents = "click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" ");
                b(k, function(a, b) {
                    if (b.length) for (var c = 0, d = b.length; c < d; c++) l[b[c]] = a;
                });
                var m = {
                    propertychange: !0
                }, h = u && function() {
                    for (var a = 3, b = u.createElement("div"), c = b.getElementsByTagName("i"); b.innerHTML = "<!--[if gt IE " + ++a + "]><i></i><![endif]-->",
                    c[0]; ) ;
                    return 4 < a ? a : n;
                }(), r = /\S+/g;
                return {
                    cc: [ "authenticity_token", /^__RequestVerificationToken(_.*)?$/ ],
                    q: function(a, b) {
                        for (var c = 0, d = a.length; c < d; c++) b(a[c], c);
                    },
                    o: function(a, b) {
                        if ("function" == typeof Array.prototype.indexOf) return Array.prototype.indexOf.call(a, b);
                        for (var c = 0, d = a.length; c < d; c++) if (a[c] === b) return c;
                        return -1;
                    },
                    Sb: function(a, b, c) {
                        for (var d = 0, e = a.length; d < e; d++) if (b.call(c, a[d], d)) return a[d];
                        return null;
                    },
                    La: function(b, c) {
                        var d = a.a.o(b, c);
                        0 < d ? b.splice(d, 1) : 0 === d && b.shift();
                    },
                    Tb: function(b) {
                        b = b || [];
                        for (var c = [], d = 0, e = b.length; d < e; d++) 0 > a.a.o(c, b[d]) && c.push(b[d]);
                        return c;
                    },
                    fb: function(a, b) {
                        a = a || [];
                        for (var c = [], d = 0, e = a.length; d < e; d++) c.push(b(a[d], d));
                        return c;
                    },
                    Ka: function(a, b) {
                        a = a || [];
                        for (var c = [], d = 0, e = a.length; d < e; d++) b(a[d], d) && c.push(a[d]);
                        return c;
                    },
                    ra: function(a, b) {
                        if (b instanceof Array) a.push.apply(a, b); else for (var c = 0, d = b.length; c < d; c++) a.push(b[c]);
                        return a;
                    },
                    pa: function(b, c, d) {
                        var e = a.a.o(a.a.zb(b), c);
                        0 > e ? d && b.push(c) : d || b.splice(e, 1);
                    },
                    ka: f,
                    extend: c,
                    Xa: d,
                    Ya: f ? d : c,
                    D: b,
                    Ca: function(a, b) {
                        if (!a) return a;
                        var c = {}, d;
                        for (d in a) a.hasOwnProperty(d) && (c[d] = b(a[d], d, a));
                        return c;
                    },
                    ob: function(b) {
                        for (;b.firstChild; ) a.removeNode(b.firstChild);
                    },
                    jc: function(b) {
                        b = a.a.V(b);
                        for (var c = (b[0] && b[0].ownerDocument || u).createElement("div"), d = 0, e = b.length; d < e; d++) c.appendChild(a.$(b[d]));
                        return c;
                    },
                    ua: function(b, c) {
                        for (var d = 0, e = b.length, h = []; d < e; d++) {
                            var m = b[d].cloneNode(!0);
                            h.push(c ? a.$(m) : m);
                        }
                        return h;
                    },
                    da: function(b, c) {
                        a.a.ob(b);
                        if (c) for (var d = 0, e = c.length; d < e; d++) b.appendChild(c[d]);
                    },
                    qc: function(b, c) {
                        var d = b.nodeType ? [ b ] : b;
                        if (0 < d.length) {
                            for (var e = d[0], h = e.parentNode, m = 0, l = c.length; m < l; m++) h.insertBefore(c[m], e);
                            m = 0;
                            for (l = d.length; m < l; m++) a.removeNode(d[m]);
                        }
                    },
                    za: function(a, b) {
                        if (a.length) {
                            for (b = 8 === b.nodeType && b.parentNode || b; a.length && a[0].parentNode !== b; ) a.splice(0, 1);
                            for (;1 < a.length && a[a.length - 1].parentNode !== b; ) a.length--;
                            if (1 < a.length) {
                                var c = a[0], d = a[a.length - 1];
                                for (a.length = 0; c !== d; ) a.push(c), c = c.nextSibling;
                                a.push(d);
                            }
                        }
                        return a;
                    },
                    sc: function(a, b) {
                        7 > h ? a.setAttribute("selected", b) : a.selected = b;
                    },
                    $a: function(a) {
                        return null === a || a === n ? "" : a.trim ? a.trim() : a.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
                    },
                    nd: function(a, b) {
                        a = a || "";
                        return b.length > a.length ? !1 : a.substring(0, b.length) === b;
                    },
                    Mc: function(a, b) {
                        if (a === b) return !0;
                        if (11 === a.nodeType) return !1;
                        if (b.contains) return b.contains(3 === a.nodeType ? a.parentNode : a);
                        if (b.compareDocumentPosition) return 16 == (b.compareDocumentPosition(a) & 16);
                        for (;a && a != b; ) a = a.parentNode;
                        return !!a;
                    },
                    nb: function(b) {
                        return a.a.Mc(b, b.ownerDocument.documentElement);
                    },
                    Qb: function(b) {
                        return !!a.a.Sb(b, a.a.nb);
                    },
                    A: function(a) {
                        return a && a.tagName && a.tagName.toLowerCase();
                    },
                    Wb: function(b) {
                        return a.onError ? function() {
                            try {
                                return b.apply(this, arguments);
                            } catch (c) {
                                throw a.onError && a.onError(c), c;
                            }
                        } : b;
                    },
                    setTimeout: function(b, c) {
                        return setTimeout(a.a.Wb(b), c);
                    },
                    $b: function(b) {
                        setTimeout(function() {
                            a.onError && a.onError(b);
                            throw b;
                        }, 0);
                    },
                    p: function(b, c, d) {
                        var e = a.a.Wb(d);
                        d = h && m[c];
                        if (a.options.useOnlyNativeEvents || d || !v) if (d || "function" != typeof b.addEventListener) if ("undefined" != typeof b.attachEvent) {
                            var l = function(a) {
                                e.call(b, a);
                            }, f = "on" + c;
                            b.attachEvent(f, l);
                            a.a.F.oa(b, function() {
                                b.detachEvent(f, l);
                            });
                        } else throw Error("Browser doesn't support addEventListener or attachEvent"); else b.addEventListener(c, e, !1); else v(b).bind(c, e);
                    },
                    Da: function(b, c) {
                        if (!b || !b.nodeType) throw Error("element must be a DOM node when calling triggerEvent");
                        var d;
                        "input" === a.a.A(b) && b.type && "click" == c.toLowerCase() ? (d = b.type, d = "checkbox" == d || "radio" == d) : d = !1;
                        if (a.options.useOnlyNativeEvents || !v || d) if ("function" == typeof u.createEvent) if ("function" == typeof b.dispatchEvent) d = u.createEvent(l[c] || "HTMLEvents"),
                        d.initEvent(c, !0, !0, x, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, b), b.dispatchEvent(d); else throw Error("The supplied element doesn't support dispatchEvent"); else if (d && b.click) b.click(); else if ("undefined" != typeof b.fireEvent) b.fireEvent("on" + c); else throw Error("Browser doesn't support triggering events"); else v(b).trigger(c);
                    },
                    c: function(b) {
                        return a.H(b) ? b() : b;
                    },
                    zb: function(b) {
                        return a.H(b) ? b.t() : b;
                    },
                    bb: function(b, c, d) {
                        var h;
                        c && ("object" === typeof b.classList ? (h = b.classList[d ? "add" : "remove"],
                        a.a.q(c.match(r), function(a) {
                            h.call(b.classList, a);
                        })) : "string" === typeof b.className.baseVal ? e(b.className, "baseVal", c, d) : e(b, "className", c, d));
                    },
                    Za: function(b, c) {
                        var d = a.a.c(c);
                        if (null === d || d === n) d = "";
                        var e = a.f.firstChild(b);
                        !e || 3 != e.nodeType || a.f.nextSibling(e) ? a.f.da(b, [ b.ownerDocument.createTextNode(d) ]) : e.data = d;
                        a.a.Rc(b);
                    },
                    rc: function(a, b) {
                        a.name = b;
                        if (7 >= h) try {
                            a.mergeAttributes(u.createElement("<input name='" + a.name + "'/>"), !1);
                        } catch (c) {}
                    },
                    Rc: function(a) {
                        9 <= h && (a = 1 == a.nodeType ? a : a.parentNode, a.style && (a.style.zoom = a.style.zoom));
                    },
                    Nc: function(a) {
                        if (h) {
                            var b = a.style.width;
                            a.style.width = 0;
                            a.style.width = b;
                        }
                    },
                    hd: function(b, c) {
                        b = a.a.c(b);
                        c = a.a.c(c);
                        for (var d = [], e = b; e <= c; e++) d.push(e);
                        return d;
                    },
                    V: function(a) {
                        for (var b = [], c = 0, d = a.length; c < d; c++) b.push(a[c]);
                        return b;
                    },
                    Yb: function(a) {
                        return g ? Symbol(a) : a;
                    },
                    rd: 6 === h,
                    sd: 7 === h,
                    C: h,
                    ec: function(b, c) {
                        for (var d = a.a.V(b.getElementsByTagName("input")).concat(a.a.V(b.getElementsByTagName("textarea"))), e = "string" == typeof c ? function(a) {
                            return a.name === c;
                        } : function(a) {
                            return c.test(a.name);
                        }, h = [], m = d.length - 1; 0 <= m; m--) e(d[m]) && h.push(d[m]);
                        return h;
                    },
                    ed: function(b) {
                        return "string" == typeof b && (b = a.a.$a(b)) ? F && F.parse ? F.parse(b) : new Function("return " + b)() : null;
                    },
                    Eb: function(b, c, d) {
                        if (!F || !F.stringify) throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");
                        return F.stringify(a.a.c(b), c, d);
                    },
                    fd: function(c, d, e) {
                        e = e || {};
                        var h = e.params || {}, m = e.includeFields || this.cc, l = c;
                        if ("object" == typeof c && "form" === a.a.A(c)) for (var l = c.action, f = m.length - 1; 0 <= f; f--) for (var g = a.a.ec(c, m[f]), k = g.length - 1; 0 <= k; k--) h[g[k].name] = g[k].value;
                        d = a.a.c(d);
                        var r = u.createElement("form");
                        r.style.display = "none";
                        r.action = l;
                        r.method = "post";
                        for (var n in d) c = u.createElement("input"), c.type = "hidden", c.name = n, c.value = a.a.Eb(a.a.c(d[n])),
                        r.appendChild(c);
                        b(h, function(a, b) {
                            var c = u.createElement("input");
                            c.type = "hidden";
                            c.name = a;
                            c.value = b;
                            r.appendChild(c);
                        });
                        u.body.appendChild(r);
                        e.submitter ? e.submitter(r) : r.submit();
                        setTimeout(function() {
                            r.parentNode.removeChild(r);
                        }, 0);
                    }
                };
            }();
            a.b("utils", a.a);
            a.b("utils.arrayForEach", a.a.q);
            a.b("utils.arrayFirst", a.a.Sb);
            a.b("utils.arrayFilter", a.a.Ka);
            a.b("utils.arrayGetDistinctValues", a.a.Tb);
            a.b("utils.arrayIndexOf", a.a.o);
            a.b("utils.arrayMap", a.a.fb);
            a.b("utils.arrayPushAll", a.a.ra);
            a.b("utils.arrayRemoveItem", a.a.La);
            a.b("utils.extend", a.a.extend);
            a.b("utils.fieldsIncludedWithJsonPost", a.a.cc);
            a.b("utils.getFormFields", a.a.ec);
            a.b("utils.peekObservable", a.a.zb);
            a.b("utils.postJson", a.a.fd);
            a.b("utils.parseJson", a.a.ed);
            a.b("utils.registerEventHandler", a.a.p);
            a.b("utils.stringifyJson", a.a.Eb);
            a.b("utils.range", a.a.hd);
            a.b("utils.toggleDomNodeCssClass", a.a.bb);
            a.b("utils.triggerEvent", a.a.Da);
            a.b("utils.unwrapObservable", a.a.c);
            a.b("utils.objectForEach", a.a.D);
            a.b("utils.addOrRemoveItem", a.a.pa);
            a.b("utils.setTextContent", a.a.Za);
            a.b("unwrap", a.a.c);
            Function.prototype.bind || (Function.prototype.bind = function(a) {
                var c = this;
                if (1 === arguments.length) return function() {
                    return c.apply(a, arguments);
                };
                var d = Array.prototype.slice.call(arguments, 1);
                return function() {
                    var e = d.slice(0);
                    e.push.apply(e, arguments);
                    return c.apply(a, e);
                };
            });
            a.a.e = new function() {
                function a(b, g) {
                    var k = b[d];
                    if (!k || "null" === k || !e[k]) {
                        if (!g) return n;
                        k = b[d] = "ko" + c++;
                        e[k] = {};
                    }
                    return e[k];
                }
                var c = 0, d = "__ko__" + new Date().getTime(), e = {};
                return {
                    get: function(c, d) {
                        var e = a(c, !1);
                        return e === n ? n : e[d];
                    },
                    set: function(c, d, e) {
                        if (e !== n || a(c, !1) !== n) a(c, !0)[d] = e;
                    },
                    clear: function(a) {
                        var b = a[d];
                        return b ? (delete e[b], a[d] = null, !0) : !1;
                    },
                    I: function() {
                        return c++ + d;
                    }
                };
            }();
            a.b("utils.domData", a.a.e);
            a.b("utils.domData.clear", a.a.e.clear);
            a.a.F = new function() {
                function b(b, c) {
                    var e = a.a.e.get(b, d);
                    e === n && c && (e = [], a.a.e.set(b, d, e));
                    return e;
                }
                function c(d) {
                    var e = b(d, !1);
                    if (e) for (var e = e.slice(0), l = 0; l < e.length; l++) e[l](d);
                    a.a.e.clear(d);
                    a.a.F.cleanExternalData(d);
                    if (f[d.nodeType]) for (e = d.firstChild; d = e; ) e = d.nextSibling, 8 === d.nodeType && c(d);
                }
                var d = a.a.e.I(), e = {
                    1: !0,
                    8: !0,
                    9: !0
                }, f = {
                    1: !0,
                    9: !0
                };
                return {
                    oa: function(a, c) {
                        if ("function" != typeof c) throw Error("Callback must be a function");
                        b(a, !0).push(c);
                    },
                    pc: function(c, e) {
                        var l = b(c, !1);
                        l && (a.a.La(l, e), 0 == l.length && a.a.e.set(c, d, n));
                    },
                    $: function(b) {
                        if (e[b.nodeType] && (c(b), f[b.nodeType])) {
                            var d = [];
                            a.a.ra(d, b.getElementsByTagName("*"));
                            for (var l = 0, m = d.length; l < m; l++) c(d[l]);
                        }
                        return b;
                    },
                    removeNode: function(b) {
                        a.$(b);
                        b.parentNode && b.parentNode.removeChild(b);
                    },
                    cleanExternalData: function(a) {
                        v && "function" == typeof v.cleanData && v.cleanData([ a ]);
                    }
                };
            }();
            a.$ = a.a.F.$;
            a.removeNode = a.a.F.removeNode;
            a.b("cleanNode", a.$);
            a.b("removeNode", a.removeNode);
            a.b("utils.domNodeDisposal", a.a.F);
            a.b("utils.domNodeDisposal.addDisposeCallback", a.a.F.oa);
            a.b("utils.domNodeDisposal.removeDisposeCallback", a.a.F.pc);
            (function() {
                var b = [ 0, "", "" ], c = [ 1, "<table>", "</table>" ], d = [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ], e = [ 1, "<select multiple='multiple'>", "</select>" ], f = {
                    thead: c,
                    tbody: c,
                    tfoot: c,
                    tr: [ 2, "<table><tbody>", "</tbody></table>" ],
                    td: d,
                    th: d,
                    option: e,
                    optgroup: e
                }, g = 8 >= a.a.C;
                a.a.ma = function(c, d) {
                    var e;
                    if (v) if (v.parseHTML) e = v.parseHTML(c, d) || []; else {
                        if ((e = v.clean([ c ], d)) && e[0]) {
                            for (var h = e[0]; h.parentNode && 11 !== h.parentNode.nodeType; ) h = h.parentNode;
                            h.parentNode && h.parentNode.removeChild(h);
                        }
                    } else {
                        (e = d) || (e = u);
                        var h = e.parentWindow || e.defaultView || x, r = a.a.$a(c).toLowerCase(), q = e.createElement("div"), p;
                        p = (r = r.match(/^<([a-z]+)[ >]/)) && f[r[1]] || b;
                        r = p[0];
                        p = "ignored<div>" + p[1] + c + p[2] + "</div>";
                        "function" == typeof h.innerShiv ? q.appendChild(h.innerShiv(p)) : (g && e.appendChild(q),
                        q.innerHTML = p, g && q.parentNode.removeChild(q));
                        for (;r--; ) q = q.lastChild;
                        e = a.a.V(q.lastChild.childNodes);
                    }
                    return e;
                };
                a.a.Cb = function(b, c) {
                    a.a.ob(b);
                    c = a.a.c(c);
                    if (null !== c && c !== n) if ("string" != typeof c && (c = c.toString()), v) v(b).html(c); else for (var d = a.a.ma(c, b.ownerDocument), e = 0; e < d.length; e++) b.appendChild(d[e]);
                };
            })();
            a.b("utils.parseHtmlFragment", a.a.ma);
            a.b("utils.setHtml", a.a.Cb);
            a.M = function() {
                function b(c, e) {
                    if (c) if (8 == c.nodeType) {
                        var f = a.M.lc(c.nodeValue);
                        null != f && e.push({
                            Lc: c,
                            cd: f
                        });
                    } else if (1 == c.nodeType) for (var f = 0, g = c.childNodes, k = g.length; f < k; f++) b(g[f], e);
                }
                var c = {};
                return {
                    wb: function(a) {
                        if ("function" != typeof a) throw Error("You can only pass a function to ko.memoization.memoize()");
                        var b = (4294967296 * (1 + Math.random()) | 0).toString(16).substring(1) + (4294967296 * (1 + Math.random()) | 0).toString(16).substring(1);
                        c[b] = a;
                        return "<!--[ko_memo:" + b + "]-->";
                    },
                    xc: function(a, b) {
                        var f = c[a];
                        if (f === n) throw Error("Couldn't find any memo with ID " + a + ". Perhaps it's already been unmemoized.");
                        try {
                            return f.apply(null, b || []), !0;
                        } finally {
                            delete c[a];
                        }
                    },
                    yc: function(c, e) {
                        var f = [];
                        b(c, f);
                        for (var g = 0, k = f.length; g < k; g++) {
                            var l = f[g].Lc, m = [ l ];
                            e && a.a.ra(m, e);
                            a.M.xc(f[g].cd, m);
                            l.nodeValue = "";
                            l.parentNode && l.parentNode.removeChild(l);
                        }
                    },
                    lc: function(a) {
                        return (a = a.match(/^\[ko_memo\:(.*?)\]$/)) ? a[1] : null;
                    }
                };
            }();
            a.b("memoization", a.M);
            a.b("memoization.memoize", a.M.wb);
            a.b("memoization.unmemoize", a.M.xc);
            a.b("memoization.parseMemoText", a.M.lc);
            a.b("memoization.unmemoizeDomNodeAndDescendants", a.M.yc);
            a.Y = function() {
                function b() {
                    if (e) for (var b = e, c = 0, m; g < e; ) if (m = d[g++]) {
                        if (g > b) {
                            if (5e3 <= ++c) {
                                g = e;
                                a.a.$b(Error("'Too much recursion' after processing " + c + " task groups."));
                                break;
                            }
                            b = e;
                        }
                        try {
                            m();
                        } catch (h) {
                            a.a.$b(h);
                        }
                    }
                }
                function c() {
                    b();
                    g = e = d.length = 0;
                }
                var d = [], e = 0, f = 1, g = 0;
                return {
                    scheduler: x.MutationObserver ? function(a) {
                        var b = u.createElement("div");
                        new MutationObserver(a).observe(b, {
                            attributes: !0
                        });
                        return function() {
                            b.classList.toggle("foo");
                        };
                    }(c) : u && "onreadystatechange" in u.createElement("script") ? function(a) {
                        var b = u.createElement("script");
                        b.onreadystatechange = function() {
                            b.onreadystatechange = null;
                            u.documentElement.removeChild(b);
                            b = null;
                            a();
                        };
                        u.documentElement.appendChild(b);
                    } : function(a) {
                        setTimeout(a, 0);
                    },
                    Wa: function(b) {
                        e || a.Y.scheduler(c);
                        d[e++] = b;
                        return f++;
                    },
                    cancel: function(a) {
                        a -= f - e;
                        a >= g && a < e && (d[a] = null);
                    },
                    resetForTesting: function() {
                        var a = e - g;
                        g = e = d.length = 0;
                        return a;
                    },
                    md: b
                };
            }();
            a.b("tasks", a.Y);
            a.b("tasks.schedule", a.Y.Wa);
            a.b("tasks.runEarly", a.Y.md);
            a.ya = {
                throttle: function(b, c) {
                    b.throttleEvaluation = c;
                    var d = null;
                    return a.B({
                        read: b,
                        write: function(e) {
                            clearTimeout(d);
                            d = a.a.setTimeout(function() {
                                b(e);
                            }, c);
                        }
                    });
                },
                rateLimit: function(a, c) {
                    var d, e, f;
                    "number" == typeof c ? d = c : (d = c.timeout, e = c.method);
                    a.cb = !1;
                    f = "notifyWhenChangesStop" == e ? V : U;
                    a.Ta(function(a) {
                        return f(a, d);
                    });
                },
                deferred: function(b, c) {
                    if (!0 !== c) throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");
                    b.cb || (b.cb = !0, b.Ta(function(c) {
                        var e;
                        return function() {
                            a.Y.cancel(e);
                            e = a.Y.Wa(c);
                            b.notifySubscribers(n, "dirty");
                        };
                    }));
                },
                notify: function(a, c) {
                    a.equalityComparer = "always" == c ? null : J;
                }
            };
            var T = {
                undefined: 1,
                "boolean": 1,
                number: 1,
                string: 1
            };
            a.b("extenders", a.ya);
            a.vc = function(b, c, d) {
                this.ia = b;
                this.gb = c;
                this.Kc = d;
                this.R = !1;
                a.G(this, "dispose", this.k);
            };
            a.vc.prototype.k = function() {
                this.R = !0;
                this.Kc();
            };
            a.J = function() {
                a.a.Ya(this, D);
                D.rb(this);
            };
            var I = "change", D = {
                rb: function(a) {
                    a.K = {};
                    a.Nb = 1;
                },
                X: function(b, c, d) {
                    var e = this;
                    d = d || I;
                    var f = new a.vc(e, c ? b.bind(c) : b, function() {
                        a.a.La(e.K[d], f);
                        e.Ia && e.Ia(d);
                    });
                    e.sa && e.sa(d);
                    e.K[d] || (e.K[d] = []);
                    e.K[d].push(f);
                    return f;
                },
                notifySubscribers: function(b, c) {
                    c = c || I;
                    c === I && this.zc();
                    if (this.Pa(c)) try {
                        a.l.Ub();
                        for (var d = this.K[c].slice(0), e = 0, f; f = d[e]; ++e) f.R || f.gb(b);
                    } finally {
                        a.l.end();
                    }
                },
                Na: function() {
                    return this.Nb;
                },
                Uc: function(a) {
                    return this.Na() !== a;
                },
                zc: function() {
                    ++this.Nb;
                },
                Ta: function(b) {
                    var c = this, d = a.H(c), e, f, g;
                    c.Ha || (c.Ha = c.notifySubscribers, c.notifySubscribers = W);
                    var k = b(function() {
                        c.Mb = !1;
                        d && g === c && (g = c());
                        e = !1;
                        c.tb(f, g) && c.Ha(f = g);
                    });
                    c.Lb = function(a) {
                        c.Mb = e = !0;
                        g = a;
                        k();
                    };
                    c.Kb = function(a) {
                        e || (f = a, c.Ha(a, "beforeChange"));
                    };
                },
                Pa: function(a) {
                    return this.K[a] && this.K[a].length;
                },
                Sc: function(b) {
                    if (b) return this.K[b] && this.K[b].length || 0;
                    var c = 0;
                    a.a.D(this.K, function(a, b) {
                        "dirty" !== a && (c += b.length);
                    });
                    return c;
                },
                tb: function(a, c) {
                    return !this.equalityComparer || !this.equalityComparer(a, c);
                },
                extend: function(b) {
                    var c = this;
                    b && a.a.D(b, function(b, e) {
                        var f = a.ya[b];
                        "function" == typeof f && (c = f(c, e) || c);
                    });
                    return c;
                }
            };
            a.G(D, "subscribe", D.X);
            a.G(D, "extend", D.extend);
            a.G(D, "getSubscriptionsCount", D.Sc);
            a.a.ka && a.a.Xa(D, Function.prototype);
            a.J.fn = D;
            a.hc = function(a) {
                return null != a && "function" == typeof a.X && "function" == typeof a.notifySubscribers;
            };
            a.b("subscribable", a.J);
            a.b("isSubscribable", a.hc);
            a.va = a.l = function() {
                function b(a) {
                    d.push(e);
                    e = a;
                }
                function c() {
                    e = d.pop();
                }
                var d = [], e, f = 0;
                return {
                    Ub: b,
                    end: c,
                    oc: function(b) {
                        if (e) {
                            if (!a.hc(b)) throw Error("Only subscribable things can act as dependencies");
                            e.gb.call(e.Gc, b, b.Cc || (b.Cc = ++f));
                        }
                    },
                    w: function(a, d, e) {
                        try {
                            return b(), a.apply(d, e || []);
                        } finally {
                            c();
                        }
                    },
                    Aa: function() {
                        if (e) return e.m.Aa();
                    },
                    Sa: function() {
                        if (e) return e.Sa;
                    }
                };
            }();
            a.b("computedContext", a.va);
            a.b("computedContext.getDependenciesCount", a.va.Aa);
            a.b("computedContext.isInitial", a.va.Sa);
            a.b("ignoreDependencies", a.qd = a.l.w);
            var E = a.a.Yb("_latestValue");
            a.N = function(b) {
                function c() {
                    if (0 < arguments.length) return c.tb(c[E], arguments[0]) && (c.ga(), c[E] = arguments[0],
                    c.fa()), this;
                    a.l.oc(c);
                    return c[E];
                }
                c[E] = b;
                a.a.ka || a.a.extend(c, a.J.fn);
                a.J.fn.rb(c);
                a.a.Ya(c, B);
                a.options.deferUpdates && a.ya.deferred(c, !0);
                return c;
            };
            var B = {
                equalityComparer: J,
                t: function() {
                    return this[E];
                },
                fa: function() {
                    this.notifySubscribers(this[E]);
                },
                ga: function() {
                    this.notifySubscribers(this[E], "beforeChange");
                }
            };
            a.a.ka && a.a.Xa(B, a.J.fn);
            var H = a.N.gd = "__ko_proto__";
            B[H] = a.N;
            a.Oa = function(b, c) {
                return null === b || b === n || b[H] === n ? !1 : b[H] === c ? !0 : a.Oa(b[H], c);
            };
            a.H = function(b) {
                return a.Oa(b, a.N);
            };
            a.Ba = function(b) {
                return "function" == typeof b && b[H] === a.N || "function" == typeof b && b[H] === a.B && b.Vc ? !0 : !1;
            };
            a.b("observable", a.N);
            a.b("isObservable", a.H);
            a.b("isWriteableObservable", a.Ba);
            a.b("isWritableObservable", a.Ba);
            a.b("observable.fn", B);
            a.G(B, "peek", B.t);
            a.G(B, "valueHasMutated", B.fa);
            a.G(B, "valueWillMutate", B.ga);
            a.la = function(b) {
                b = b || [];
                if ("object" != typeof b || !("length" in b)) throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");
                b = a.N(b);
                a.a.Ya(b, a.la.fn);
                return b.extend({
                    trackArrayChanges: !0
                });
            };
            a.la.fn = {
                remove: function(b) {
                    for (var c = this.t(), d = [], e = "function" != typeof b || a.H(b) ? function(a) {
                        return a === b;
                    } : b, f = 0; f < c.length; f++) {
                        var g = c[f];
                        e(g) && (0 === d.length && this.ga(), d.push(g), c.splice(f, 1), f--);
                    }
                    d.length && this.fa();
                    return d;
                },
                removeAll: function(b) {
                    if (b === n) {
                        var c = this.t(), d = c.slice(0);
                        this.ga();
                        c.splice(0, c.length);
                        this.fa();
                        return d;
                    }
                    return b ? this.remove(function(c) {
                        return 0 <= a.a.o(b, c);
                    }) : [];
                },
                destroy: function(b) {
                    var c = this.t(), d = "function" != typeof b || a.H(b) ? function(a) {
                        return a === b;
                    } : b;
                    this.ga();
                    for (var e = c.length - 1; 0 <= e; e--) d(c[e]) && (c[e]._destroy = !0);
                    this.fa();
                },
                destroyAll: function(b) {
                    return b === n ? this.destroy(function() {
                        return !0;
                    }) : b ? this.destroy(function(c) {
                        return 0 <= a.a.o(b, c);
                    }) : [];
                },
                indexOf: function(b) {
                    var c = this();
                    return a.a.o(c, b);
                },
                replace: function(a, c) {
                    var d = this.indexOf(a);
                    0 <= d && (this.ga(), this.t()[d] = c, this.fa());
                }
            };
            a.a.ka && a.a.Xa(a.la.fn, a.N.fn);
            a.a.q("pop push reverse shift sort splice unshift".split(" "), function(b) {
                a.la.fn[b] = function() {
                    var a = this.t();
                    this.ga();
                    this.Vb(a, b, arguments);
                    var d = a[b].apply(a, arguments);
                    this.fa();
                    return d === a ? this : d;
                };
            });
            a.a.q([ "slice" ], function(b) {
                a.la.fn[b] = function() {
                    var a = this();
                    return a[b].apply(a, arguments);
                };
            });
            a.b("observableArray", a.la);
            a.ya.trackArrayChanges = function(b, c) {
                function d() {
                    if (!e) {
                        e = !0;
                        var c = b.notifySubscribers;
                        b.notifySubscribers = function(a, b) {
                            b && b !== I || ++k;
                            return c.apply(this, arguments);
                        };
                        var d = [].concat(b.t() || []);
                        f = null;
                        g = b.X(function(c) {
                            c = [].concat(c || []);
                            if (b.Pa("arrayChange")) {
                                var e;
                                if (!f || 1 < k) f = a.a.ib(d, c, b.hb);
                                e = f;
                            }
                            d = c;
                            f = null;
                            k = 0;
                            e && e.length && b.notifySubscribers(e, "arrayChange");
                        });
                    }
                }
                b.hb = {};
                c && "object" == typeof c && a.a.extend(b.hb, c);
                b.hb.sparse = !0;
                if (!b.Vb) {
                    var e = !1, f = null, g, k = 0, l = b.sa, m = b.Ia;
                    b.sa = function(a) {
                        l && l.call(b, a);
                        "arrayChange" === a && d();
                    };
                    b.Ia = function(a) {
                        m && m.call(b, a);
                        "arrayChange" !== a || b.Pa("arrayChange") || (g.k(), e = !1);
                    };
                    b.Vb = function(b, c, d) {
                        function m(a, b, c) {
                            return l[l.length] = {
                                status: a,
                                value: b,
                                index: c
                            };
                        }
                        if (e && !k) {
                            var l = [], g = b.length, t = d.length, G = 0;
                            switch (c) {
                              case "push":
                                G = g;

                              case "unshift":
                                for (c = 0; c < t; c++) m("added", d[c], G + c);
                                break;

                              case "pop":
                                G = g - 1;

                              case "shift":
                                g && m("deleted", b[G], G);
                                break;

                              case "splice":
                                c = Math.min(Math.max(0, 0 > d[0] ? g + d[0] : d[0]), g);
                                for (var g = 1 === t ? g : Math.min(c + (d[1] || 0), g), t = c + t - 2, G = Math.max(g, t), P = [], n = [], Q = 2; c < G; ++c,
                                ++Q) c < g && n.push(m("deleted", b[c], c)), c < t && P.push(m("added", d[Q], c));
                                a.a.dc(n, P);
                                break;

                              default:
                                return;
                            }
                            f = l;
                        }
                    };
                }
            };
            var s = a.a.Yb("_state");
            a.m = a.B = function(b, c, d) {
                function e() {
                    if (0 < arguments.length) {
                        if ("function" === typeof f) f.apply(g.pb, arguments); else throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
                        return this;
                    }
                    a.l.oc(e);
                    (g.S || g.s && e.Qa()) && e.aa();
                    return g.T;
                }
                "object" === typeof b ? d = b : (d = d || {}, b && (d.read = b));
                if ("function" != typeof d.read) throw Error("Pass a function that returns the value of the ko.computed");
                var f = d.write, g = {
                    T: n,
                    S: !0,
                    Ra: !1,
                    Fb: !1,
                    R: !1,
                    Va: !1,
                    s: !1,
                    jd: d.read,
                    pb: c || d.owner,
                    i: d.disposeWhenNodeIsRemoved || d.i || null,
                    wa: d.disposeWhen || d.wa,
                    mb: null,
                    r: {},
                    L: 0,
                    bc: null
                };
                e[s] = g;
                e.Vc = "function" === typeof f;
                a.a.ka || a.a.extend(e, a.J.fn);
                a.J.fn.rb(e);
                a.a.Ya(e, z);
                d.pure ? (g.Va = !0, g.s = !0, a.a.extend(e, $)) : d.deferEvaluation && a.a.extend(e, aa);
                a.options.deferUpdates && a.ya.deferred(e, !0);
                g.i && (g.Fb = !0, g.i.nodeType || (g.i = null));
                g.s || d.deferEvaluation || e.aa();
                g.i && e.ba() && a.a.F.oa(g.i, g.mb = function() {
                    e.k();
                });
                return e;
            };
            var z = {
                equalityComparer: J,
                Aa: function() {
                    return this[s].L;
                },
                Pb: function(a, c, d) {
                    if (this[s].Va && c === this) throw Error("A 'pure' computed must not be called recursively");
                    this[s].r[a] = d;
                    d.Ga = this[s].L++;
                    d.na = c.Na();
                },
                Qa: function() {
                    var a, c, d = this[s].r;
                    for (a in d) if (d.hasOwnProperty(a) && (c = d[a], c.ia.Uc(c.na))) return !0;
                },
                bd: function() {
                    this.Fa && !this[s].Ra && this.Fa();
                },
                ba: function() {
                    return this[s].S || 0 < this[s].L;
                },
                ld: function() {
                    this.Mb || this.ac();
                },
                uc: function(a) {
                    if (a.cb && !this[s].i) {
                        var c = a.X(this.bd, this, "dirty"), d = a.X(this.ld, this);
                        return {
                            ia: a,
                            k: function() {
                                c.k();
                                d.k();
                            }
                        };
                    }
                    return a.X(this.ac, this);
                },
                ac: function() {
                    var b = this, c = b.throttleEvaluation;
                    c && 0 <= c ? (clearTimeout(this[s].bc), this[s].bc = a.a.setTimeout(function() {
                        b.aa(!0);
                    }, c)) : b.Fa ? b.Fa() : b.aa(!0);
                },
                aa: function(b) {
                    var c = this[s], d = c.wa;
                    if (!c.Ra && !c.R) {
                        if (c.i && !a.a.nb(c.i) || d && d()) {
                            if (!c.Fb) {
                                this.k();
                                return;
                            }
                        } else c.Fb = !1;
                        c.Ra = !0;
                        try {
                            this.Qc(b);
                        } finally {
                            c.Ra = !1;
                        }
                        c.L || this.k();
                    }
                },
                Qc: function(b) {
                    var c = this[s], d = c.Va ? n : !c.L, e = {
                        Hc: this,
                        Ma: c.r,
                        lb: c.L
                    };
                    a.l.Ub({
                        Gc: e,
                        gb: Y,
                        m: this,
                        Sa: d
                    });
                    c.r = {};
                    c.L = 0;
                    e = this.Pc(c, e);
                    this.tb(c.T, e) && (c.s || this.notifySubscribers(c.T, "beforeChange"), c.T = e,
                    c.s ? this.zc() : b && this.notifySubscribers(c.T));
                    d && this.notifySubscribers(c.T, "awake");
                },
                Pc: function(b, c) {
                    try {
                        var d = b.jd;
                        return b.pb ? d.call(b.pb) : d();
                    } finally {
                        a.l.end(), c.lb && !b.s && a.a.D(c.Ma, X), b.S = !1;
                    }
                },
                t: function() {
                    var a = this[s];
                    (a.S && !a.L || a.s && this.Qa()) && this.aa();
                    return a.T;
                },
                Ta: function(b) {
                    a.J.fn.Ta.call(this, b);
                    this.Fa = function() {
                        this.Kb(this[s].T);
                        this[s].S = !0;
                        this.Lb(this);
                    };
                },
                k: function() {
                    var b = this[s];
                    !b.s && b.r && a.a.D(b.r, function(a, b) {
                        b.k && b.k();
                    });
                    b.i && b.mb && a.a.F.pc(b.i, b.mb);
                    b.r = null;
                    b.L = 0;
                    b.R = !0;
                    b.S = !1;
                    b.s = !1;
                    b.i = null;
                }
            }, $ = {
                sa: function(b) {
                    var c = this, d = c[s];
                    if (!d.R && d.s && "change" == b) {
                        d.s = !1;
                        if (d.S || c.Qa()) d.r = null, d.L = 0, d.S = !0, c.aa(); else {
                            var e = [];
                            a.a.D(d.r, function(a, b) {
                                e[b.Ga] = a;
                            });
                            a.a.q(e, function(a, b) {
                                var e = d.r[a], l = c.uc(e.ia);
                                l.Ga = b;
                                l.na = e.na;
                                d.r[a] = l;
                            });
                        }
                        d.R || c.notifySubscribers(d.T, "awake");
                    }
                },
                Ia: function(b) {
                    var c = this[s];
                    c.R || "change" != b || this.Pa("change") || (a.a.D(c.r, function(a, b) {
                        b.k && (c.r[a] = {
                            ia: b.ia,
                            Ga: b.Ga,
                            na: b.na
                        }, b.k());
                    }), c.s = !0, this.notifySubscribers(n, "asleep"));
                },
                Na: function() {
                    var b = this[s];
                    b.s && (b.S || this.Qa()) && this.aa();
                    return a.J.fn.Na.call(this);
                }
            }, aa = {
                sa: function(a) {
                    "change" != a && "beforeChange" != a || this.t();
                }
            };
            a.a.ka && a.a.Xa(z, a.J.fn);
            var R = a.N.gd;
            a.m[R] = a.N;
            z[R] = a.m;
            a.Xc = function(b) {
                return a.Oa(b, a.m);
            };
            a.Yc = function(b) {
                return a.Oa(b, a.m) && b[s] && b[s].Va;
            };
            a.b("computed", a.m);
            a.b("dependentObservable", a.m);
            a.b("isComputed", a.Xc);
            a.b("isPureComputed", a.Yc);
            a.b("computed.fn", z);
            a.G(z, "peek", z.t);
            a.G(z, "dispose", z.k);
            a.G(z, "isActive", z.ba);
            a.G(z, "getDependenciesCount", z.Aa);
            a.nc = function(b, c) {
                if ("function" === typeof b) return a.m(b, c, {
                    pure: !0
                });
                b = a.a.extend({}, b);
                b.pure = !0;
                return a.m(b, c);
            };
            a.b("pureComputed", a.nc);
            (function() {
                function b(a, f, g) {
                    g = g || new d();
                    a = f(a);
                    if ("object" != typeof a || null === a || a === n || a instanceof RegExp || a instanceof Date || a instanceof String || a instanceof Number || a instanceof Boolean) return a;
                    var k = a instanceof Array ? [] : {};
                    g.save(a, k);
                    c(a, function(c) {
                        var d = f(a[c]);
                        switch (typeof d) {
                          case "boolean":
                          case "number":
                          case "string":
                          case "function":
                            k[c] = d;
                            break;

                          case "object":
                          case "undefined":
                            var h = g.get(d);
                            k[c] = h !== n ? h : b(d, f, g);
                        }
                    });
                    return k;
                }
                function c(a, b) {
                    if (a instanceof Array) {
                        for (var c = 0; c < a.length; c++) b(c);
                        "function" == typeof a.toJSON && b("toJSON");
                    } else for (c in a) b(c);
                }
                function d() {
                    this.keys = [];
                    this.Ib = [];
                }
                a.wc = function(c) {
                    if (0 == arguments.length) throw Error("When calling ko.toJS, pass the object you want to convert.");
                    return b(c, function(b) {
                        for (var c = 0; a.H(b) && 10 > c; c++) b = b();
                        return b;
                    });
                };
                a.toJSON = function(b, c, d) {
                    b = a.wc(b);
                    return a.a.Eb(b, c, d);
                };
                d.prototype = {
                    save: function(b, c) {
                        var d = a.a.o(this.keys, b);
                        0 <= d ? this.Ib[d] = c : (this.keys.push(b), this.Ib.push(c));
                    },
                    get: function(b) {
                        b = a.a.o(this.keys, b);
                        return 0 <= b ? this.Ib[b] : n;
                    }
                };
            })();
            a.b("toJS", a.wc);
            a.b("toJSON", a.toJSON);
            (function() {
                a.j = {
                    u: function(b) {
                        switch (a.a.A(b)) {
                          case "option":
                            return !0 === b.__ko__hasDomDataOptionValue__ ? a.a.e.get(b, a.d.options.xb) : 7 >= a.a.C ? b.getAttributeNode("value") && b.getAttributeNode("value").specified ? b.value : b.text : b.value;

                          case "select":
                            return 0 <= b.selectedIndex ? a.j.u(b.options[b.selectedIndex]) : n;

                          default:
                            return b.value;
                        }
                    },
                    ha: function(b, c, d) {
                        switch (a.a.A(b)) {
                          case "option":
                            switch (typeof c) {
                              case "string":
                                a.a.e.set(b, a.d.options.xb, n);
                                "__ko__hasDomDataOptionValue__" in b && delete b.__ko__hasDomDataOptionValue__;
                                b.value = c;
                                break;

                              default:
                                a.a.e.set(b, a.d.options.xb, c), b.__ko__hasDomDataOptionValue__ = !0, b.value = "number" === typeof c ? c : "";
                            }
                            break;

                          case "select":
                            if ("" === c || null === c) c = n;
                            for (var e = -1, f = 0, g = b.options.length, k; f < g; ++f) if (k = a.j.u(b.options[f]),
                            k == c || "" == k && c === n) {
                                e = f;
                                break;
                            }
                            if (d || 0 <= e || c === n && 1 < b.size) b.selectedIndex = e;
                            break;

                          default:
                            if (null === c || c === n) c = "";
                            b.value = c;
                        }
                    }
                };
            })();
            a.b("selectExtensions", a.j);
            a.b("selectExtensions.readValue", a.j.u);
            a.b("selectExtensions.writeValue", a.j.ha);
            a.h = function() {
                function b(b) {
                    b = a.a.$a(b);
                    123 === b.charCodeAt(0) && (b = b.slice(1, -1));
                    var c = [], d = b.match(e), r, k = [], p = 0;
                    if (d) {
                        d.push(",");
                        for (var A = 0, y; y = d[A]; ++A) {
                            var t = y.charCodeAt(0);
                            if (44 === t) {
                                if (0 >= p) {
                                    c.push(r && k.length ? {
                                        key: r,
                                        value: k.join("")
                                    } : {
                                        unknown: r || k.join("")
                                    });
                                    r = p = 0;
                                    k = [];
                                    continue;
                                }
                            } else if (58 === t) {
                                if (!p && !r && 1 === k.length) {
                                    r = k.pop();
                                    continue;
                                }
                            } else 47 === t && A && 1 < y.length ? (t = d[A - 1].match(f)) && !g[t[0]] && (b = b.substr(b.indexOf(y) + 1),
                            d = b.match(e), d.push(","), A = -1, y = "/") : 40 === t || 123 === t || 91 === t ? ++p : 41 === t || 125 === t || 93 === t ? --p : r || k.length || 34 !== t && 39 !== t || (y = y.slice(1, -1));
                            k.push(y);
                        }
                    }
                    return c;
                }
                var c = [ "true", "false", "null", "undefined" ], d = /^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i, e = RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]", "g"), f = /[\])"'A-Za-z0-9_$]+$/, g = {
                    "in": 1,
                    "return": 1,
                    "typeof": 1
                }, k = {};
                return {
                    ta: [],
                    ea: k,
                    yb: b,
                    Ua: function(e, m) {
                        function h(b, e) {
                            var m;
                            if (!A) {
                                var l = a.getBindingHandler(b);
                                if (l && l.preprocess && !(e = l.preprocess(e, b, h))) return;
                                if (l = k[b]) m = e, 0 <= a.a.o(c, m) ? m = !1 : (l = m.match(d), m = null === l ? !1 : l[1] ? "Object(" + l[1] + ")" + l[2] : m),
                                l = m;
                                l && g.push("'" + b + "':function(_z){" + m + "=_z}");
                            }
                            p && (e = "function(){return " + e + " }");
                            f.push("'" + b + "':" + e);
                        }
                        m = m || {};
                        var f = [], g = [], p = m.valueAccessors, A = m.bindingParams, y = "string" === typeof e ? b(e) : e;
                        a.a.q(y, function(a) {
                            h(a.key || a.unknown, a.value);
                        });
                        g.length && h("_ko_property_writers", "{" + g.join(",") + " }");
                        return f.join(",");
                    },
                    ad: function(a, b) {
                        for (var c = 0; c < a.length; c++) if (a[c].key == b) return !0;
                        return !1;
                    },
                    Ea: function(b, c, d, e, f) {
                        if (b && a.H(b)) !a.Ba(b) || f && b.t() === e || b(e); else if ((b = c.get("_ko_property_writers")) && b[d]) b[d](e);
                    }
                };
            }();
            a.b("expressionRewriting", a.h);
            a.b("expressionRewriting.bindingRewriteValidators", a.h.ta);
            a.b("expressionRewriting.parseObjectLiteral", a.h.yb);
            a.b("expressionRewriting.preProcessBindings", a.h.Ua);
            a.b("expressionRewriting._twoWayBindings", a.h.ea);
            a.b("jsonExpressionRewriting", a.h);
            a.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson", a.h.Ua);
            (function() {
                function b(a) {
                    return 8 == a.nodeType && g.test(f ? a.text : a.nodeValue);
                }
                function c(a) {
                    return 8 == a.nodeType && k.test(f ? a.text : a.nodeValue);
                }
                function d(a, d) {
                    for (var e = a, f = 1, l = []; e = e.nextSibling; ) {
                        if (c(e) && (f--, 0 === f)) return l;
                        l.push(e);
                        b(e) && f++;
                    }
                    if (!d) throw Error("Cannot find closing comment tag to match: " + a.nodeValue);
                    return null;
                }
                function e(a, b) {
                    var c = d(a, b);
                    return c ? 0 < c.length ? c[c.length - 1].nextSibling : a.nextSibling : null;
                }
                var f = u && "<!--test-->" === u.createComment("test").text, g = f ? /^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/ : /^\s*ko(?:\s+([\s\S]+))?\s*$/, k = f ? /^\x3c!--\s*\/ko\s*--\x3e$/ : /^\s*\/ko\s*$/, l = {
                    ul: !0,
                    ol: !0
                };
                a.f = {
                    Z: {},
                    childNodes: function(a) {
                        return b(a) ? d(a) : a.childNodes;
                    },
                    xa: function(c) {
                        if (b(c)) {
                            c = a.f.childNodes(c);
                            for (var d = 0, e = c.length; d < e; d++) a.removeNode(c[d]);
                        } else a.a.ob(c);
                    },
                    da: function(c, d) {
                        if (b(c)) {
                            a.f.xa(c);
                            for (var e = c.nextSibling, f = 0, l = d.length; f < l; f++) e.parentNode.insertBefore(d[f], e);
                        } else a.a.da(c, d);
                    },
                    mc: function(a, c) {
                        b(a) ? a.parentNode.insertBefore(c, a.nextSibling) : a.firstChild ? a.insertBefore(c, a.firstChild) : a.appendChild(c);
                    },
                    gc: function(c, d, e) {
                        e ? b(c) ? c.parentNode.insertBefore(d, e.nextSibling) : e.nextSibling ? c.insertBefore(d, e.nextSibling) : c.appendChild(d) : a.f.mc(c, d);
                    },
                    firstChild: function(a) {
                        return b(a) ? !a.nextSibling || c(a.nextSibling) ? null : a.nextSibling : a.firstChild;
                    },
                    nextSibling: function(a) {
                        b(a) && (a = e(a));
                        return a.nextSibling && c(a.nextSibling) ? null : a.nextSibling;
                    },
                    Tc: b,
                    pd: function(a) {
                        return (a = (f ? a.text : a.nodeValue).match(g)) ? a[1] : null;
                    },
                    kc: function(d) {
                        if (l[a.a.A(d)]) {
                            var h = d.firstChild;
                            if (h) {
                                do if (1 === h.nodeType) {
                                    var f;
                                    f = h.firstChild;
                                    var g = null;
                                    if (f) {
                                        do if (g) g.push(f); else if (b(f)) {
                                            var k = e(f, !0);
                                            k ? f = k : g = [ f ];
                                        } else c(f) && (g = [ f ]); while (f = f.nextSibling);
                                    }
                                    if (f = g) for (g = h.nextSibling, k = 0; k < f.length; k++) g ? d.insertBefore(f[k], g) : d.appendChild(f[k]);
                                } while (h = h.nextSibling);
                            }
                        }
                    }
                };
            })();
            a.b("virtualElements", a.f);
            a.b("virtualElements.allowedBindings", a.f.Z);
            a.b("virtualElements.emptyNode", a.f.xa);
            a.b("virtualElements.insertAfter", a.f.gc);
            a.b("virtualElements.prepend", a.f.mc);
            a.b("virtualElements.setDomNodeChildren", a.f.da);
            (function() {
                a.Q = function() {
                    this.Fc = {};
                };
                a.a.extend(a.Q.prototype, {
                    nodeHasBindings: function(b) {
                        switch (b.nodeType) {
                          case 1:
                            return null != b.getAttribute("data-bind") || a.g.getComponentNameForNode(b);

                          case 8:
                            return a.f.Tc(b);

                          default:
                            return !1;
                        }
                    },
                    getBindings: function(b, c) {
                        var d = this.getBindingsString(b, c), d = d ? this.parseBindingsString(d, c, b) : null;
                        return a.g.Ob(d, b, c, !1);
                    },
                    getBindingAccessors: function(b, c) {
                        var d = this.getBindingsString(b, c), d = d ? this.parseBindingsString(d, c, b, {
                            valueAccessors: !0
                        }) : null;
                        return a.g.Ob(d, b, c, !0);
                    },
                    getBindingsString: function(b) {
                        switch (b.nodeType) {
                          case 1:
                            return b.getAttribute("data-bind");

                          case 8:
                            return a.f.pd(b);

                          default:
                            return null;
                        }
                    },
                    parseBindingsString: function(b, c, d, e) {
                        try {
                            var f = this.Fc, g = b + (e && e.valueAccessors || ""), k;
                            if (!(k = f[g])) {
                                var l, m = "with($context){with($data||{}){return{" + a.h.Ua(b, e) + "}}}";
                                l = new Function("$context", "$element", m);
                                k = f[g] = l;
                            }
                            return k(c, d);
                        } catch (h) {
                            throw h.message = "Unable to parse bindings.\nBindings value: " + b + "\nMessage: " + h.message,
                            h;
                        }
                    }
                });
                a.Q.instance = new a.Q();
            })();
            a.b("bindingProvider", a.Q);
            (function() {
                function b(a) {
                    return function() {
                        return a;
                    };
                }
                function c(a) {
                    return a();
                }
                function d(b) {
                    return a.a.Ca(a.l.w(b), function(a, c) {
                        return function() {
                            return b()[c];
                        };
                    });
                }
                function e(c, e, h) {
                    return "function" === typeof c ? d(c.bind(null, e, h)) : a.a.Ca(c, b);
                }
                function f(a, b) {
                    return d(this.getBindings.bind(this, a, b));
                }
                function g(b, c, d) {
                    var e, h = a.f.firstChild(c), f = a.Q.instance, m = f.preprocessNode;
                    if (m) {
                        for (;e = h; ) h = a.f.nextSibling(e), m.call(f, e);
                        h = a.f.firstChild(c);
                    }
                    for (;e = h; ) h = a.f.nextSibling(e), k(b, e, d);
                }
                function k(b, c, d) {
                    var e = !0, h = 1 === c.nodeType;
                    h && a.f.kc(c);
                    if (h && d || a.Q.instance.nodeHasBindings(c)) e = m(c, null, b, d).shouldBindDescendants;
                    e && !r[a.a.A(c)] && g(b, c, !h);
                }
                function l(b) {
                    var c = [], d = {}, e = [];
                    a.a.D(b, function Z(h) {
                        if (!d[h]) {
                            var f = a.getBindingHandler(h);
                            f && (f.after && (e.push(h), a.a.q(f.after, function(c) {
                                if (b[c]) {
                                    if (-1 !== a.a.o(e, c)) throw Error("Cannot combine the following bindings, because they have a cyclic dependency: " + e.join(", "));
                                    Z(c);
                                }
                            }), e.length--), c.push({
                                key: h,
                                fc: f
                            }));
                            d[h] = !0;
                        }
                    });
                    return c;
                }
                function m(b, d, e, h) {
                    var m = a.a.e.get(b, q);
                    if (!d) {
                        if (m) throw Error("You cannot apply bindings multiple times to the same element.");
                        a.a.e.set(b, q, !0);
                    }
                    !m && h && a.tc(b, e);
                    var g;
                    if (d && "function" !== typeof d) g = d; else {
                        var k = a.Q.instance, r = k.getBindingAccessors || f, p = a.B(function() {
                            (g = d ? d(e, b) : r.call(k, b, e)) && e.P && e.P();
                            return g;
                        }, null, {
                            i: b
                        });
                        g && p.ba() || (p = null);
                    }
                    var u;
                    if (g) {
                        var v = p ? function(a) {
                            return function() {
                                return c(p()[a]);
                            };
                        } : function(a) {
                            return g[a];
                        }, s = function() {
                            return a.a.Ca(p ? p() : g, c);
                        };
                        s.get = function(a) {
                            return g[a] && c(v(a));
                        };
                        s.has = function(a) {
                            return a in g;
                        };
                        h = l(g);
                        a.a.q(h, function(c) {
                            var d = c.fc.init, h = c.fc.update, f = c.key;
                            if (8 === b.nodeType && !a.f.Z[f]) throw Error("The binding '" + f + "' cannot be used with virtual elements");
                            try {
                                "function" == typeof d && a.l.w(function() {
                                    var a = d(b, v(f), s, e.$data, e);
                                    if (a && a.controlsDescendantBindings) {
                                        if (u !== n) throw Error("Multiple bindings (" + u + " and " + f + ") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");
                                        u = f;
                                    }
                                }), "function" == typeof h && a.B(function() {
                                    h(b, v(f), s, e.$data, e);
                                }, null, {
                                    i: b
                                });
                            } catch (m) {
                                throw m.message = 'Unable to process binding "' + f + ": " + g[f] + '"\nMessage: ' + m.message,
                                m;
                            }
                        });
                    }
                    return {
                        shouldBindDescendants: u === n
                    };
                }
                function h(b) {
                    return b && b instanceof a.U ? b : new a.U(b);
                }
                a.d = {};
                var r = {
                    script: !0,
                    textarea: !0,
                    template: !0
                };
                a.getBindingHandler = function(b) {
                    return a.d[b];
                };
                a.U = function(b, c, d, e) {
                    var h = this, f = "function" == typeof b && !a.H(b), m, g = a.B(function() {
                        var m = f ? b() : b, l = a.a.c(m);
                        c ? (c.P && c.P(), a.a.extend(h, c), g && (h.P = g)) : (h.$parents = [], h.$root = l,
                        h.ko = a);
                        h.$rawData = m;
                        h.$data = l;
                        d && (h[d] = l);
                        e && e(h, c, l);
                        return h.$data;
                    }, null, {
                        wa: function() {
                            return m && !a.a.Qb(m);
                        },
                        i: !0
                    });
                    g.ba() && (h.P = g, g.equalityComparer = null, m = [], g.Ac = function(b) {
                        m.push(b);
                        a.a.F.oa(b, function(b) {
                            a.a.La(m, b);
                            m.length || (g.k(), h.P = g = n);
                        });
                    });
                };
                a.U.prototype.createChildContext = function(b, c, d) {
                    return new a.U(b, this, c, function(a, b) {
                        a.$parentContext = b;
                        a.$parent = b.$data;
                        a.$parents = (b.$parents || []).slice(0);
                        a.$parents.unshift(a.$parent);
                        d && d(a);
                    });
                };
                a.U.prototype.extend = function(b) {
                    return new a.U(this.P || this.$data, this, null, function(c, d) {
                        c.$rawData = d.$rawData;
                        a.a.extend(c, "function" == typeof b ? b() : b);
                    });
                };
                var q = a.a.e.I(), p = a.a.e.I();
                a.tc = function(b, c) {
                    if (2 == arguments.length) a.a.e.set(b, p, c), c.P && c.P.Ac(b); else return a.a.e.get(b, p);
                };
                a.Ja = function(b, c, d) {
                    1 === b.nodeType && a.f.kc(b);
                    return m(b, c, h(d), !0);
                };
                a.Dc = function(b, c, d) {
                    d = h(d);
                    return a.Ja(b, e(c, d, b), d);
                };
                a.eb = function(a, b) {
                    1 !== b.nodeType && 8 !== b.nodeType || g(h(a), b, !0);
                };
                a.Rb = function(a, b) {
                    !v && x.jQuery && (v = x.jQuery);
                    if (b && 1 !== b.nodeType && 8 !== b.nodeType) throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");
                    b = b || x.document.body;
                    k(h(a), b, !0);
                };
                a.kb = function(b) {
                    switch (b.nodeType) {
                      case 1:
                      case 8:
                        var c = a.tc(b);
                        if (c) return c;
                        if (b.parentNode) return a.kb(b.parentNode);
                    }
                    return n;
                };
                a.Jc = function(b) {
                    return (b = a.kb(b)) ? b.$data : n;
                };
                a.b("bindingHandlers", a.d);
                a.b("applyBindings", a.Rb);
                a.b("applyBindingsToDescendants", a.eb);
                a.b("applyBindingAccessorsToNode", a.Ja);
                a.b("applyBindingsToNode", a.Dc);
                a.b("contextFor", a.kb);
                a.b("dataFor", a.Jc);
            })();
            (function(b) {
                function c(c, e) {
                    var m = f.hasOwnProperty(c) ? f[c] : b, h;
                    m ? m.X(e) : (m = f[c] = new a.J(), m.X(e), d(c, function(b, d) {
                        var e = !(!d || !d.synchronous);
                        g[c] = {
                            definition: b,
                            Zc: e
                        };
                        delete f[c];
                        h || e ? m.notifySubscribers(b) : a.Y.Wa(function() {
                            m.notifySubscribers(b);
                        });
                    }), h = !0);
                }
                function d(a, b) {
                    e("getConfig", [ a ], function(c) {
                        c ? e("loadComponent", [ a, c ], function(a) {
                            b(a, c);
                        }) : b(null, null);
                    });
                }
                function e(c, d, f, h) {
                    h || (h = a.g.loaders.slice(0));
                    var g = h.shift();
                    if (g) {
                        var q = g[c];
                        if (q) {
                            var p = !1;
                            if (q.apply(g, d.concat(function(a) {
                                p ? f(null) : null !== a ? f(a) : e(c, d, f, h);
                            })) !== b && (p = !0, !g.suppressLoaderExceptions)) throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.");
                        } else e(c, d, f, h);
                    } else f(null);
                }
                var f = {}, g = {};
                a.g = {
                    get: function(d, e) {
                        var f = g.hasOwnProperty(d) ? g[d] : b;
                        f ? f.Zc ? a.l.w(function() {
                            e(f.definition);
                        }) : a.Y.Wa(function() {
                            e(f.definition);
                        }) : c(d, e);
                    },
                    Xb: function(a) {
                        delete g[a];
                    },
                    Jb: e
                };
                a.g.loaders = [];
                a.b("components", a.g);
                a.b("components.get", a.g.get);
                a.b("components.clearCachedDefinition", a.g.Xb);
            })();
            (function() {
                function b(b, c, d, e) {
                    function g() {
                        0 === --y && e(k);
                    }
                    var k = {}, y = 2, t = d.template;
                    d = d.viewModel;
                    t ? f(c, t, function(c) {
                        a.g.Jb("loadTemplate", [ b, c ], function(a) {
                            k.template = a;
                            g();
                        });
                    }) : g();
                    d ? f(c, d, function(c) {
                        a.g.Jb("loadViewModel", [ b, c ], function(a) {
                            k[l] = a;
                            g();
                        });
                    }) : g();
                }
                function c(a, b, d) {
                    if ("function" === typeof b) d(function(a) {
                        return new b(a);
                    }); else if ("function" === typeof b[l]) d(b[l]); else if ("instance" in b) {
                        var e = b.instance;
                        d(function() {
                            return e;
                        });
                    } else "viewModel" in b ? c(a, b.viewModel, d) : a("Unknown viewModel value: " + b);
                }
                function d(b) {
                    switch (a.a.A(b)) {
                      case "script":
                        return a.a.ma(b.text);

                      case "textarea":
                        return a.a.ma(b.value);

                      case "template":
                        if (e(b.content)) return a.a.ua(b.content.childNodes);
                    }
                    return a.a.ua(b.childNodes);
                }
                function e(a) {
                    return x.DocumentFragment ? a instanceof DocumentFragment : a && 11 === a.nodeType;
                }
                function f(a, b, c) {
                    "string" === typeof b.require ? O || x.require ? (O || x.require)([ b.require ], c) : a("Uses require, but no AMD loader is present") : c(b);
                }
                function g(a) {
                    return function(b) {
                        throw Error("Component '" + a + "': " + b);
                    };
                }
                var k = {};
                a.g.register = function(b, c) {
                    if (!c) throw Error("Invalid configuration for " + b);
                    if (a.g.ub(b)) throw Error("Component " + b + " is already registered");
                    k[b] = c;
                };
                a.g.ub = function(a) {
                    return k.hasOwnProperty(a);
                };
                a.g.od = function(b) {
                    delete k[b];
                    a.g.Xb(b);
                };
                a.g.Zb = {
                    getConfig: function(a, b) {
                        b(k.hasOwnProperty(a) ? k[a] : null);
                    },
                    loadComponent: function(a, c, d) {
                        var e = g(a);
                        f(e, c, function(c) {
                            b(a, e, c, d);
                        });
                    },
                    loadTemplate: function(b, c, f) {
                        b = g(b);
                        if ("string" === typeof c) f(a.a.ma(c)); else if (c instanceof Array) f(c); else if (e(c)) f(a.a.V(c.childNodes)); else if (c.element) if (c = c.element,
                        x.HTMLElement ? c instanceof HTMLElement : c && c.tagName && 1 === c.nodeType) f(d(c)); else if ("string" === typeof c) {
                            var l = u.getElementById(c);
                            l ? f(d(l)) : b("Cannot find element with ID " + c);
                        } else b("Unknown element type: " + c); else b("Unknown template value: " + c);
                    },
                    loadViewModel: function(a, b, d) {
                        c(g(a), b, d);
                    }
                };
                var l = "createViewModel";
                a.b("components.register", a.g.register);
                a.b("components.isRegistered", a.g.ub);
                a.b("components.unregister", a.g.od);
                a.b("components.defaultLoader", a.g.Zb);
                a.g.loaders.push(a.g.Zb);
                a.g.Bc = k;
            })();
            (function() {
                function b(b, e) {
                    var f = b.getAttribute("params");
                    if (f) {
                        var f = c.parseBindingsString(f, e, b, {
                            valueAccessors: !0,
                            bindingParams: !0
                        }), f = a.a.Ca(f, function(c) {
                            return a.m(c, null, {
                                i: b
                            });
                        }), g = a.a.Ca(f, function(c) {
                            var e = c.t();
                            return c.ba() ? a.m({
                                read: function() {
                                    return a.a.c(c());
                                },
                                write: a.Ba(e) && function(a) {
                                    c()(a);
                                },
                                i: b
                            }) : e;
                        });
                        g.hasOwnProperty("$raw") || (g.$raw = f);
                        return g;
                    }
                    return {
                        $raw: {}
                    };
                }
                a.g.getComponentNameForNode = function(b) {
                    var c = a.a.A(b);
                    if (a.g.ub(c) && (-1 != c.indexOf("-") || "[object HTMLUnknownElement]" == "" + b || 8 >= a.a.C && b.tagName === c)) return c;
                };
                a.g.Ob = function(c, e, f, g) {
                    if (1 === e.nodeType) {
                        var k = a.g.getComponentNameForNode(e);
                        if (k) {
                            c = c || {};
                            if (c.component) throw Error('Cannot use the "component" binding on a custom element matching a component');
                            var l = {
                                name: k,
                                params: b(e, f)
                            };
                            c.component = g ? function() {
                                return l;
                            } : l;
                        }
                    }
                    return c;
                };
                var c = new a.Q();
                9 > a.a.C && (a.g.register = function(a) {
                    return function(b) {
                        u.createElement(b);
                        return a.apply(this, arguments);
                    };
                }(a.g.register), u.createDocumentFragment = function(b) {
                    return function() {
                        var c = b(), f = a.g.Bc, g;
                        for (g in f) f.hasOwnProperty(g) && c.createElement(g);
                        return c;
                    };
                }(u.createDocumentFragment));
            })();
            (function(b) {
                function c(b, c, d) {
                    c = c.template;
                    if (!c) throw Error("Component '" + b + "' has no template");
                    b = a.a.ua(c);
                    a.f.da(d, b);
                }
                function d(a, b, c, d) {
                    var e = a.createViewModel;
                    return e ? e.call(a, d, {
                        element: b,
                        templateNodes: c
                    }) : d;
                }
                var e = 0;
                a.d.component = {
                    init: function(f, g, k, l, m) {
                        function h() {
                            var a = r && r.dispose;
                            "function" === typeof a && a.call(r);
                            q = r = null;
                        }
                        var r, q, p = a.a.V(a.f.childNodes(f));
                        a.a.F.oa(f, h);
                        a.m(function() {
                            var l = a.a.c(g()), k, t;
                            "string" === typeof l ? k = l : (k = a.a.c(l.name), t = a.a.c(l.params));
                            if (!k) throw Error("No component name specified");
                            var n = q = ++e;
                            a.g.get(k, function(e) {
                                if (q === n) {
                                    h();
                                    if (!e) throw Error("Unknown component '" + k + "'");
                                    c(k, e, f);
                                    var g = d(e, f, p, t);
                                    e = m.createChildContext(g, b, function(a) {
                                        a.$component = g;
                                        a.$componentTemplateNodes = p;
                                    });
                                    r = g;
                                    a.eb(e, f);
                                }
                            });
                        }, null, {
                            i: f
                        });
                        return {
                            controlsDescendantBindings: !0
                        };
                    }
                };
                a.f.Z.component = !0;
            })();
            var S = {
                "class": "className",
                "for": "htmlFor"
            };
            a.d.attr = {
                update: function(b, c) {
                    var d = a.a.c(c()) || {};
                    a.a.D(d, function(c, d) {
                        d = a.a.c(d);
                        var g = !1 === d || null === d || d === n;
                        g && b.removeAttribute(c);
                        8 >= a.a.C && c in S ? (c = S[c], g ? b.removeAttribute(c) : b[c] = d) : g || b.setAttribute(c, d.toString());
                        "name" === c && a.a.rc(b, g ? "" : d.toString());
                    });
                }
            };
            (function() {
                a.d.checked = {
                    after: [ "value", "attr" ],
                    init: function(b, c, d) {
                        function e() {
                            var e = b.checked, f = p ? g() : e;
                            if (!a.va.Sa() && (!l || e)) {
                                var m = a.l.w(c);
                                if (h) {
                                    var k = r ? m.t() : m;
                                    q !== f ? (e && (a.a.pa(k, f, !0), a.a.pa(k, q, !1)), q = f) : a.a.pa(k, f, e);
                                    r && a.Ba(m) && m(k);
                                } else a.h.Ea(m, d, "checked", f, !0);
                            }
                        }
                        function f() {
                            var d = a.a.c(c());
                            b.checked = h ? 0 <= a.a.o(d, g()) : k ? d : g() === d;
                        }
                        var g = a.nc(function() {
                            return d.has("checkedValue") ? a.a.c(d.get("checkedValue")) : d.has("value") ? a.a.c(d.get("value")) : b.value;
                        }), k = "checkbox" == b.type, l = "radio" == b.type;
                        if (k || l) {
                            var m = c(), h = k && a.a.c(m) instanceof Array, r = !(h && m.push && m.splice), q = h ? g() : n, p = l || h;
                            l && !b.name && a.d.uniqueName.init(b, function() {
                                return !0;
                            });
                            a.m(e, null, {
                                i: b
                            });
                            a.a.p(b, "click", e);
                            a.m(f, null, {
                                i: b
                            });
                            m = n;
                        }
                    }
                };
                a.h.ea.checked = !0;
                a.d.checkedValue = {
                    update: function(b, c) {
                        b.value = a.a.c(c());
                    }
                };
            })();
            a.d.css = {
                update: function(b, c) {
                    var d = a.a.c(c());
                    null !== d && "object" == typeof d ? a.a.D(d, function(c, d) {
                        d = a.a.c(d);
                        a.a.bb(b, c, d);
                    }) : (d = a.a.$a(String(d || "")), a.a.bb(b, b.__ko__cssValue, !1), b.__ko__cssValue = d,
                    a.a.bb(b, d, !0));
                }
            };
            a.d.enable = {
                update: function(b, c) {
                    var d = a.a.c(c());
                    d && b.disabled ? b.removeAttribute("disabled") : d || b.disabled || (b.disabled = !0);
                }
            };
            a.d.disable = {
                update: function(b, c) {
                    a.d.enable.update(b, function() {
                        return !a.a.c(c());
                    });
                }
            };
            a.d.event = {
                init: function(b, c, d, e, f) {
                    var g = c() || {};
                    a.a.D(g, function(g) {
                        "string" == typeof g && a.a.p(b, g, function(b) {
                            var m, h = c()[g];
                            if (h) {
                                try {
                                    var r = a.a.V(arguments);
                                    e = f.$data;
                                    r.unshift(e);
                                    m = h.apply(e, r);
                                } finally {
                                    !0 !== m && (b.preventDefault ? b.preventDefault() : b.returnValue = !1);
                                }
                                !1 === d.get(g + "Bubble") && (b.cancelBubble = !0, b.stopPropagation && b.stopPropagation());
                            }
                        });
                    });
                }
            };
            a.d.foreach = {
                ic: function(b) {
                    return function() {
                        var c = b(), d = a.a.zb(c);
                        if (!d || "number" == typeof d.length) return {
                            foreach: c,
                            templateEngine: a.W.sb
                        };
                        a.a.c(c);
                        return {
                            foreach: d.data,
                            as: d.as,
                            includeDestroyed: d.includeDestroyed,
                            afterAdd: d.afterAdd,
                            beforeRemove: d.beforeRemove,
                            afterRender: d.afterRender,
                            beforeMove: d.beforeMove,
                            afterMove: d.afterMove,
                            templateEngine: a.W.sb
                        };
                    };
                },
                init: function(b, c) {
                    return a.d.template.init(b, a.d.foreach.ic(c));
                },
                update: function(b, c, d, e, f) {
                    return a.d.template.update(b, a.d.foreach.ic(c), d, e, f);
                }
            };
            a.h.ta.foreach = !1;
            a.f.Z.foreach = !0;
            a.d.hasfocus = {
                init: function(b, c, d) {
                    function e(e) {
                        b.__ko_hasfocusUpdating = !0;
                        var f = b.ownerDocument;
                        if ("activeElement" in f) {
                            var g;
                            try {
                                g = f.activeElement;
                            } catch (h) {
                                g = f.body;
                            }
                            e = g === b;
                        }
                        f = c();
                        a.h.Ea(f, d, "hasfocus", e, !0);
                        b.__ko_hasfocusLastValue = e;
                        b.__ko_hasfocusUpdating = !1;
                    }
                    var f = e.bind(null, !0), g = e.bind(null, !1);
                    a.a.p(b, "focus", f);
                    a.a.p(b, "focusin", f);
                    a.a.p(b, "blur", g);
                    a.a.p(b, "focusout", g);
                },
                update: function(b, c) {
                    var d = !!a.a.c(c());
                    b.__ko_hasfocusUpdating || b.__ko_hasfocusLastValue === d || (d ? b.focus() : b.blur(),
                    !d && b.__ko_hasfocusLastValue && b.ownerDocument.body.focus(), a.l.w(a.a.Da, null, [ b, d ? "focusin" : "focusout" ]));
                }
            };
            a.h.ea.hasfocus = !0;
            a.d.hasFocus = a.d.hasfocus;
            a.h.ea.hasFocus = !0;
            a.d.html = {
                init: function() {
                    return {
                        controlsDescendantBindings: !0
                    };
                },
                update: function(b, c) {
                    a.a.Cb(b, c());
                }
            };
            K("if");
            K("ifnot", !1, !0);
            K("with", !0, !1, function(a, c) {
                return a.createChildContext(c);
            });
            var L = {};
            a.d.options = {
                init: function(b) {
                    if ("select" !== a.a.A(b)) throw Error("options binding applies only to SELECT elements");
                    for (;0 < b.length; ) b.remove(0);
                    return {
                        controlsDescendantBindings: !0
                    };
                },
                update: function(b, c, d) {
                    function e() {
                        return a.a.Ka(b.options, function(a) {
                            return a.selected;
                        });
                    }
                    function f(a, b, c) {
                        var d = typeof b;
                        return "function" == d ? b(a) : "string" == d ? a[b] : c;
                    }
                    function g(c, e) {
                        if (A && h) a.j.ha(b, a.a.c(d.get("value")), !0); else if (p.length) {
                            var f = 0 <= a.a.o(p, a.j.u(e[0]));
                            a.a.sc(e[0], f);
                            A && !f && a.l.w(a.a.Da, null, [ b, "change" ]);
                        }
                    }
                    var k = b.multiple, l = 0 != b.length && k ? b.scrollTop : null, m = a.a.c(c()), h = d.get("valueAllowUnset") && d.has("value"), r = d.get("optionsIncludeDestroyed");
                    c = {};
                    var q, p = [];
                    h || (k ? p = a.a.fb(e(), a.j.u) : 0 <= b.selectedIndex && p.push(a.j.u(b.options[b.selectedIndex])));
                    m && ("undefined" == typeof m.length && (m = [ m ]), q = a.a.Ka(m, function(b) {
                        return r || b === n || null === b || !a.a.c(b._destroy);
                    }), d.has("optionsCaption") && (m = a.a.c(d.get("optionsCaption")), null !== m && m !== n && q.unshift(L)));
                    var A = !1;
                    c.beforeRemove = function(a) {
                        b.removeChild(a);
                    };
                    m = g;
                    d.has("optionsAfterRender") && "function" == typeof d.get("optionsAfterRender") && (m = function(b, c) {
                        g(0, c);
                        a.l.w(d.get("optionsAfterRender"), null, [ c[0], b !== L ? b : n ]);
                    });
                    a.a.Bb(b, q, function(c, e, g) {
                        g.length && (p = !h && g[0].selected ? [ a.j.u(g[0]) ] : [], A = !0);
                        e = b.ownerDocument.createElement("option");
                        c === L ? (a.a.Za(e, d.get("optionsCaption")), a.j.ha(e, n)) : (g = f(c, d.get("optionsValue"), c),
                        a.j.ha(e, a.a.c(g)), c = f(c, d.get("optionsText"), g), a.a.Za(e, c));
                        return [ e ];
                    }, c, m);
                    a.l.w(function() {
                        h ? a.j.ha(b, a.a.c(d.get("value")), !0) : (k ? p.length && e().length < p.length : p.length && 0 <= b.selectedIndex ? a.j.u(b.options[b.selectedIndex]) !== p[0] : p.length || 0 <= b.selectedIndex) && a.a.Da(b, "change");
                    });
                    a.a.Nc(b);
                    l && 20 < Math.abs(l - b.scrollTop) && (b.scrollTop = l);
                }
            };
            a.d.options.xb = a.a.e.I();
            a.d.selectedOptions = {
                after: [ "options", "foreach" ],
                init: function(b, c, d) {
                    a.a.p(b, "change", function() {
                        var e = c(), f = [];
                        a.a.q(b.getElementsByTagName("option"), function(b) {
                            b.selected && f.push(a.j.u(b));
                        });
                        a.h.Ea(e, d, "selectedOptions", f);
                    });
                },
                update: function(b, c) {
                    if ("select" != a.a.A(b)) throw Error("values binding applies only to SELECT elements");
                    var d = a.a.c(c()), e = b.scrollTop;
                    d && "number" == typeof d.length && a.a.q(b.getElementsByTagName("option"), function(b) {
                        var c = 0 <= a.a.o(d, a.j.u(b));
                        b.selected != c && a.a.sc(b, c);
                    });
                    b.scrollTop = e;
                }
            };
            a.h.ea.selectedOptions = !0;
            a.d.style = {
                update: function(b, c) {
                    var d = a.a.c(c() || {});
                    a.a.D(d, function(c, d) {
                        d = a.a.c(d);
                        if (null === d || d === n || !1 === d) d = "";
                        b.style[c] = d;
                    });
                }
            };
            a.d.submit = {
                init: function(b, c, d, e, f) {
                    if ("function" != typeof c()) throw Error("The value for a submit binding must be a function");
                    a.a.p(b, "submit", function(a) {
                        var d, e = c();
                        try {
                            d = e.call(f.$data, b);
                        } finally {
                            !0 !== d && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);
                        }
                    });
                }
            };
            a.d.text = {
                init: function() {
                    return {
                        controlsDescendantBindings: !0
                    };
                },
                update: function(b, c) {
                    a.a.Za(b, c());
                }
            };
            a.f.Z.text = !0;
            (function() {
                if (x && x.navigator) var b = function(a) {
                    if (a) return parseFloat(a[1]);
                }, c = x.opera && x.opera.version && parseInt(x.opera.version()), d = x.navigator.userAgent, e = b(d.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)), f = b(d.match(/Firefox\/([^ ]*)/));
                if (10 > a.a.C) var g = a.a.e.I(), k = a.a.e.I(), l = function(b) {
                    var c = this.activeElement;
                    (c = c && a.a.e.get(c, k)) && c(b);
                }, m = function(b, c) {
                    var d = b.ownerDocument;
                    a.a.e.get(d, g) || (a.a.e.set(d, g, !0), a.a.p(d, "selectionchange", l));
                    a.a.e.set(b, k, c);
                };
                a.d.textInput = {
                    init: function(b, d, g) {
                        function l(c, d) {
                            a.a.p(b, c, d);
                        }
                        function k() {
                            var c = a.a.c(d());
                            if (null === c || c === n) c = "";
                            v !== n && c === v ? a.a.setTimeout(k, 4) : b.value !== c && (u = c, b.value = c);
                        }
                        function y() {
                            s || (v = b.value, s = a.a.setTimeout(t, 4));
                        }
                        function t() {
                            clearTimeout(s);
                            v = s = n;
                            var c = b.value;
                            u !== c && (u = c, a.h.Ea(d(), g, "textInput", c));
                        }
                        var u = b.value, s, v, x = 9 == a.a.C ? y : t;
                        10 > a.a.C ? (l("propertychange", function(a) {
                            "value" === a.propertyName && x(a);
                        }), 8 == a.a.C && (l("keyup", t), l("keydown", t)), 8 <= a.a.C && (m(b, x), l("dragend", y))) : (l("input", t),
                        5 > e && "textarea" === a.a.A(b) ? (l("keydown", y), l("paste", y), l("cut", y)) : 11 > c ? l("keydown", y) : 4 > f && (l("DOMAutoComplete", t),
                        l("dragdrop", t), l("drop", t)));
                        l("change", t);
                        a.m(k, null, {
                            i: b
                        });
                    }
                };
                a.h.ea.textInput = !0;
                a.d.textinput = {
                    preprocess: function(a, b, c) {
                        c("textInput", a);
                    }
                };
            })();
            a.d.uniqueName = {
                init: function(b, c) {
                    if (c()) {
                        var d = "ko_unique_" + ++a.d.uniqueName.Ic;
                        a.a.rc(b, d);
                    }
                }
            };
            a.d.uniqueName.Ic = 0;
            a.d.value = {
                after: [ "options", "foreach" ],
                init: function(b, c, d) {
                    if ("input" != b.tagName.toLowerCase() || "checkbox" != b.type && "radio" != b.type) {
                        var e = [ "change" ], f = d.get("valueUpdate"), g = !1, k = null;
                        f && ("string" == typeof f && (f = [ f ]), a.a.ra(e, f), e = a.a.Tb(e));
                        var l = function() {
                            k = null;
                            g = !1;
                            var e = c(), f = a.j.u(b);
                            a.h.Ea(e, d, "value", f);
                        };
                        !a.a.C || "input" != b.tagName.toLowerCase() || "text" != b.type || "off" == b.autocomplete || b.form && "off" == b.form.autocomplete || -1 != a.a.o(e, "propertychange") || (a.a.p(b, "propertychange", function() {
                            g = !0;
                        }), a.a.p(b, "focus", function() {
                            g = !1;
                        }), a.a.p(b, "blur", function() {
                            g && l();
                        }));
                        a.a.q(e, function(c) {
                            var d = l;
                            a.a.nd(c, "after") && (d = function() {
                                k = a.j.u(b);
                                a.a.setTimeout(l, 0);
                            }, c = c.substring(5));
                            a.a.p(b, c, d);
                        });
                        var m = function() {
                            var e = a.a.c(c()), f = a.j.u(b);
                            if (null !== k && e === k) a.a.setTimeout(m, 0); else if (e !== f) if ("select" === a.a.A(b)) {
                                var g = d.get("valueAllowUnset"), f = function() {
                                    a.j.ha(b, e, g);
                                };
                                f();
                                g || e === a.j.u(b) ? a.a.setTimeout(f, 0) : a.l.w(a.a.Da, null, [ b, "change" ]);
                            } else a.j.ha(b, e);
                        };
                        a.m(m, null, {
                            i: b
                        });
                    } else a.Ja(b, {
                        checkedValue: c
                    });
                },
                update: function() {}
            };
            a.h.ea.value = !0;
            a.d.visible = {
                update: function(b, c) {
                    var d = a.a.c(c()), e = "none" != b.style.display;
                    d && !e ? b.style.display = "" : !d && e && (b.style.display = "none");
                }
            };
            (function(b) {
                a.d[b] = {
                    init: function(c, d, e, f, g) {
                        return a.d.event.init.call(this, c, function() {
                            var a = {};
                            a[b] = d();
                            return a;
                        }, e, f, g);
                    }
                };
            })("click");
            a.O = function() {};
            a.O.prototype.renderTemplateSource = function() {
                throw Error("Override renderTemplateSource");
            };
            a.O.prototype.createJavaScriptEvaluatorBlock = function() {
                throw Error("Override createJavaScriptEvaluatorBlock");
            };
            a.O.prototype.makeTemplateSource = function(b, c) {
                if ("string" == typeof b) {
                    c = c || u;
                    var d = c.getElementById(b);
                    if (!d) throw Error("Cannot find template with ID " + b);
                    return new a.v.n(d);
                }
                if (1 == b.nodeType || 8 == b.nodeType) return new a.v.qa(b);
                throw Error("Unknown template type: " + b);
            };
            a.O.prototype.renderTemplate = function(a, c, d, e) {
                a = this.makeTemplateSource(a, e);
                return this.renderTemplateSource(a, c, d, e);
            };
            a.O.prototype.isTemplateRewritten = function(a, c) {
                return !1 === this.allowTemplateRewriting ? !0 : this.makeTemplateSource(a, c).data("isRewritten");
            };
            a.O.prototype.rewriteTemplate = function(a, c, d) {
                a = this.makeTemplateSource(a, d);
                c = c(a.text());
                a.text(c);
                a.data("isRewritten", !0);
            };
            a.b("templateEngine", a.O);
            a.Gb = function() {
                function b(b, c, d, k) {
                    b = a.h.yb(b);
                    for (var l = a.h.ta, m = 0; m < b.length; m++) {
                        var h = b[m].key;
                        if (l.hasOwnProperty(h)) {
                            var r = l[h];
                            if ("function" === typeof r) {
                                if (h = r(b[m].value)) throw Error(h);
                            } else if (!r) throw Error("This template engine does not support the '" + h + "' binding within its templates");
                        }
                    }
                    d = "ko.__tr_ambtns(function($context,$element){return(function(){return{ " + a.h.Ua(b, {
                        valueAccessors: !0
                    }) + " } })()},'" + d.toLowerCase() + "')";
                    return k.createJavaScriptEvaluatorBlock(d) + c;
                }
                var c = /(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi, d = /\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;
                return {
                    Oc: function(b, c, d) {
                        c.isTemplateRewritten(b, d) || c.rewriteTemplate(b, function(b) {
                            return a.Gb.dd(b, c);
                        }, d);
                    },
                    dd: function(a, f) {
                        return a.replace(c, function(a, c, d, e, h) {
                            return b(h, c, d, f);
                        }).replace(d, function(a, c) {
                            return b(c, "<!-- ko -->", "#comment", f);
                        });
                    },
                    Ec: function(b, c) {
                        return a.M.wb(function(d, k) {
                            var l = d.nextSibling;
                            l && l.nodeName.toLowerCase() === c && a.Ja(l, b, k);
                        });
                    }
                };
            }();
            a.b("__tr_ambtns", a.Gb.Ec);
            (function() {
                a.v = {};
                a.v.n = function(b) {
                    if (this.n = b) {
                        var c = a.a.A(b);
                        this.ab = "script" === c ? 1 : "textarea" === c ? 2 : "template" == c && b.content && 11 === b.content.nodeType ? 3 : 4;
                    }
                };
                a.v.n.prototype.text = function() {
                    var b = 1 === this.ab ? "text" : 2 === this.ab ? "value" : "innerHTML";
                    if (0 == arguments.length) return this.n[b];
                    var c = arguments[0];
                    "innerHTML" === b ? a.a.Cb(this.n, c) : this.n[b] = c;
                };
                var b = a.a.e.I() + "_";
                a.v.n.prototype.data = function(c) {
                    if (1 === arguments.length) return a.a.e.get(this.n, b + c);
                    a.a.e.set(this.n, b + c, arguments[1]);
                };
                var c = a.a.e.I();
                a.v.n.prototype.nodes = function() {
                    var b = this.n;
                    if (0 == arguments.length) return (a.a.e.get(b, c) || {}).jb || (3 === this.ab ? b.content : 4 === this.ab ? b : n);
                    a.a.e.set(b, c, {
                        jb: arguments[0]
                    });
                };
                a.v.qa = function(a) {
                    this.n = a;
                };
                a.v.qa.prototype = new a.v.n();
                a.v.qa.prototype.text = function() {
                    if (0 == arguments.length) {
                        var b = a.a.e.get(this.n, c) || {};
                        b.Hb === n && b.jb && (b.Hb = b.jb.innerHTML);
                        return b.Hb;
                    }
                    a.a.e.set(this.n, c, {
                        Hb: arguments[0]
                    });
                };
                a.b("templateSources", a.v);
                a.b("templateSources.domElement", a.v.n);
                a.b("templateSources.anonymousTemplate", a.v.qa);
            })();
            (function() {
                function b(b, c, d) {
                    var e;
                    for (c = a.f.nextSibling(c); b && (e = b) !== c; ) b = a.f.nextSibling(e), d(e, b);
                }
                function c(c, d) {
                    if (c.length) {
                        var e = c[0], f = c[c.length - 1], g = e.parentNode, k = a.Q.instance, n = k.preprocessNode;
                        if (n) {
                            b(e, f, function(a, b) {
                                var c = a.previousSibling, d = n.call(k, a);
                                d && (a === e && (e = d[0] || b), a === f && (f = d[d.length - 1] || c));
                            });
                            c.length = 0;
                            if (!e) return;
                            e === f ? c.push(e) : (c.push(e, f), a.a.za(c, g));
                        }
                        b(e, f, function(b) {
                            1 !== b.nodeType && 8 !== b.nodeType || a.Rb(d, b);
                        });
                        b(e, f, function(b) {
                            1 !== b.nodeType && 8 !== b.nodeType || a.M.yc(b, [ d ]);
                        });
                        a.a.za(c, g);
                    }
                }
                function d(a) {
                    return a.nodeType ? a : 0 < a.length ? a[0] : null;
                }
                function e(b, e, f, k, q) {
                    q = q || {};
                    var p = (b && d(b) || f || {}).ownerDocument, n = q.templateEngine || g;
                    a.Gb.Oc(f, n, p);
                    f = n.renderTemplate(f, k, q, p);
                    if ("number" != typeof f.length || 0 < f.length && "number" != typeof f[0].nodeType) throw Error("Template engine must return an array of DOM nodes");
                    p = !1;
                    switch (e) {
                      case "replaceChildren":
                        a.f.da(b, f);
                        p = !0;
                        break;

                      case "replaceNode":
                        a.a.qc(b, f);
                        p = !0;
                        break;

                      case "ignoreTargetNode":
                        break;

                      default:
                        throw Error("Unknown renderMode: " + e);
                    }
                    p && (c(f, k), q.afterRender && a.l.w(q.afterRender, null, [ f, k.$data ]));
                    return f;
                }
                function f(b, c, d) {
                    return a.H(b) ? b() : "function" === typeof b ? b(c, d) : b;
                }
                var g;
                a.Db = function(b) {
                    if (b != n && !(b instanceof a.O)) throw Error("templateEngine must inherit from ko.templateEngine");
                    g = b;
                };
                a.Ab = function(b, c, h, k, q) {
                    h = h || {};
                    if ((h.templateEngine || g) == n) throw Error("Set a template engine before calling renderTemplate");
                    q = q || "replaceChildren";
                    if (k) {
                        var p = d(k);
                        return a.B(function() {
                            var g = c && c instanceof a.U ? c : new a.U(a.a.c(c)), n = f(b, g.$data, g), g = e(k, q, n, g, h);
                            "replaceNode" == q && (k = g, p = d(k));
                        }, null, {
                            wa: function() {
                                return !p || !a.a.nb(p);
                            },
                            i: p && "replaceNode" == q ? p.parentNode : p
                        });
                    }
                    return a.M.wb(function(d) {
                        a.Ab(b, c, h, d, "replaceNode");
                    });
                };
                a.kd = function(b, d, g, k, q) {
                    function p(a, b) {
                        c(b, s);
                        g.afterRender && g.afterRender(b, a);
                        s = null;
                    }
                    function u(a, c) {
                        s = q.createChildContext(a, g.as, function(a) {
                            a.$index = c;
                        });
                        var d = f(b, a, s);
                        return e(null, "ignoreTargetNode", d, s, g);
                    }
                    var s;
                    return a.B(function() {
                        var b = a.a.c(d) || [];
                        "undefined" == typeof b.length && (b = [ b ]);
                        b = a.a.Ka(b, function(b) {
                            return g.includeDestroyed || b === n || null === b || !a.a.c(b._destroy);
                        });
                        a.l.w(a.a.Bb, null, [ k, b, u, g, p ]);
                    }, null, {
                        i: k
                    });
                };
                var k = a.a.e.I();
                a.d.template = {
                    init: function(b, c) {
                        var d = a.a.c(c());
                        if ("string" == typeof d || d.name) a.f.xa(b); else {
                            if ("nodes" in d) {
                                if (d = d.nodes || [], a.H(d)) throw Error('The "nodes" option must be a plain, non-observable array.');
                            } else d = a.f.childNodes(b);
                            d = a.a.jc(d);
                            new a.v.qa(b).nodes(d);
                        }
                        return {
                            controlsDescendantBindings: !0
                        };
                    },
                    update: function(b, c, d, e, f) {
                        var g = c(), s;
                        c = a.a.c(g);
                        d = !0;
                        e = null;
                        "string" == typeof c ? c = {} : (g = c.name, "if" in c && (d = a.a.c(c["if"])),
                        d && "ifnot" in c && (d = !a.a.c(c.ifnot)), s = a.a.c(c.data));
                        "foreach" in c ? e = a.kd(g || b, d && c.foreach || [], c, b, f) : d ? (f = "data" in c ? f.createChildContext(s, c.as) : f,
                        e = a.Ab(g || b, f, c, b)) : a.f.xa(b);
                        f = e;
                        (s = a.a.e.get(b, k)) && "function" == typeof s.k && s.k();
                        a.a.e.set(b, k, f && f.ba() ? f : n);
                    }
                };
                a.h.ta.template = function(b) {
                    b = a.h.yb(b);
                    return 1 == b.length && b[0].unknown || a.h.ad(b, "name") ? null : "This template engine does not support anonymous templates nested within its templates";
                };
                a.f.Z.template = !0;
            })();
            a.b("setTemplateEngine", a.Db);
            a.b("renderTemplate", a.Ab);
            a.a.dc = function(a, c, d) {
                if (a.length && c.length) {
                    var e, f, g, k, l;
                    for (e = f = 0; (!d || e < d) && (k = a[f]); ++f) {
                        for (g = 0; l = c[g]; ++g) if (k.value === l.value) {
                            k.moved = l.index;
                            l.moved = k.index;
                            c.splice(g, 1);
                            e = g = 0;
                            break;
                        }
                        e += g;
                    }
                }
            };
            a.a.ib = function() {
                function b(b, d, e, f, g) {
                    var k = Math.min, l = Math.max, m = [], h, n = b.length, q, p = d.length, s = p - n || 1, u = n + p + 1, t, v, x;
                    for (h = 0; h <= n; h++) for (v = t, m.push(t = []), x = k(p, h + s), q = l(0, h - 1); q <= x; q++) t[q] = q ? h ? b[h - 1] === d[q - 1] ? v[q - 1] : k(v[q] || u, t[q - 1] || u) + 1 : q + 1 : h + 1;
                    k = [];
                    l = [];
                    s = [];
                    h = n;
                    for (q = p; h || q; ) p = m[h][q] - 1, q && p === m[h][q - 1] ? l.push(k[k.length] = {
                        status: e,
                        value: d[--q],
                        index: q
                    }) : h && p === m[h - 1][q] ? s.push(k[k.length] = {
                        status: f,
                        value: b[--h],
                        index: h
                    }) : (--q, --h, g.sparse || k.push({
                        status: "retained",
                        value: d[q]
                    }));
                    a.a.dc(s, l, !g.dontLimitMoves && 10 * n);
                    return k.reverse();
                }
                return function(a, d, e) {
                    e = "boolean" === typeof e ? {
                        dontLimitMoves: e
                    } : e || {};
                    a = a || [];
                    d = d || [];
                    return a.length < d.length ? b(a, d, "added", "deleted", e) : b(d, a, "deleted", "added", e);
                };
            }();
            a.b("utils.compareArrays", a.a.ib);
            (function() {
                function b(b, c, d, k, l) {
                    var m = [], h = a.B(function() {
                        var h = c(d, l, a.a.za(m, b)) || [];
                        0 < m.length && (a.a.qc(m, h), k && a.l.w(k, null, [ d, h, l ]));
                        m.length = 0;
                        a.a.ra(m, h);
                    }, null, {
                        i: b,
                        wa: function() {
                            return !a.a.Qb(m);
                        }
                    });
                    return {
                        ca: m,
                        B: h.ba() ? h : n
                    };
                }
                var c = a.a.e.I(), d = a.a.e.I();
                a.a.Bb = function(e, f, g, k, l) {
                    function m(b, c) {
                        w = q[c];
                        v !== c && (D[b] = w);
                        w.qb(v++);
                        a.a.za(w.ca, e);
                        u.push(w);
                        z.push(w);
                    }
                    function h(b, c) {
                        if (b) for (var d = 0, e = c.length; d < e; d++) c[d] && a.a.q(c[d].ca, function(a) {
                            b(a, d, c[d].ja);
                        });
                    }
                    f = f || [];
                    k = k || {};
                    var r = a.a.e.get(e, c) === n, q = a.a.e.get(e, c) || [], p = a.a.fb(q, function(a) {
                        return a.ja;
                    }), s = a.a.ib(p, f, k.dontLimitMoves), u = [], t = 0, v = 0, x = [], z = [];
                    f = [];
                    for (var D = [], p = [], w, C = 0, B, E; B = s[C]; C++) switch (E = B.moved, B.status) {
                      case "deleted":
                        E === n && (w = q[t], w.B && (w.B.k(), w.B = n), a.a.za(w.ca, e).length && (k.beforeRemove && (u.push(w),
                        z.push(w), w.ja === d ? w = null : f[C] = w), w && x.push.apply(x, w.ca)));
                        t++;
                        break;

                      case "retained":
                        m(C, t++);
                        break;

                      case "added":
                        E !== n ? m(C, E) : (w = {
                            ja: B.value,
                            qb: a.N(v++)
                        }, u.push(w), z.push(w), r || (p[C] = w));
                    }
                    a.a.e.set(e, c, u);
                    h(k.beforeMove, D);
                    a.a.q(x, k.beforeRemove ? a.$ : a.removeNode);
                    for (var C = 0, r = a.f.firstChild(e), F; w = z[C]; C++) {
                        w.ca || a.a.extend(w, b(e, g, w.ja, l, w.qb));
                        for (t = 0; s = w.ca[t]; r = s.nextSibling, F = s, t++) s !== r && a.f.gc(e, s, F);
                        !w.Wc && l && (l(w.ja, w.ca, w.qb), w.Wc = !0);
                    }
                    h(k.beforeRemove, f);
                    for (C = 0; C < f.length; ++C) f[C] && (f[C].ja = d);
                    h(k.afterMove, D);
                    h(k.afterAdd, p);
                };
            })();
            a.b("utils.setDomNodeChildrenFromArrayMapping", a.a.Bb);
            a.W = function() {
                this.allowTemplateRewriting = !1;
            };
            a.W.prototype = new a.O();
            a.W.prototype.renderTemplateSource = function(b, c, d, e) {
                if (c = (9 > a.a.C ? 0 : b.nodes) ? b.nodes() : null) return a.a.V(c.cloneNode(!0).childNodes);
                b = b.text();
                return a.a.ma(b, e);
            };
            a.W.sb = new a.W();
            a.Db(a.W.sb);
            a.b("nativeTemplateEngine", a.W);
            (function() {
                a.vb = function() {
                    var a = this.$c = function() {
                        if (!v || !v.tmpl) return 0;
                        try {
                            if (0 <= v.tmpl.tag.tmpl.open.toString().indexOf("__")) return 2;
                        } catch (a) {}
                        return 1;
                    }();
                    this.renderTemplateSource = function(b, e, f, g) {
                        g = g || u;
                        f = f || {};
                        if (2 > a) throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");
                        var k = b.data("precompiled");
                        k || (k = b.text() || "", k = v.template(null, "{{ko_with $item.koBindingContext}}" + k + "{{/ko_with}}"),
                        b.data("precompiled", k));
                        b = [ e.$data ];
                        e = v.extend({
                            koBindingContext: e
                        }, f.templateOptions);
                        e = v.tmpl(k, b, e);
                        e.appendTo(g.createElement("div"));
                        v.fragments = {};
                        return e;
                    };
                    this.createJavaScriptEvaluatorBlock = function(a) {
                        return "{{ko_code ((function() { return " + a + " })()) }}";
                    };
                    this.addTemplate = function(a, b) {
                        u.write("<script type='text/html' id='" + a + "'>" + b + "</script>");
                    };
                    0 < a && (v.tmpl.tag.ko_code = {
                        open: "__.push($1 || '');"
                    }, v.tmpl.tag.ko_with = {
                        open: "with($1) {",
                        close: "} "
                    });
                };
                a.vb.prototype = new a.O();
                var b = new a.vb();
                0 < b.$c && a.Db(b);
                a.b("jqueryTmplTemplateEngine", a.vb);
            })();
        });
    })();
})();

(function() {
    var root = this;
    var previousUnderscore = root._;
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    var push = ArrayProto.push, slice = ArrayProto.slice, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind, nativeCreate = Object.create;
    var Ctor = function() {};
    var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
    };
    if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
            exports = module.exports = _;
        }
        exports._ = _;
    } else {
        root._ = _;
    }
    _.VERSION = "1.13.6";
    var optimizeCb = function(func, context, argCount) {
        if (context === void 0) return func;
        switch (argCount == null ? 3 : argCount) {
          case 1:
            return function(value) {
                return func.call(context, value);
            };

          case 2:
            return function(value, other) {
                return func.call(context, value, other);
            };

          case 3:
            return function(value, index, collection) {
                return func.call(context, value, index, collection);
            };

          case 4:
            return function(accumulator, value, index, collection) {
                return func.call(context, accumulator, value, index, collection);
            };
        }
        return function() {
            return func.apply(context, arguments);
        };
    };
    var cb = function(value, context, argCount) {
        if (value == null) return _.identity;
        if (_.isFunction(value)) return optimizeCb(value, context, argCount);
        if (_.isObject(value)) return _.matcher(value);
        return _.property(value);
    };
    _.iteratee = function(value, context) {
        return cb(value, context, Infinity);
    };
    var createAssigner = function(keysFunc, undefinedOnly) {
        return function(obj) {
            var length = arguments.length;
            if (length < 2 || obj == null) return obj;
            for (var index = 1; index < length; index++) {
                var source = arguments[index], keys = keysFunc(source), l = keys.length;
                for (var i = 0; i < l; i++) {
                    var key = keys[i];
                    if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
                }
            }
            return obj;
        };
    };
    var baseCreate = function(prototype) {
        if (!_.isObject(prototype)) return {};
        if (nativeCreate) return nativeCreate(prototype);
        Ctor.prototype = prototype;
        var result = new Ctor();
        Ctor.prototype = null;
        return result;
    };
    var property = function(key) {
        return function(obj) {
            return obj == null ? void 0 : obj[key];
        };
    };
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = property("length");
    var isArrayLike = function(collection) {
        var length = getLength(collection);
        return typeof length == "number" && length >= 0 && length <= MAX_ARRAY_INDEX;
    };
    _.each = _.forEach = function(obj, iteratee, context) {
        iteratee = optimizeCb(iteratee, context);
        var i, length;
        if (isArrayLike(obj)) {
            for (i = 0, length = obj.length; i < length; i++) {
                iteratee(obj[i], i, obj);
            }
        } else {
            var keys = _.keys(obj);
            for (i = 0, length = keys.length; i < length; i++) {
                iteratee(obj[keys[i]], keys[i], obj);
            }
        }
        return obj;
    };
    _.map = _.collect = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, results = Array(length);
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
    function createReduce(dir) {
        function iterator(obj, iteratee, memo, keys, index, length) {
            for (;index >= 0 && index < length; index += dir) {
                var currentKey = keys ? keys[index] : index;
                memo = iteratee(memo, obj[currentKey], currentKey, obj);
            }
            return memo;
        }
        return function(obj, iteratee, memo, context) {
            iteratee = optimizeCb(iteratee, context, 4);
            var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, index = dir > 0 ? 0 : length - 1;
            if (arguments.length < 3) {
                memo = obj[keys ? keys[index] : index];
                index += dir;
            }
            return iterator(obj, iteratee, memo, keys, index, length);
        };
    }
    _.reduce = _.foldl = _.inject = createReduce(1);
    _.reduceRight = _.foldr = createReduce(-1);
    _.find = _.detect = function(obj, predicate, context) {
        var key;
        if (isArrayLike(obj)) {
            key = _.findIndex(obj, predicate, context);
        } else {
            key = _.findKey(obj, predicate, context);
        }
        if (key !== void 0 && key !== -1) return obj[key];
    };
    _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        predicate = cb(predicate, context);
        _.each(obj, function(value, index, list) {
            if (predicate(value, index, list)) results.push(value);
        });
        return results;
    };
    _.reject = function(obj, predicate, context) {
        return _.filter(obj, _.negate(cb(predicate)), context);
    };
    _.every = _.all = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (!predicate(obj[currentKey], currentKey, obj)) return false;
        }
        return true;
    };
    _.some = _.any = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (predicate(obj[currentKey], currentKey, obj)) return true;
        }
        return false;
    };
    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        if (typeof fromIndex != "number" || guard) fromIndex = 0;
        return _.indexOf(obj, item, fromIndex) >= 0;
    };
    _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
            var func = isFunc ? method : value[method];
            return func == null ? func : func.apply(value, args);
        });
    };
    _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
    };
    _.where = function(obj, attrs) {
        return _.filter(obj, _.matcher(attrs));
    };
    _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matcher(attrs));
    };
    _.max = function(obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity, value, computed;
        if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
                value = obj[i];
                if (value > result) {
                    result = value;
                }
            }
        } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function(value, index, list) {
                computed = iteratee(value, index, list);
                if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                    result = value;
                    lastComputed = computed;
                }
            });
        }
        return result;
    };
    _.min = function(obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity, value, computed;
        if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
                value = obj[i];
                if (value < result) {
                    result = value;
                }
            }
        } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function(value, index, list) {
                computed = iteratee(value, index, list);
                if (computed < lastComputed || computed === Infinity && result === Infinity) {
                    result = value;
                    lastComputed = computed;
                }
            });
        }
        return result;
    };
    _.shuffle = function(obj) {
        var set = isArrayLike(obj) ? obj : _.values(obj);
        var length = set.length;
        var shuffled = Array(length);
        for (var index = 0, rand; index < length; index++) {
            rand = _.random(0, index);
            if (rand !== index) shuffled[index] = shuffled[rand];
            shuffled[rand] = set[index];
        }
        return shuffled;
    };
    _.sample = function(obj, n, guard) {
        if (n == null || guard) {
            if (!isArrayLike(obj)) obj = _.values(obj);
            return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
    };
    _.sortBy = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        return _.pluck(_.map(obj, function(value, index, list) {
            return {
                value: value,
                index: index,
                criteria: iteratee(value, index, list)
            };
        }).sort(function(left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
                if (a > b || a === void 0) return 1;
                if (a < b || b === void 0) return -1;
            }
            return left.index - right.index;
        }), "value");
    };
    var group = function(behavior) {
        return function(obj, iteratee, context) {
            var result = {};
            iteratee = cb(iteratee, context);
            _.each(obj, function(value, index) {
                var key = iteratee(value, index, obj);
                behavior(result, value, key);
            });
            return result;
        };
    };
    _.groupBy = group(function(result, value, key) {
        if (_.has(result, key)) result[key].push(value); else result[key] = [ value ];
    });
    _.indexBy = group(function(result, value, key) {
        result[key] = value;
    });
    _.countBy = group(function(result, value, key) {
        if (_.has(result, key)) result[key]++; else result[key] = 1;
    });
    _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (isArrayLike(obj)) return _.map(obj, _.identity);
        return _.values(obj);
    };
    _.size = function(obj) {
        if (obj == null) return 0;
        return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };
    _.partition = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var pass = [], fail = [];
        _.each(obj, function(value, key, obj) {
            (predicate(value, key, obj) ? pass : fail).push(value);
        });
        return [ pass, fail ];
    };
    _.first = _.head = _.take = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[0];
        return _.initial(array, array.length - n);
    };
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };
    _.last = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[array.length - 1];
        return _.rest(array, Math.max(0, array.length - n));
    };
    _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
    };
    _.compact = function(array) {
        return _.filter(array, _.identity);
    };
    var flatten = function(input, shallow, strict, startIndex) {
        var output = [], idx = 0;
        for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
            var value = input[i];
            if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                if (!shallow) value = flatten(value, shallow, strict);
                var j = 0, len = value.length;
                output.length += len;
                while (j < len) {
                    output[idx++] = value[j++];
                }
            } else if (!strict) {
                output[idx++] = value;
            }
        }
        return output;
    };
    _.flatten = function(array, shallow) {
        return flatten(array, shallow, false);
    };
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    _.uniq = _.unique = function(array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
            context = iteratee;
            iteratee = isSorted;
            isSorted = false;
        }
        if (iteratee != null) iteratee = cb(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = getLength(array); i < length; i++) {
            var value = array[i], computed = iteratee ? iteratee(value, i, array) : value;
            if (isSorted) {
                if (!i || seen !== computed) result.push(value);
                seen = computed;
            } else if (iteratee) {
                if (!_.contains(seen, computed)) {
                    seen.push(computed);
                    result.push(value);
                }
            } else if (!_.contains(result, value)) {
                result.push(value);
            }
        }
        return result;
    };
    _.union = function() {
        return _.uniq(flatten(arguments, true, true));
    };
    _.intersection = function(array) {
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = getLength(array); i < length; i++) {
            var item = array[i];
            if (_.contains(result, item)) continue;
            for (var j = 1; j < argsLength; j++) {
                if (!_.contains(arguments[j], item)) break;
            }
            if (j === argsLength) result.push(item);
        }
        return result;
    };
    _.difference = function(array) {
        var rest = flatten(arguments, true, true, 1);
        return _.filter(array, function(value) {
            return !_.contains(rest, value);
        });
    };
    _.zip = function() {
        return _.unzip(arguments);
    };
    _.unzip = function(array) {
        var length = array && _.max(array, getLength).length || 0;
        var result = Array(length);
        for (var index = 0; index < length; index++) {
            result[index] = _.pluck(array, index);
        }
        return result;
    };
    _.object = function(list, values) {
        var result = {};
        for (var i = 0, length = getLength(list); i < length; i++) {
            if (values) {
                result[list[i]] = values[i];
            } else {
                result[list[i][0]] = list[i][1];
            }
        }
        return result;
    };
    function createPredicateIndexFinder(dir) {
        return function(array, predicate, context) {
            predicate = cb(predicate, context);
            var length = getLength(array);
            var index = dir > 0 ? 0 : length - 1;
            for (;index >= 0 && index < length; index += dir) {
                if (predicate(array[index], index, array)) return index;
            }
            return -1;
        };
    }
    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);
    _.sortedIndex = function(array, obj, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = getLength(array);
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
        }
        return low;
    };
    function createIndexFinder(dir, predicateFind, sortedIndex) {
        return function(array, item, idx) {
            var i = 0, length = getLength(array);
            if (typeof idx == "number") {
                if (dir > 0) {
                    i = idx >= 0 ? idx : Math.max(idx + length, i);
                } else {
                    length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
                }
            } else if (sortedIndex && idx && length) {
                idx = sortedIndex(array, item);
                return array[idx] === item ? idx : -1;
            }
            if (item !== item) {
                idx = predicateFind(slice.call(array, i, length), _.isNaN);
                return idx >= 0 ? idx + i : -1;
            }
            for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                if (array[idx] === item) return idx;
            }
            return -1;
        };
    }
    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
    _.range = function(start, stop, step) {
        if (stop == null) {
            stop = start || 0;
            start = 0;
        }
        step = step || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
        for (var idx = 0; idx < length; idx++, start += step) {
            range[idx] = start;
        }
        return range;
    };
    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
        if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
        var self = baseCreate(sourceFunc.prototype);
        var result = sourceFunc.apply(self, args);
        if (_.isObject(result)) return result;
        return self;
    };
    _.bind = function(func, context) {
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError("Bind must be called on a function");
        var args = slice.call(arguments, 2);
        var bound = function() {
            return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
        };
        return bound;
    };
    _.partial = function(func) {
        var boundArgs = slice.call(arguments, 1);
        var bound = function() {
            var position = 0, length = boundArgs.length;
            var args = Array(length);
            for (var i = 0; i < length; i++) {
                args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
            }
            while (position < arguments.length) args.push(arguments[position++]);
            return executeBound(func, bound, this, this, args);
        };
        return bound;
    };
    _.bindAll = function(obj) {
        var i, length = arguments.length, key;
        if (length <= 1) throw new Error("bindAll must be passed function names");
        for (i = 1; i < length; i++) {
            key = arguments[i];
            obj[key] = _.bind(obj[key], obj);
        }
        return obj;
    };
    _.memoize = function(func, hasher) {
        var memoize = function(key) {
            var cache = memoize.cache;
            var address = "" + (hasher ? hasher.apply(this, arguments) : key);
            if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
            return cache[address];
        };
        memoize.cache = {};
        return memoize;
    };
    _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
            return func.apply(null, args);
        }, wait);
    };
    _.defer = _.partial(_.delay, _, 1);
    _.throttle = function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options) options = {};
        var later = function() {
            previous = options.leading === false ? 0 : _.now();
            timeout = null;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
        };
        return function() {
            var now = _.now();
            if (!previous && options.leading === false) previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0 || remaining > wait) {
                if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                }
                previous = now;
                result = func.apply(context, args);
                if (!timeout) context = args = null;
            } else if (!timeout && options.trailing !== false) {
                timeout = setTimeout(later, remaining);
            }
            return result;
        };
    };
    _.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function() {
            var last = _.now() - timestamp;
            if (last < wait && last >= 0) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                }
            }
        };
        return function() {
            context = this;
            args = arguments;
            timestamp = _.now();
            var callNow = immediate && !timeout;
            if (!timeout) timeout = setTimeout(later, wait);
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }
            return result;
        };
    };
    _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
    };
    _.negate = function(predicate) {
        return function() {
            return !predicate.apply(this, arguments);
        };
    };
    _.compose = function() {
        var args = arguments;
        var start = args.length - 1;
        return function() {
            var i = start;
            var result = args[start].apply(this, arguments);
            while (i--) result = args[i].call(this, result);
            return result;
        };
    };
    _.after = function(times, func) {
        return function() {
            if (--times < 1) {
                return func.apply(this, arguments);
            }
        };
    };
    _.before = function(times, func) {
        var memo;
        return function() {
            if (--times > 0) {
                memo = func.apply(this, arguments);
            }
            if (times <= 1) func = null;
            return memo;
        };
    };
    _.once = _.partial(_.before, 2);
    var hasEnumBug = !{
        toString: null
    }.propertyIsEnumerable("toString");
    var nonEnumerableProps = [ "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString" ];
    function collectNonEnumProps(obj, keys) {
        var nonEnumIdx = nonEnumerableProps.length;
        var constructor = obj.constructor;
        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
        var prop = "constructor";
        if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
        while (nonEnumIdx--) {
            prop = nonEnumerableProps[nonEnumIdx];
            if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
                keys.push(prop);
            }
        }
    }
    _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
    };
    _.allKeys = function(obj) {
        if (!_.isObject(obj)) return [];
        var keys = [];
        for (var key in obj) keys.push(key);
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
    };
    _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
            values[i] = obj[keys[i]];
        }
        return values;
    };
    _.mapObject = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = _.keys(obj), length = keys.length, results = {}, currentKey;
        for (var index = 0; index < length; index++) {
            currentKey = keys[index];
            results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
    _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
            pairs[i] = [ keys[i], obj[keys[i]] ];
        }
        return pairs;
    };
    _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
            result[obj[keys[i]]] = keys[i];
        }
        return result;
    };
    _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
            if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
    };
    _.extend = createAssigner(_.allKeys);
    _.extendOwn = _.assign = createAssigner(_.keys);
    _.findKey = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = _.keys(obj), key;
        for (var i = 0, length = keys.length; i < length; i++) {
            key = keys[i];
            if (predicate(obj[key], key, obj)) return key;
        }
    };
    _.pick = function(object, oiteratee, context) {
        var result = {}, obj = object, iteratee, keys;
        if (obj == null) return result;
        if (_.isFunction(oiteratee)) {
            keys = _.allKeys(obj);
            iteratee = optimizeCb(oiteratee, context);
        } else {
            keys = flatten(arguments, false, false, 1);
            iteratee = function(value, key, obj) {
                return key in obj;
            };
            obj = Object(obj);
        }
        for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i];
            var value = obj[key];
            if (iteratee(value, key, obj)) result[key] = value;
        }
        return result;
    };
    _.omit = function(obj, iteratee, context) {
        if (_.isFunction(iteratee)) {
            iteratee = _.negate(iteratee);
        } else {
            var keys = _.map(flatten(arguments, false, false, 1), String);
            iteratee = function(value, key) {
                return !_.contains(keys, key);
            };
        }
        return _.pick(obj, iteratee, context);
    };
    _.defaults = createAssigner(_.allKeys, true);
    _.create = function(prototype, props) {
        var result = baseCreate(prototype);
        if (props) _.extendOwn(result, props);
        return result;
    };
    _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
    _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
    };
    _.isMatch = function(object, attrs) {
        var keys = _.keys(attrs), length = keys.length;
        if (object == null) return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
            var key = keys[i];
            if (attrs[key] !== obj[key] || !(key in obj)) return false;
        }
        return true;
    };
    var eq = function(a, b, aStack, bStack) {
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        if (a == null || b == null) return a === b;
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;
        switch (className) {
          case "[object RegExp]":
          case "[object String]":
            return "" + a === "" + b;

          case "[object Number]":
            if (+a !== +a) return +b !== +b;
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;

          case "[object Date]":
          case "[object Boolean]":
            return +a === +b;
        }
        var areArrays = className === "[object Array]";
        if (!areArrays) {
            if (typeof a != "object" || typeof b != "object") return false;
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
                return false;
            }
        }
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
            if (aStack[length] === a) return bStack[length] === b;
        }
        aStack.push(a);
        bStack.push(b);
        if (areArrays) {
            length = a.length;
            if (length !== b.length) return false;
            while (length--) {
                if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
        } else {
            var keys = _.keys(a), key;
            length = keys.length;
            if (_.keys(b).length !== length) return false;
            while (length--) {
                key = keys[length];
                if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
            }
        }
        aStack.pop();
        bStack.pop();
        return true;
    };
    _.isEqual = function(a, b) {
        return eq(a, b);
    };
    _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
        return _.keys(obj).length === 0;
    };
    _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
    };
    _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) === "[object Array]";
    };
    _.isObject = function(obj) {
        var type = typeof obj;
        return type === "function" || type === "object" && !!obj;
    };
    _.each([ "Arguments", "Function", "String", "Number", "Date", "RegExp", "Error" ], function(name) {
        _["is" + name] = function(obj) {
            return toString.call(obj) === "[object " + name + "]";
        };
    });
    if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
            return _.has(obj, "callee");
        };
    }
    if (typeof /./ != "function" && typeof Int8Array != "object") {
        _.isFunction = function(obj) {
            return typeof obj == "function" || false;
        };
    }
    _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    };
    _.isNaN = function(obj) {
        return _.isNumber(obj) && obj !== +obj;
    };
    _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) === "[object Boolean]";
    };
    _.isNull = function(obj) {
        return obj === null;
    };
    _.isUndefined = function(obj) {
        return obj === void 0;
    };
    _.has = function(obj, key) {
        return obj != null && hasOwnProperty.call(obj, key);
    };
    _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
    };
    _.identity = function(value) {
        return value;
    };
    _.constant = function(value) {
        return function() {
            return value;
        };
    };
    _.noop = function() {};
    _.property = property;
    _.propertyOf = function(obj) {
        return obj == null ? function() {} : function(key) {
            return obj[key];
        };
    };
    _.matcher = _.matches = function(attrs) {
        attrs = _.extendOwn({}, attrs);
        return function(obj) {
            return _.isMatch(obj, attrs);
        };
    };
    _.times = function(n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = optimizeCb(iteratee, context, 1);
        for (var i = 0; i < n; i++) accum[i] = iteratee(i);
        return accum;
    };
    _.random = function(min, max) {
        if (max == null) {
            max = min;
            min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
    };
    _.now = Date.now || function() {
        return new Date().getTime();
    };
    var escapeMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    };
    var unescapeMap = _.invert(escapeMap);
    var createEscaper = function(map) {
        var escaper = function(match) {
            return map[match];
        };
        var source = "(?:" + _.keys(map).join("|") + ")";
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, "g");
        return function(string) {
            string = string == null ? "" : "" + string;
            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
    };
    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);
    _.result = function(object, property, fallback) {
        var value = object == null ? void 0 : object[property];
        if (value === void 0) {
            value = fallback;
        }
        return _.isFunction(value) ? value.call(object) : value;
    };
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
    var escapeChar = function(match) {
        return "\\" + escapes[match];
    };
    _.template = function(text, settings, oldSettings) {
        if (!settings && oldSettings) settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = RegExp([ (settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source ].join("|") + "|$", "g");
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escaper, escapeChar);
            index = offset + match.length;
            if (escape) {
                source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
            } else if (interpolate) {
                source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            } else if (evaluate) {
                source += "';\n" + evaluate + "\n__p+='";
            }
            return match;
        });
        source += "';\n";
        if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        try {
            var render = new Function(settings.variable || "obj", "_", source);
        } catch (e) {
            e.source = source;
            throw e;
        }
        var template = function(data) {
            return render.call(this, data, _);
        };
        var argument = settings.variable || "obj";
        template.source = "function(" + argument + "){\n" + source + "}";
        return template;
    };
    _.chain = function(obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
    };
    var result = function(instance, obj) {
        return instance._chain ? _(obj).chain() : obj;
    };
    _.mixin = function(obj) {
        _.each(_.functions(obj), function(name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function() {
                var args = [ this._wrapped ];
                push.apply(args, arguments);
                return result(this, func.apply(_, args));
            };
        });
    };
    _.mixin(_);
    _.each([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name === "shift" || name === "splice") && obj.length === 0) delete obj[0];
            return result(this, obj);
        };
    });
    _.each([ "concat", "join", "slice" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            return result(this, method.apply(this._wrapped, arguments));
        };
    });
    _.prototype.value = function() {
        return this._wrapped;
    };
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
    _.prototype.toString = function() {
        return "" + this._wrapped;
    };
    if (typeof define === "function" && define.amd) {
        define("underscore", [], function() {
            return _;
        });
    }
}).call(this);

!function($) {
    "use strict";
    var FOUNDATION_VERSION = "6.0.6";
    var Foundation = {
        version: FOUNDATION_VERSION,
        _plugins: {},
        _uuids: [],
        _activePlugins: {},
        rtl: function() {
            return $("html").attr("dir") === "rtl";
        },
        plugin: function(plugin, name) {
            var className = name || functionName(plugin);
            var attrName = hyphenate(className);
            this._plugins[attrName] = this[className] = plugin;
        },
        registerPlugin: function(plugin) {
            var pluginName = functionName(plugin.constructor).toLowerCase();
            plugin.uuid = this.GetYoDigits(6, pluginName);
            if (!plugin.$element.attr("data-" + pluginName)) {
                plugin.$element.attr("data-" + pluginName, plugin.uuid);
            }
            plugin.$element.trigger("init.zf." + pluginName);
            this._activePlugins[plugin.uuid] = plugin;
            return;
        },
        unregisterPlugin: function(plugin) {
            var pluginName = functionName(plugin.constructor).toLowerCase();
            delete this._activePlugins[plugin.uuid];
            plugin.$element.removeAttr("data-" + pluginName).trigger("destroyed.zf." + pluginName);
            return;
        },
        _reflow: function(plugins) {
            var actvPlugins = Object.keys(this._activePlugins);
            var _this = this;
            if (!plugins) {
                actvPlugins.forEach(function(p) {
                    _this._activePlugins[p]._init();
                });
            } else if (typeof plugins === "string") {
                var namespace = plugins.split("-")[1];
                if (namespace) {
                    this._activePlugins[plugins]._init();
                } else {
                    namespace = new RegExp(plugins, "i");
                    actvPlugins.filter(function(p) {
                        return namespace.test(p);
                    }).forEach(function(p) {
                        _this._activePlugins[p]._init();
                    });
                }
            }
        },
        GetYoDigits: function(length, namespace) {
            length = length || 6;
            return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? "-" + namespace : "");
        },
        reflow: function(elem, plugins) {
            if (typeof plugins === "undefined") {
                plugins = Object.keys(this._plugins);
            } else if (typeof plugins === "string") {
                plugins = [ plugins ];
            }
            var _this = this;
            $.each(plugins, function(i, name) {
                var plugin = _this._plugins[name];
                var $elem = $(elem).find("[data-" + name + "]").addBack("[data-" + name + "]");
                $elem.each(function() {
                    var $el = $(this), opts = {};
                    if ($el.data("zf-plugin")) {
                        console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
                        return;
                    }
                    if ($el.attr("data-options")) {
                        var thing = $el.attr("data-options").split(";").forEach(function(e, i) {
                            var opt = e.split(":").map(function(el) {
                                return el.trim();
                            });
                            if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
                        });
                    }
                    try {
                        $el.data("zf-plugin", new plugin($(this), opts));
                    } catch (er) {
                        console.error(er);
                    } finally {
                        return;
                    }
                });
            });
        },
        getFnName: functionName,
        transitionend: function($elem) {
            var transitions = {
                transition: "transitionend",
                WebkitTransition: "webkitTransitionEnd",
                MozTransition: "transitionend",
                OTransition: "otransitionend"
            };
            var elem = document.createElement("div"), end;
            for (var t in transitions) {
                if (typeof elem.style[t] !== "undefined") {
                    end = transitions[t];
                }
            }
            if (end) {
                return end;
            } else {
                end = setTimeout(function() {
                    $elem.triggerHandler("transitionend", [ $elem ]);
                }, 1);
                return "transitionend";
            }
        }
    };
    Foundation.util = {
        throttle: function(func, delay) {
            var timer = null;
            return function() {
                var context = this, args = arguments;
                if (timer === null) {
                    timer = setTimeout(function() {
                        func.apply(context, args);
                        timer = null;
                    }, delay);
                }
            };
        }
    };
    var foundation = function(method) {
        var type = typeof method, $meta = $("meta.foundation-mq"), $noJS = $(".no-js");
        if (!$meta.length) {
            $('<meta class="foundation-mq">').appendTo(document.head);
        }
        if ($noJS.length) {
            $noJS.removeClass("no-js");
        }
        if (type === "undefined") {
            Foundation.MediaQuery._init();
            Foundation.reflow(this);
        } else if (type === "string") {
            var args = Array.prototype.slice.call(arguments, 1);
            var plugClass = this.data("zfPlugin");
            if (plugClass !== undefined && plugClass[method] !== undefined) {
                if (this.length === 1) {
                    plugClass[method].apply(plugClass, args);
                } else {
                    this.each(function(i, el) {
                        plugClass[method].apply($(el).data("zfPlugin"), args);
                    });
                }
            } else {
                throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : "this element") + ".");
            }
        } else {
            throw new TypeError("We're sorry, '" + type + "' is not a valid parameter. You must use a string representing the method you wish to invoke.");
        }
        return this;
    };
    window.Foundation = Foundation;
    $.fn.foundation = foundation;
    (function() {
        if (!Date.now || !window.Date.now) window.Date.now = Date.now = function() {
            return new Date().getTime();
        };
        var vendors = [ "webkit", "moz" ];
        for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
            var vp = vendors[i];
            window.requestAnimationFrame = window[vp + "RequestAnimationFrame"];
            window.cancelAnimationFrame = window[vp + "CancelAnimationFrame"] || window[vp + "CancelRequestAnimationFrame"];
        }
        if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
            var lastTime = 0;
            window.requestAnimationFrame = function(callback) {
                var now = Date.now();
                var nextTime = Math.max(lastTime + 16, now);
                return setTimeout(function() {
                    callback(lastTime = nextTime);
                }, nextTime - now);
            };
            window.cancelAnimationFrame = clearTimeout;
        }
        if (!window.performance || !window.performance.now) {
            window.performance = {
                start: Date.now(),
                now: function() {
                    return Date.now() - this.start;
                }
            };
        }
    })();
    if (!Function.prototype.bind) {
        Function.prototype.bind = function(oThis) {
            if (typeof this !== "function") {
                throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
            }
            var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function() {}, fBound = function() {
                return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
            };
            if (this.prototype) {
                fNOP.prototype = this.prototype;
            }
            fBound.prototype = new fNOP();
            return fBound;
        };
    }
    function functionName(fn) {
        if (Function.prototype.name === undefined) {
            var funcNameRegex = /function\s([^(]{1,})\(/;
            var results = funcNameRegex.exec(fn.toString());
            return results && results.length > 1 ? results[1].trim() : "";
        } else if (fn.prototype === undefined) {
            return fn.constructor.name;
        } else {
            return fn.prototype.constructor.name;
        }
    }
    function parseValue(str) {
        if (/true/.test(str)) return true; else if (/false/.test(str)) return false; else if (!isNaN(str * 1)) return parseFloat(str);
        return str;
    }
    function hyphenate(str) {
        return str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
    }
}(jQuery);

!function(Foundation, window) {
    var ImNotTouchingYou = function(element, parent, lrOnly, tbOnly) {
        var eleDims = GetDimensions(element), top, bottom, left, right;
        if (parent) {
            var parDims = GetDimensions(parent);
            bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
            top = eleDims.offset.top >= parDims.offset.top;
            left = eleDims.offset.left >= parDims.offset.left;
            right = eleDims.offset.left + eleDims.width <= parDims.width;
        } else {
            bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
            top = eleDims.offset.top >= eleDims.windowDims.offset.top;
            left = eleDims.offset.left >= eleDims.windowDims.offset.left;
            right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
        }
        var allDirs = [ bottom, top, left, right ];
        if (lrOnly) {
            return left === right === true;
        }
        if (tbOnly) {
            return top === bottom === true;
        }
        return allDirs.indexOf(false) === -1;
    };
    var GetDimensions = function(elem, test) {
        elem = elem.length ? elem[0] : elem;
        if (elem === window || elem === document) {
            throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
        }
        var rect = elem.getBoundingClientRect(), parRect = elem.parentNode.getBoundingClientRect(), winRect = document.body.getBoundingClientRect(), winY = window.pageYOffset, winX = window.pageXOffset;
        return {
            width: rect.width,
            height: rect.height,
            offset: {
                top: rect.top + winY,
                left: rect.left + winX
            },
            parentDims: {
                width: parRect.width,
                height: parRect.height,
                offset: {
                    top: parRect.top + winY,
                    left: parRect.left + winX
                }
            },
            windowDims: {
                width: winRect.width,
                height: winRect.height,
                offset: {
                    top: winY,
                    left: winX
                }
            }
        };
    };
    var GetOffsets = function(element, anchor, position, vOffset, hOffset, isOverflow) {
        var $eleDims = GetDimensions(element), $anchorDims = anchor ? GetDimensions(anchor) : null;
        switch (position) {
          case "top":
            return {
                left: $anchorDims.offset.left,
                top: $anchorDims.offset.top - ($eleDims.height + vOffset)
            };
            break;

          case "left":
            return {
                left: $anchorDims.offset.left - ($eleDims.width + hOffset),
                top: $anchorDims.offset.top
            };
            break;

          case "right":
            return {
                left: $anchorDims.offset.left + $anchorDims.width + hOffset,
                top: $anchorDims.offset.top
            };
            break;

          case "center top":
            return {
                left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
                top: $anchorDims.offset.top - ($eleDims.height + vOffset)
            };
            break;

          case "center bottom":
            return {
                left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
                top: $anchorDims.offset.top + $anchorDims.height + vOffset
            };
            break;

          case "center left":
            return {
                left: $anchorDims.offset.left - ($eleDims.width + hOffset),
                top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
            };
            break;

          case "center right":
            return {
                left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
                top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
            };
            break;

          case "center":
            return {
                left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
                top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
            };
            break;

          case "reveal":
            return {
                left: ($eleDims.windowDims.width - $eleDims.width) / 2,
                top: $eleDims.windowDims.offset.top + vOffset
            };

          case "reveal full":
            return {
                left: $eleDims.windowDims.offset.left,
                top: $eleDims.windowDims.offset.top
            };
            break;

          default:
            return {
                left: $anchorDims.offset.left,
                top: $anchorDims.offset.top + $anchorDims.height + vOffset
            };
        }
    };
    Foundation.Box = {
        ImNotTouchingYou: ImNotTouchingYou,
        GetDimensions: GetDimensions,
        GetOffsets: GetOffsets
    };
}(window.Foundation, window);

!function($, Foundation) {
    "use strict";
    Foundation.Keyboard = {};
    var keyCodes = {
        9: "TAB",
        13: "ENTER",
        27: "ESCAPE",
        32: "SPACE",
        37: "ARROW_LEFT",
        38: "ARROW_UP",
        39: "ARROW_RIGHT",
        40: "ARROW_DOWN"
    };
    var keys = function(kcs) {
        var k = {};
        for (var kc in kcs) k[kcs[kc]] = kcs[kc];
        return k;
    }(keyCodes);
    Foundation.Keyboard.keys = keys;
    var parseKey = function(event) {
        var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();
        if (event.shiftKey) key = "SHIFT_" + key;
        if (event.ctrlKey) key = "CTRL_" + key;
        if (event.altKey) key = "ALT_" + key;
        return key;
    };
    Foundation.Keyboard.parseKey = parseKey;
    var commands = {};
    var handleKey = function(event, component, functions) {
        var commandList = commands[Foundation.getFnName(component)], keyCode = parseKey(event), cmds, command, fn;
        if (!commandList) return console.warn("Component not defined!");
        if (typeof commandList.ltr === "undefined") {
            cmds = commandList;
        } else {
            if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl); else cmds = $.extend({}, commandList.rtl, commandList.ltr);
        }
        command = cmds[keyCode];
        fn = functions[command];
        if (fn && typeof fn === "function") {
            fn.apply(component);
            if (functions.handled || typeof functions.handled === "function") {
                functions.handled.apply(component);
            }
        } else {
            if (functions.unhandled || typeof functions.unhandled === "function") {
                functions.unhandled.apply(component);
            }
        }
    };
    Foundation.Keyboard.handleKey = handleKey;
    var findFocusable = function($element) {
        return $element.find("a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]").filter(function() {
            if (!$(this).is(":visible") || $(this).attr("tabindex") < 0) {
                return false;
            }
            return true;
        });
    };
    Foundation.Keyboard.findFocusable = findFocusable;
    var register = function(componentName, cmds) {
        commands[componentName] = cmds;
    };
    Foundation.Keyboard.register = register;
}(jQuery, window.Foundation);

!function($, Foundation) {
    var defaultQueries = {
        "default": "only screen",
        landscape: "only screen and (orientation: landscape)",
        portrait: "only screen and (orientation: portrait)",
        retina: "only screen and (-webkit-min-device-pixel-ratio: 2)," + "only screen and (min--moz-device-pixel-ratio: 2)," + "only screen and (-o-min-device-pixel-ratio: 2/1)," + "only screen and (min-device-pixel-ratio: 2)," + "only screen and (min-resolution: 192dpi)," + "only screen and (min-resolution: 2dppx)"
    };
    var MediaQuery = {
        queries: [],
        current: "",
        atLeast: function(size) {
            var query = this.get(size);
            if (query) {
                return window.matchMedia(query).matches;
            }
            return false;
        },
        get: function(size) {
            for (var i in this.queries) {
                var query = this.queries[i];
                if (size === query.name) return query.value;
            }
            return null;
        },
        _init: function() {
            var self = this;
            var extractedStyles = $(".foundation-mq").css("font-family");
            var namedQueries;
            namedQueries = parseStyleToObject(extractedStyles);
            for (var key in namedQueries) {
                self.queries.push({
                    name: key,
                    value: "only screen and (min-width: " + namedQueries[key] + ")"
                });
            }
            this.current = this._getCurrentSize();
            this._watcher();
        },
        _getCurrentSize: function() {
            var matched;
            for (var i in this.queries) {
                var query = this.queries[i];
                if (window.matchMedia(query.value).matches) {
                    matched = query;
                }
            }
            if (typeof matched === "object") {
                return matched.name;
            } else {
                return matched;
            }
        },
        _watcher: function() {
            var _this = this;
            $(window).on("resize.zf.mediaquery", function() {
                var newSize = _this._getCurrentSize();
                if (newSize !== _this.current) {
                    $(window).trigger("changed.zf.mediaquery", [ newSize, _this.current ]);
                    _this.current = newSize;
                }
            });
        }
    };
    Foundation.MediaQuery = MediaQuery;
    window.matchMedia || (window.matchMedia = function() {
        "use strict";
        var styleMedia = window.styleMedia || window.media;
        if (!styleMedia) {
            var style = document.createElement("style"), script = document.getElementsByTagName("script")[0], info = null;
            style.type = "text/css";
            style.id = "matchmediajs-test";
            script.parentNode.insertBefore(style, script);
            info = "getComputedStyle" in window && window.getComputedStyle(style, null) || style.currentStyle;
            styleMedia = {
                matchMedium: function(media) {
                    var text = "@media " + media + "{ #matchmediajs-test { width: 1px; } }";
                    if (style.styleSheet) {
                        style.styleSheet.cssText = text;
                    } else {
                        style.textContent = text;
                    }
                    return info.width === "1px";
                }
            };
        }
        return function(media) {
            return {
                matches: styleMedia.matchMedium(media || "all"),
                media: media || "all"
            };
        };
    }());
    function parseStyleToObject(str) {
        var styleObject = {};
        if (typeof str !== "string") {
            return styleObject;
        }
        str = str.trim().slice(1, -1);
        if (!str) {
            return styleObject;
        }
        styleObject = str.split("&").reduce(function(ret, param) {
            var parts = param.replace(/\+/g, " ").split("=");
            var key = parts[0];
            var val = parts[1];
            key = decodeURIComponent(key);
            val = val === undefined ? null : decodeURIComponent(val);
            if (!ret.hasOwnProperty(key)) {
                ret[key] = val;
            } else if (Array.isArray(ret[key])) {
                ret[key].push(val);
            } else {
                ret[key] = [ ret[key], val ];
            }
            return ret;
        }, {});
        return styleObject;
    }
}(jQuery, Foundation);

!function($, Foundation) {
    var initClasses = [ "mui-enter", "mui-leave" ];
    var activeClasses = [ "mui-enter-active", "mui-leave-active" ];
    function animate(isIn, element, animation, cb) {
        element = $(element).eq(0);
        if (!element.length) return;
        var initClass = isIn ? initClasses[0] : initClasses[1];
        var activeClass = isIn ? activeClasses[0] : activeClasses[1];
        reset();
        element.addClass(animation).css("transition", "none");
        requestAnimationFrame(function() {
            element.addClass(initClass);
            if (isIn) element.show();
        });
        requestAnimationFrame(function() {
            element[0].offsetWidth;
            element.css("transition", "");
            element.addClass(activeClass);
        });
        element.one(Foundation.transitionend(element), finish);
        function finish() {
            if (!isIn) element.hide();
            reset();
            if (cb) cb.apply(element);
        }
        function reset() {
            element[0].style.transitionDuration = 0;
            element.removeClass(initClass + " " + activeClass + " " + animation);
        }
    }
    var Motion = {
        animateIn: function(element, animation, cb) {
            animate(true, element, animation, cb);
        },
        animateOut: function(element, animation, cb) {
            animate(false, element, animation, cb);
        }
    };
    var Move = function(duration, elem, fn) {
        var anim, prog, start = null;
        function move(ts) {
            if (!start) start = window.performance.now();
            prog = ts - start;
            fn.apply(elem);
            if (prog < duration) {
                anim = window.requestAnimationFrame(move, elem);
            } else {
                window.cancelAnimationFrame(anim);
                elem.trigger("finished.zf.animate", [ elem ]).triggerHandler("finished.zf.animate", [ elem ]);
            }
        }
        anim = window.requestAnimationFrame(move);
    };
    Foundation.Move = Move;
    Foundation.Motion = Motion;
}(jQuery, Foundation);

!function($, Foundation) {
    "use strict";
    Foundation.Nest = {
        Feather: function(menu, type) {
            menu.attr("role", "menubar");
            type = type || "zf";
            var items = menu.find("li").attr({
                role: "menuitem"
            }), subMenuClass = "is-" + type + "-submenu", subItemClass = subMenuClass + "-item", hasSubClass = "is-" + type + "-submenu-parent";
            menu.find("a:first").attr("tabindex", 0);
            items.each(function() {
                var $item = $(this), $sub = $item.children("ul");
                if ($sub.length) {
                    $item.addClass("has-submenu " + hasSubClass).attr({
                        "aria-haspopup": true,
                        "aria-selected": false,
                        "aria-expanded": false,
                        "aria-label": $item.children("a:first").text()
                    });
                    $sub.addClass("submenu " + subMenuClass).attr({
                        "data-submenu": "",
                        "aria-hidden": true,
                        role: "menu"
                    });
                }
                if ($item.parent("[data-submenu]").length) {
                    $item.addClass("is-submenu-item " + subItemClass);
                }
            });
            return;
        },
        Burn: function(menu, type) {
            var items = menu.find("li").removeAttr("tabindex"), subMenuClass = "is-" + type + "-submenu", subItemClass = subMenuClass + "-item", hasSubClass = "is-" + type + "-submenu-parent";
            menu.find("*").removeClass(subMenuClass + " " + subItemClass + " " + hasSubClass + " has-submenu is-submenu-item submenu is-active").removeAttr("data-submenu").css("display", "");
        }
    };
}(jQuery, window.Foundation);

!function($, Foundation) {
    "use strict";
    var Timer = function(elem, options, cb) {
        var _this = this, duration = options.duration, nameSpace = Object.keys(elem.data())[0] || "timer", remain = -1, start, timer;
        this.restart = function() {
            remain = -1;
            clearTimeout(timer);
            this.start();
        };
        this.start = function() {
            clearTimeout(timer);
            remain = remain <= 0 ? duration : remain;
            elem.data("paused", false);
            start = Date.now();
            timer = setTimeout(function() {
                if (options.infinite) {
                    _this.restart();
                }
                cb();
            }, remain);
            elem.trigger("timerstart.zf." + nameSpace);
        };
        this.pause = function() {
            clearTimeout(timer);
            elem.data("paused", true);
            var end = Date.now();
            remain = remain - (end - start);
            elem.trigger("timerpaused.zf." + nameSpace);
        };
    };
    var onImagesLoaded = function(images, callback) {
        var self = this, unloaded = images.length;
        if (unloaded === 0) {
            callback();
        }
        var singleImageLoaded = function() {
            unloaded--;
            if (unloaded === 0) {
                callback();
            }
        };
        images.each(function() {
            if (this.complete) {
                singleImageLoaded();
            } else if (typeof this.naturalWidth !== "undefined" && this.naturalWidth > 0) {
                singleImageLoaded();
            } else {
                $(this).one("load", function() {
                    singleImageLoaded();
                });
            }
        });
    };
    Foundation.Timer = Timer;
    Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery, window.Foundation);

(function($) {
    $.spotSwipe = {
        version: "1.0.0",
        enabled: "ontouchstart" in document.documentElement,
        preventDefault: true,
        moveThreshold: 75,
        timeThreshold: 200
    };
    var startPosX, startPosY, startTime, elapsedTime, isMoving = false;
    function onTouchEnd() {
        this.removeEventListener("touchmove", onTouchMove);
        this.removeEventListener("touchend", onTouchEnd);
        isMoving = false;
    }
    function onTouchMove(e) {
        if ($.spotSwipe.preventDefault) {
            e.preventDefault();
        }
        if (isMoving) {
            var x = e.touches[0].pageX;
            var y = e.touches[0].pageY;
            var dx = startPosX - x;
            var dy = startPosY - y;
            var dir;
            elapsedTime = new Date().getTime() - startTime;
            if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
                dir = dx > 0 ? "left" : "right";
            } else if (Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
                dir = dy > 0 ? "down" : "up";
            }
            if (dir) {
                onTouchEnd.call(this);
                $(this).trigger("swipe", dir).trigger("swipe" + dir);
            }
        }
    }
    function onTouchStart(e) {
        if (e.touches.length == 1) {
            startPosX = e.touches[0].pageX;
            startPosY = e.touches[0].pageY;
            isMoving = true;
            startTime = new Date().getTime();
            this.addEventListener("touchmove", onTouchMove, false);
            this.addEventListener("touchend", onTouchEnd, false);
        }
    }
    function init() {
        this.addEventListener && this.addEventListener("touchstart", onTouchStart, false);
    }
    function teardown() {
        this.removeEventListener("touchstart", onTouchStart);
    }
    $.event.special.swipe = {
        setup: init
    };
    $.each([ "left", "up", "down", "right" ], function() {
        $.event.special["swipe" + this] = {
            setup: function() {
                $(this).on("swipe", $.noop);
            }
        };
    });
})(jQuery);

!function($) {
    $.fn.addTouch = function() {
        this.each(function(i, el) {
            $(el).bind("touchstart touchmove touchend touchcancel", function() {
                handleTouch(event);
            });
        });
        var handleTouch = function(event) {
            var touches = event.changedTouches, first = touches[0], eventTypes = {
                touchstart: "mousedown",
                touchmove: "mousemove",
                touchend: "mouseup"
            }, type = eventTypes[event.type];
            var simulatedEvent = document.createEvent("MouseEvent");
            simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0, null);
            first.target.dispatchEvent(simulatedEvent);
        };
    };
}(jQuery);

!function(Foundation, $) {
    "use strict";
    $(document).on("click.zf.trigger", "[data-open]", function() {
        var id = $(this).data("open");
        $("#" + id).triggerHandler("open.zf.trigger", [ $(this) ]);
    });
    $(document).on("click.zf.trigger", "[data-close]", function() {
        var id = $(this).data("close");
        if (id) {
            $("#" + id).triggerHandler("close.zf.trigger", [ $(this) ]);
        } else {
            $(this).trigger("close.zf.trigger");
        }
    });
    $(document).on("click.zf.trigger", "[data-toggle]", function() {
        var id = $(this).data("toggle");
        $("#" + id).triggerHandler("toggle.zf.trigger", [ $(this) ]);
    });
    $(document).on("close.zf.trigger", "[data-closable]", function() {
        var animation = $(this).data("closable") || "fade-out";
        if (Foundation.Motion) {
            Foundation.Motion.animateOut($(this), animation, function() {
                $(this).trigger("closed.zf");
            });
        } else {
            $(this).fadeOut().trigger("closed.zf");
        }
    });
    var MutationObserver = function() {
        var prefixes = [ "WebKit", "Moz", "O", "Ms", "" ];
        for (var i = 0; i < prefixes.length; i++) {
            if (prefixes[i] + "MutationObserver" in window) {
                return window[prefixes[i] + "MutationObserver"];
            }
        }
        return false;
    }();
    var checkListeners = function() {
        eventsListener();
        resizeListener();
        scrollListener();
        closemeListener();
    };
    $(window).load(function() {
        checkListeners();
    });
    var closemeListener = function(pluginName) {
        var yetiBoxes = $("[data-yeti-box]"), plugNames = [ "dropdown", "tooltip", "reveal" ];
        if (pluginName) {
            if (typeof pluginName === "string") {
                plugNames.push(pluginName);
            } else if (typeof pluginName === "object" && typeof pluginName[0] === "string") {
                plugNames.concat(pluginName);
            } else {
                console.error("Plugin names must be strings");
            }
        }
        if (yetiBoxes.length) {
            var listeners = plugNames.map(function(name) {
                return "closeme.zf." + name;
            }).join(" ");
            $(window).off(listeners).on(listeners, function(e, pluginId) {
                var plugin = e.namespace.split(".")[0];
                var plugins = $("[data-" + plugin + "]").not('[data-yeti-box="' + pluginId + '"]');
                plugins.each(function() {
                    var _this = $(this);
                    _this.triggerHandler("close.zf.trigger", [ _this ]);
                });
            });
        }
    };
    var resizeListener = function(debounce) {
        var timer, $nodes = $("[data-resize]");
        if ($nodes.length) {
            $(window).off("resize.zf.trigger").on("resize.zf.trigger", function(e) {
                if (timer) {
                    clearTimeout(timer);
                }
                timer = setTimeout(function() {
                    if (!MutationObserver) {
                        $nodes.each(function() {
                            $(this).triggerHandler("resizeme.zf.trigger");
                        });
                    }
                    $nodes.attr("data-events", "resize");
                }, debounce || 10);
            });
        }
    };
    var scrollListener = function(debounce) {
        var timer, $nodes = $("[data-scroll]");
        if ($nodes.length) {
            $(window).off("scroll.zf.trigger").on("scroll.zf.trigger", function(e) {
                if (timer) {
                    clearTimeout(timer);
                }
                timer = setTimeout(function() {
                    if (!MutationObserver) {
                        $nodes.each(function() {
                            $(this).triggerHandler("scrollme.zf.trigger");
                        });
                    }
                    $nodes.attr("data-events", "scroll");
                }, debounce || 10);
            });
        }
    };
    var eventsListener = function() {
        if (!MutationObserver) {
            return false;
        }
        var nodes = document.querySelectorAll("[data-resize], [data-scroll], [data-mutate]");
        var listeningElementsMutation = function(mutationRecordsList) {
            var $target = $(mutationRecordsList[0].target);
            switch ($target.attr("data-events")) {
              case "resize":
                $target.triggerHandler("resizeme.zf.trigger", [ $target ]);
                break;

              case "scroll":
                $target.triggerHandler("scrollme.zf.trigger", [ $target, window.pageYOffset ]);
                break;

              default:
                return false;
            }
        };
        if (nodes.length) {
            for (var i = 0; i <= nodes.length - 1; i++) {
                var elementObserver = new MutationObserver(listeningElementsMutation);
                elementObserver.observe(nodes[i], {
                    attributes: true,
                    childList: false,
                    characterData: false,
                    subtree: false,
                    attributeFilter: [ "data-events" ]
                });
            }
        }
    };
    Foundation.IHearYou = checkListeners;
}(window.Foundation, window.jQuery);

!function(Foundation, $) {
    "use strict";
    function Abide(element, options) {
        this.$element = element;
        this.options = $.extend({}, Abide.defaults, this.$element.data(), options);
        this.$window = $(window);
        this.name = "Abide";
        this.attr = "data-abide";
        this._init();
        this._events();
        Foundation.registerPlugin(this);
    }
    Abide.defaults = {
        validateOn: "fieldChange",
        labelErrorClass: "is-invalid-label",
        inputErrorClass: "is-invalid-input",
        formErrorSelector: ".form-error",
        formErrorClass: "is-visible",
        patterns: {
            alpha: /^[a-zA-Z]+$/,
            alpha_numeric: /^[a-zA-Z0-9]+$/,
            integer: /^[-+]?\d+$/,
            number: /^[-+]?\d*(?:[\.\,]\d+)?$/,
            card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
            cvv: /^([0-9]){3,4}$/,
            email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
            url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
            domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,
            datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
            date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
            time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
            dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
            month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
            day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,
            color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
        },
        validators: {
            equalTo: function(el, required, parent) {
                var from = document.getElementById(el.getAttribute(this.add_namespace("data-equalto"))).value, to = el.value, valid = from === to;
                return valid;
            }
        }
    };
    Abide.prototype._init = function() {};
    Abide.prototype._events = function() {
        var self = this;
        this.$element.off(".abide").on("reset.fndtn.abide", function(e) {
            self.resetForm($(this));
        }).on("submit.fndtn.abide", function(e) {
            e.preventDefault();
            self.validateForm(self.$element);
        }).find("input, textarea, select").off(".abide").on("blur.fndtn.abide change.fndtn.abide", function(e) {
            if (self.options.validateOn === "fieldChange") {
                self.validateInput($(e.target), self.$element);
            }
        }).on("keydown.fndtn.abide", function(e) {});
    }, Abide.prototype._reflow = function() {
        var self = this;
    };
    Abide.prototype.requiredCheck = function($el) {
        switch ($el[0].type) {
          case "text":
            if ($el.attr("required") && !$el.val()) {
                return false;
            } else {
                return true;
            }
            break;

          case "password":
            if ($el.attr("required") && !$el.val()) {
                return false;
            } else {
                return true;
            }
            break;

          case "checkbox":
            if ($el.attr("required") && !$el.is(":checked")) {
                return false;
            } else {
                return true;
            }
            break;

          case "radio":
            if ($el.attr("required") && !$el.is(":checked")) {
                return false;
            } else {
                return true;
            }
            break;

          default:
            if ($el.attr("required") && (!$el.val() || !$el.val().length || $el.is(":empty"))) {
                return false;
            } else {
                return true;
            }
        }
    };
    Abide.prototype.findLabel = function($el) {
        if ($el.next("label").length) {
            return $el.next("label");
        } else {
            return $el.closest("label");
        }
    };
    Abide.prototype.addErrorClasses = function($el) {
        var self = this, $label = self.findLabel($el), $formError = $el.next(self.options.formErrorSelector) || $el.find(self.options.formErrorSelector);
        if ($label) {
            $label.addClass(self.options.labelErrorClass);
        }
        if ($formError) {
            $formError.addClass(self.options.formErrorClass);
        }
        $el.addClass(self.options.inputErrorClass);
    };
    Abide.prototype.removeErrorClasses = function($el) {
        var self = this, $label = self.findLabel($el), $formError = $el.next(self.options.formErrorSelector) || $el.find(self.options.formErrorSelector);
        if ($label && $label.hasClass(self.options.labelErrorClass)) {
            $label.removeClass(self.options.labelErrorClass);
        }
        if ($formError && $formError.hasClass(self.options.formErrorClass)) {
            $formError.removeClass(self.options.formErrorClass);
        }
        if ($el.hasClass(self.options.inputErrorClass)) {
            $el.removeClass(self.options.inputErrorClass);
        }
    };
    Abide.prototype.validateInput = function($el, $form) {
        var self = this, textInput = $form.find('input[type="text"]'), passwordInput = $form.find('input[type="password"]'), checkInput = $form.find('input[type="checkbox"]'), label, radioGroupName;
        if ($el[0].type === "text") {
            if (!self.requiredCheck($el) || !self.validateText($el)) {
                self.addErrorClasses($el);
                $el.trigger("invalid.fndtn.abide", $el[0]);
            } else {
                self.removeErrorClasses($el);
                $el.trigger("valid.fndtn.abide", $el[0]);
            }
        } else if ($el[0].type === "radio") {
            radioGroupName = $el.attr("name");
            label = $el.siblings("label");
            if (self.validateRadio(radioGroupName)) {
                $(label).each(function() {
                    if ($(this).hasClass(self.options.labelErrorClass)) {
                        $(this).removeClass(self.options.labelErrorClass);
                    }
                });
                $el.trigger("valid.fndtn.abide", $el[0]);
            } else {
                $(label).each(function() {
                    $(this).addClass(self.options.labelErrorClass);
                });
                $el.trigger("invalid.fndtn.abide", $el[0]);
            }
        } else if ($el[0].type === "checkbox") {
            if (!self.requiredCheck($el)) {
                self.addErrorClasses($el);
                $el.trigger("invalid.fndtn.abide", $el[0]);
            } else {
                self.removeErrorClasses($el);
                $el.trigger("valid.fndtn.abide", $el[0]);
            }
        } else {
            if (!self.requiredCheck($el) || !self.validateText($el)) {
                self.addErrorClasses($el);
                $el.trigger("invalid.fndtn.abide", $el[0]);
            } else {
                self.removeErrorClasses($el);
                $el.trigger("valid.fndtn.abide", $el[0]);
            }
        }
    };
    Abide.prototype.validateForm = function($form) {
        var self = this, inputs = $form.find("input"), inputCount = $form.find("input").length, counter = 0;
        while (counter < inputCount) {
            self.validateInput($(inputs[counter]), $form);
            counter++;
        }
        if ($form.find(".form-error.is-visible").length || $form.find(".is-invalid-label").length) {
            $form.find("[data-abide-error]").css("display", "block");
        } else {
            $form.find("[data-abide-error]").css("display", "none");
        }
    };
    Abide.prototype.validateText = function($el) {
        var self = this, valid = false, patternLib = this.options.patterns, inputText = $($el).val(), pattern = $($el).attr("pattern");
        if (inputText.length === 0) {
            return true;
        } else {
            if (inputText.match(patternLib[pattern])) {
                return true;
            } else {
                return false;
            }
        }
    };
    Abide.prototype.validateRadio = function(group) {
        var self = this, labels = $(':radio[name="' + group + '"]').siblings("label"), counter = 0;
        $(':radio[name="' + group + '"]').each(function() {
            if (!self.requiredCheck($(this))) {
                counter++;
            }
            if ($(this).is(":checked")) {
                counter = 0;
            }
        });
        if (counter > 0) {
            return false;
        } else {
            return true;
        }
    };
    Abide.prototype.matchValidation = function(val, validation) {};
    Abide.prototype.resetForm = function($form) {
        var self = this;
        var invalidAttr = "data-invalid";
        $("[" + self.invalidAttr + "]", $form).removeAttr(invalidAttr);
        $("." + self.options.labelErrorClass, $form).not("small").removeClass(self.options.labelErrorClass);
        $("." + self.options.inputErrorClass, $form).not("small").removeClass(self.options.inputErrorClass);
        $(".form-error.is-visible").removeClass("is-visible");
        $form.find("[data-abide-error]").css("display", "none");
        $(":input", $form).not(":button, :submit, :reset, :hidden, [data-abide-ignore]").val("").removeAttr(invalidAttr);
    };
    Abide.prototype.destroy = function() {};
    Foundation.plugin(Abide, "Abide");
    if (typeof module !== "undefined" && typeof module.exports !== "undefined") module.exports = Abide;
    if (typeof define === "function") define([ "foundation" ], function() {
        return Abide;
    });
}(Foundation, jQuery);

!function($, Foundation) {
    "use strict";
    function Accordion(element, options) {
        this.$element = element;
        this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("Accordion", {
            ENTER: "toggle",
            SPACE: "toggle",
            ARROW_DOWN: "next",
            ARROW_UP: "previous"
        });
    }
    Accordion.defaults = {
        slideSpeed: 250,
        multiExpand: false,
        allowAllClosed: false
    };
    Accordion.prototype._init = function() {
        this.$element.attr("role", "tablist");
        this.$tabs = this.$element.children("li");
        if (this.$tabs.length == 0) {
            this.$tabs = this.$element.children("[data-accordion-item]");
        }
        this.$tabs.each(function(idx, el) {
            var $el = $(el), $content = $el.find("[data-tab-content]"), id = $content[0].id || Foundation.GetYoDigits(6, "accordion"), linkId = el.id || id + "-label";
            $el.find("a:first").attr({
                "aria-controls": id,
                role: "tab",
                id: linkId,
                "aria-expanded": false,
                "aria-selected": false
            });
            $content.attr({
                role: "tabpanel",
                "aria-labelledby": linkId,
                "aria-hidden": true,
                id: id
            });
        });
        var $initActive = this.$element.find(".is-active").children("[data-tab-content]");
        if ($initActive.length) {
            this.down($initActive, true);
        }
        this._events();
    };
    Accordion.prototype._events = function() {
        var _this = this;
        this.$tabs.each(function() {
            var $elem = $(this);
            var $tabContent = $elem.children("[data-tab-content]");
            if ($tabContent.length) {
                $elem.children("a").off("click.zf.accordion keydown.zf.accordion").on("click.zf.accordion", function(e) {
                    e.preventDefault();
                    if ($elem.hasClass("is-active")) {
                        if (_this.options.allowAllClosed || $elem.siblings().hasClass("is-active")) {
                            _this.up($tabContent);
                        }
                    } else {
                        _this.down($tabContent);
                    }
                }).on("keydown.zf.accordion", function(e) {
                    Foundation.Keyboard.handleKey(e, _this, {
                        toggle: function() {
                            _this.toggle($tabContent);
                        },
                        next: function() {
                            $elem.next().find("a").focus().trigger("click.zf.accordion");
                        },
                        previous: function() {
                            $elem.prev().find("a").focus().trigger("click.zf.accordion");
                        },
                        handled: function() {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    });
                });
            }
        });
    };
    Accordion.prototype.toggle = function($target) {
        if ($target.parent().hasClass("is-active")) {
            if (this.options.allowAllClosed || $target.parent().siblings().hasClass("is-active")) {
                this.up($target);
            } else {
                return;
            }
        } else {
            this.down($target);
        }
    };
    Accordion.prototype.down = function($target, firstTime) {
        var _this = this;
        if (!this.options.multiExpand && !firstTime) {
            var $currentActive = this.$element.find(".is-active").children("[data-tab-content]");
            if ($currentActive.length) {
                this.up($currentActive);
            }
        }
        $target.attr("aria-hidden", false).parent("[data-tab-content]").addBack().parent().addClass("is-active");
        $target.slideDown(_this.options.slideSpeed);
        $("#" + $target.attr("aria-labelledby")).attr({
            "aria-expanded": true,
            "aria-selected": true
        });
        this.$element.trigger("down.zf.accordion", [ $target ]);
    };
    Accordion.prototype.up = function($target) {
        var $aunts = $target.parent().siblings(), _this = this;
        var canClose = this.options.multiExpand ? $aunts.hasClass("is-active") : $target.parent().hasClass("is-active");
        if (!this.options.allowAllClosed && !canClose) {
            return;
        }
        $target.slideUp(_this.options.slideSpeed);
        $target.attr("aria-hidden", true).parent().removeClass("is-active");
        $("#" + $target.attr("aria-labelledby")).attr({
            "aria-expanded": false,
            "aria-selected": false
        });
        this.$element.trigger("up.zf.accordion", [ $target ]);
    };
    Accordion.prototype.destroy = function() {
        this.$element.find("[data-tab-content]").slideUp(0).css("display", "");
        this.$element.find("a").off(".zf.accordion");
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Accordion, "Accordion");
}(jQuery, window.Foundation);

!function($) {
    "use strict";
    function AccordionMenu(element, options) {
        this.$element = element;
        this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);
        Foundation.Nest.Feather(this.$element, "accordion");
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("AccordionMenu", {
            ENTER: "toggle",
            SPACE: "toggle",
            ARROW_RIGHT: "open",
            ARROW_UP: "up",
            ARROW_DOWN: "down",
            ARROW_LEFT: "close",
            ESCAPE: "closeAll",
            TAB: "down",
            SHIFT_TAB: "up"
        });
    }
    AccordionMenu.defaults = {
        slideSpeed: 250,
        multiOpen: true
    };
    AccordionMenu.prototype._init = function() {
        this.$element.find("[data-submenu]").not(".is-active").slideUp(0);
        this.$element.attr({
            role: "tablist",
            "aria-multiselectable": this.options.multiOpen
        });
        this.$menuLinks = this.$element.find(".has-submenu");
        this.$menuLinks.each(function() {
            var linkId = this.id || Foundation.GetYoDigits(6, "acc-menu-link"), $elem = $(this), $sub = $elem.children("[data-submenu]"), subId = $sub[0].id || Foundation.GetYoDigits(6, "acc-menu"), isActive = $sub.hasClass("is-active");
            $elem.attr({
                "aria-controls": subId,
                "aria-expanded": isActive,
                "aria-selected": false,
                role: "tab",
                id: linkId
            });
            $sub.attr({
                "aria-labelledby": linkId,
                "aria-hidden": !isActive,
                role: "tabpanel",
                id: subId
            });
        });
        var initPanes = this.$element.find(".is-active");
        if (initPanes.length) {
            var _this = this;
            initPanes.each(function() {
                _this.down($(this));
            });
        }
        this._events();
    };
    AccordionMenu.prototype._events = function() {
        var _this = this;
        this.$element.find("li").each(function() {
            var $submenu = $(this).children("[data-submenu]");
            if ($submenu.length) {
                $(this).children("a").off("click.zf.accordionmenu").on("click.zf.accordionmenu", function(e) {
                    e.preventDefault();
                    _this.toggle($submenu);
                });
            }
        }).on("keydown.zf.accordionmenu", function(e) {
            var $element = $(this), $elements = $element.parent("ul").children("li"), $prevElement, $nextElement, $target = $element.children("[data-submenu]");
            $elements.each(function(i) {
                if ($(this).is($element)) {
                    $prevElement = $elements.eq(Math.max(0, i - 1));
                    $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
                    if ($(this).children("[data-submenu]:visible").length) {
                        $nextElement = $element.find("li:first-child");
                    }
                    if ($(this).is(":first-child")) {
                        $prevElement = $element.parents("li").first();
                    } else if ($prevElement.children("[data-submenu]:visible").length) {
                        $prevElement = $prevElement.find("li:last-child");
                    }
                    if ($(this).is(":last-child")) {
                        $nextElement = $element.parents("li").first().next("li");
                    }
                    return;
                }
            });
            Foundation.Keyboard.handleKey(e, _this, {
                open: function() {
                    if ($target.is(":hidden")) {
                        _this.down($target);
                        $target.find("li").first().focus();
                    }
                },
                close: function() {
                    if ($target.length && !$target.is(":hidden")) {
                        _this.up($target);
                    } else if ($element.parent("[data-submenu]").length) {
                        _this.up($element.parent("[data-submenu]"));
                        $element.parents("li").first().focus();
                    }
                },
                up: function() {
                    $prevElement.focus();
                },
                down: function() {
                    $nextElement.focus();
                },
                toggle: function() {
                    if ($element.children("[data-submenu]").length) {
                        _this.toggle($element.children("[data-submenu]"));
                    }
                },
                closeAll: function() {
                    _this.hideAll();
                },
                handled: function() {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }
            });
        });
    };
    AccordionMenu.prototype.hideAll = function() {
        this.$element.find("[data-submenu]").slideUp(this.options.slideSpeed);
    };
    AccordionMenu.prototype.toggle = function($target) {
        if (!$target.is(":animated")) {
            if (!$target.is(":hidden")) {
                this.up($target);
            } else {
                this.down($target);
            }
        }
    };
    AccordionMenu.prototype.down = function($target) {
        var _this = this;
        if (!this.options.multiOpen) {
            this.up(this.$element.find(".is-active").not($target.parentsUntil(this.$element).add($target)));
        }
        $target.addClass("is-active").attr({
            "aria-hidden": false
        }).parent(".has-submenu").attr({
            "aria-expanded": true,
            "aria-selected": true
        });
        Foundation.Move(this.options.slideSpeed, $target, function() {
            $target.slideDown(_this.options.slideSpeed);
        });
        this.$element.trigger("down.zf.accordionMenu", [ $target ]);
    };
    AccordionMenu.prototype.up = function($target) {
        var _this = this;
        Foundation.Move(this.options.slideSpeed, $target, function() {
            $target.slideUp(_this.options.slideSpeed);
        });
        $target.attr("aria-hidden", true).find("[data-submenu]").slideUp(0).attr("aria-hidden", true).end().parent(".has-submenu").attr({
            "aria-expanded": false,
            "aria-selected": false
        });
        this.$element.trigger("up.zf.accordionMenu", [ $target ]);
    };
    AccordionMenu.prototype.destroy = function() {
        this.$element.find("[data-submenu]").slideDown(0).css("display", "");
        this.$element.find("a").off("click.zf.accordionMenu");
        Foundation.Nest.Burn(this.$element, "accordion");
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(AccordionMenu, "AccordionMenu");
}(jQuery, window.Foundation);

!function($, Foundation) {
    "use strict";
    function Drilldown(element, options) {
        this.$element = element;
        this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);
        Foundation.Nest.Feather(this.$element, "drilldown");
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("Drilldown", {
            ENTER: "open",
            SPACE: "open",
            ARROW_RIGHT: "next",
            ARROW_UP: "up",
            ARROW_DOWN: "down",
            ARROW_LEFT: "previous",
            ESCAPE: "close",
            TAB: "down",
            SHIFT_TAB: "up"
        });
    }
    Drilldown.defaults = {
        backButton: '<li class="js-drilldown-back"><a>Back</a></li>',
        wrapper: "<div></div>",
        closeOnClick: false
    };
    Drilldown.prototype._init = function() {
        this.$submenuAnchors = this.$element.find("li.has-submenu");
        this.$submenus = this.$submenuAnchors.children("[data-submenu]");
        this.$menuItems = this.$element.find("li:visible").not(".js-drilldown-back").attr("role", "menuitem");
        this._prepareMenu();
        this._keyboardEvents();
    };
    Drilldown.prototype._prepareMenu = function() {
        var _this = this;
        this.$submenuAnchors.each(function() {
            var $sub = $(this);
            var $link = $sub.find("a:first");
            $link.data("savedHref", $link.attr("href")).removeAttr("href");
            $sub.children("[data-submenu]").attr({
                "aria-hidden": true,
                tabindex: 0,
                role: "menu"
            });
            _this._events($sub);
        });
        this.$submenus.each(function() {
            var $menu = $(this), $back = $menu.find(".js-drilldown-back");
            if (!$back.length) {
                $menu.prepend(_this.options.backButton);
            }
            _this._back($menu);
        });
        if (!this.$element.parent().hasClass("is-drilldown")) {
            this.$wrapper = $(this.options.wrapper).addClass("is-drilldown").css(this._getMaxDims());
            this.$element.wrap(this.$wrapper);
        }
    };
    Drilldown.prototype._events = function($elem) {
        var _this = this;
        $elem.off("click.zf.drilldown").on("click.zf.drilldown", function(e) {
            if ($(e.target).parentsUntil("ul", "li").hasClass("is-drilldown-submenu-parent")) {
                e.stopImmediatePropagation();
                e.preventDefault();
            }
            _this._show($elem);
            if (_this.options.closeOnClick) {
                var $body = $("body").not(_this.$wrapper);
                $body.off(".zf.drilldown").on("click.zf.drilldown", function(e) {
                    e.preventDefault();
                    _this._hideAll();
                    $body.off(".zf.drilldown");
                });
            }
        });
    };
    Drilldown.prototype._keyboardEvents = function() {
        var _this = this;
        this.$menuItems.add(this.$element.find(".js-drilldown-back")).on("keydown.zf.drilldown", function(e) {
            var $element = $(this), $elements = $element.parent("ul").children("li"), $prevElement, $nextElement;
            $elements.each(function(i) {
                if ($(this).is($element)) {
                    $prevElement = $elements.eq(Math.max(0, i - 1));
                    $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
                    return;
                }
            });
            Foundation.Keyboard.handleKey(e, _this, {
                next: function() {
                    if ($element.is(_this.$submenuAnchors)) {
                        _this._show($element);
                        $element.on(Foundation.transitionend($element), function() {
                            $element.find("ul li").filter(_this.$menuItems).first().focus();
                        });
                    }
                },
                previous: function() {
                    _this._hide($element.parent("ul"));
                    $element.parent("ul").on(Foundation.transitionend($element), function() {
                        setTimeout(function() {
                            $element.parent("ul").parent("li").focus();
                        }, 1);
                    });
                },
                up: function() {
                    $prevElement.focus();
                },
                down: function() {
                    $nextElement.focus();
                },
                close: function() {
                    _this._back();
                },
                open: function() {
                    if (!$element.is(_this.$menuItems)) {
                        _this._hide($element.parent("ul"));
                        setTimeout(function() {
                            $element.parent("ul").parent("li").focus();
                        }, 1);
                    } else if ($element.is(_this.$submenuAnchors)) {
                        _this._show($element);
                        setTimeout(function() {
                            $element.find("ul li").filter(_this.$menuItems).first().focus();
                        }, 1);
                    }
                },
                handled: function() {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }
            });
        });
    };
    Drilldown.prototype._hideAll = function() {
        var $elem = this.$element.find(".is-drilldown-sub.is-active").addClass("is-closing");
        $elem.one(Foundation.transitionend($elem), function(e) {
            $elem.removeClass("is-active is-closing");
        });
        this.$element.trigger("closed.zf.drilldown");
    };
    Drilldown.prototype._back = function($elem) {
        var _this = this;
        $elem.off("click.zf.drilldown");
        $elem.children(".js-drilldown-back").on("click.zf.drilldown", function(e) {
            e.stopImmediatePropagation();
            _this._hide($elem);
        });
    };
    Drilldown.prototype._menuLinkEvents = function() {
        var _this = this;
        this.$menuItems.not(".has-submenu").off("click.zf.drilldown").on("click.zf.drilldown", function(e) {
            setTimeout(function() {
                _this._hideAll();
            }, 0);
        });
    };
    Drilldown.prototype._show = function($elem) {
        $elem.children("[data-submenu]").addClass("is-active");
        this.$element.trigger("open.zf.drilldown", [ $elem ]);
    };
    Drilldown.prototype._hide = function($elem) {
        var _this = this;
        $elem.addClass("is-closing").one(Foundation.transitionend($elem), function() {
            $elem.removeClass("is-active is-closing");
        });
        $elem.trigger("hide.zf.drilldown", [ $elem ]);
    };
    Drilldown.prototype._getMaxDims = function() {
        var max = 0, result = {};
        this.$submenus.add(this.$element).each(function() {
            var numOfElems = $(this).children("li").length;
            max = numOfElems > max ? numOfElems : max;
        });
        result.height = max * this.$menuItems[0].getBoundingClientRect().height + "px";
        result.width = this.$element[0].getBoundingClientRect().width + "px";
        return result;
    };
    Drilldown.prototype.destroy = function() {
        this._hideAll();
        Foundation.Nest.Burn(this.$element, "drilldown");
        this.$element.unwrap().find(".js-drilldown-back").remove().end().find(".is-active, .is-closing, .is-drilldown-sub").removeClass("is-active is-closing is-drilldown-sub").end().find("[data-submenu]").removeAttr("aria-hidden tabindex role").off(".zf.drilldown").end().off("zf.drilldown");
        this.$element.find("a").each(function() {
            var $link = $(this);
            if ($link.data("savedHref")) {
                $link.attr("href", $link.data("savedHref")).removeData("savedHref");
            } else {
                return;
            }
        });
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Drilldown, "Drilldown");
}(jQuery, window.Foundation);

!function($, Foundation) {
    "use strict";
    function Dropdown(element, options) {
        this.$element = element;
        this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("Dropdown", {
            ENTER: "open",
            SPACE: "open",
            ESCAPE: "close",
            TAB: "tab_forward",
            SHIFT_TAB: "tab_backward"
        });
    }
    Dropdown.defaults = {
        hoverDelay: 250,
        hover: false,
        hoverPane: false,
        vOffset: 1,
        hOffset: 1,
        positionClass: "",
        trapFocus: false,
        autoFocus: false
    };
    Dropdown.prototype._init = function() {
        var $id = this.$element.attr("id");
        this.$anchor = $('[data-toggle="' + $id + '"]') || $('[data-open="' + $id + '"]');
        this.$anchor.attr({
            "aria-controls": $id,
            "data-is-focus": false,
            "data-yeti-box": $id,
            "aria-haspopup": true,
            "aria-expanded": false
        });
        this.options.positionClass = this.getPositionClass();
        this.counter = 4;
        this.usedPositions = [];
        this.$element.attr({
            "aria-hidden": "true",
            "data-yeti-box": $id,
            "data-resize": $id,
            "aria-labelledby": this.$anchor[0].id || Foundation.GetYoDigits(6, "dd-anchor")
        });
        this._events();
    };
    Dropdown.prototype.getPositionClass = function() {
        var position = this.$element[0].className.match(/(top|left|right)/g);
        position = position ? position[0] : "";
        return position;
    };
    Dropdown.prototype._reposition = function(position) {
        this.usedPositions.push(position ? position : "bottom");
        if (!position && this.usedPositions.indexOf("top") < 0) {
            this.$element.addClass("top");
        } else if (position === "top" && this.usedPositions.indexOf("bottom") < 0) {
            this.$element.removeClass(position);
        } else if (position === "left" && this.usedPositions.indexOf("right") < 0) {
            this.$element.removeClass(position).addClass("right");
        } else if (position === "right" && this.usedPositions.indexOf("left") < 0) {
            this.$element.removeClass(position).addClass("left");
        } else if (!position && this.usedPositions.indexOf("top") > -1 && this.usedPositions.indexOf("left") < 0) {
            this.$element.addClass("left");
        } else if (position === "top" && this.usedPositions.indexOf("bottom") > -1 && this.usedPositions.indexOf("left") < 0) {
            this.$element.removeClass(position).addClass("left");
        } else if (position === "left" && this.usedPositions.indexOf("right") > -1 && this.usedPositions.indexOf("bottom") < 0) {
            this.$element.removeClass(position);
        } else if (position === "right" && this.usedPositions.indexOf("left") > -1 && this.usedPositions.indexOf("bottom") < 0) {
            this.$element.removeClass(position);
        } else {
            this.$element.removeClass(position);
        }
        this.classChanged = true;
        this.counter--;
    };
    Dropdown.prototype._setPosition = function() {
        if (this.$anchor.attr("aria-expanded") === "false") {
            return false;
        }
        var position = this.getPositionClass(), $eleDims = Foundation.Box.GetDimensions(this.$element), $anchorDims = Foundation.Box.GetDimensions(this.$anchor), _this = this, direction = position === "left" ? "left" : position === "right" ? "left" : "top", param = direction === "top" ? "height" : "width", offset = param === "height" ? this.options.vOffset : this.options.hOffset;
        if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
            this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, "center bottom", this.options.vOffset, this.options.hOffset, true)).css({
                width: $eleDims.windowDims.width - this.options.hOffset * 2,
                height: "auto"
            });
            this.classChanged = true;
            return false;
        }
        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));
        while (!Foundation.Box.ImNotTouchingYou(this.$element) && this.counter) {
            this._reposition(position);
            this._setPosition();
        }
    };
    Dropdown.prototype._events = function() {
        var _this = this;
        this.$element.on({
            "open.zf.trigger": this.open.bind(this),
            "close.zf.trigger": this.close.bind(this),
            "toggle.zf.trigger": this.toggle.bind(this),
            "resizeme.zf.trigger": this._setPosition.bind(this)
        });
        if (this.options.hover) {
            this.$anchor.off("mouseenter.zf.dropdown mouseleave.zf.dropdown").on("mouseenter.zf.dropdown", function() {
                clearTimeout(_this.timeout);
                _this.timeout = setTimeout(function() {
                    _this.open();
                    _this.$anchor.data("hover", true);
                }, _this.options.hoverDelay);
            }).on("mouseleave.zf.dropdown", function() {
                clearTimeout(_this.timeout);
                _this.timeout = setTimeout(function() {
                    _this.close();
                    _this.$anchor.data("hover", false);
                }, _this.options.hoverDelay);
            });
            if (this.options.hoverPane) {
                this.$element.off("mouseenter.zf.dropdown mouseleave.zf.dropdown").on("mouseenter.zf.dropdown", function() {
                    clearTimeout(_this.timeout);
                }).on("mouseleave.zf.dropdown", function() {
                    clearTimeout(_this.timeout);
                    _this.timeout = setTimeout(function() {
                        _this.close();
                        _this.$anchor.data("hover", false);
                    }, _this.options.hoverDelay);
                });
            }
        }
        this.$anchor.add(this.$element).on("keydown.zf.dropdown", function(e) {
            var $target = $(this), visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);
            Foundation.Keyboard.handleKey(e, _this, {
                tab_forward: function() {
                    if (this.$element.find(":focus").is(visibleFocusableElements.eq(-1))) {
                        if (this.options.trapFocus) {
                            visibleFocusableElements.eq(0).focus();
                            e.preventDefault();
                        } else {
                            this.close();
                        }
                    }
                },
                tab_backward: function() {
                    if (this.$element.find(":focus").is(visibleFocusableElements.eq(0)) || this.$element.is(":focus")) {
                        if (this.options.trapFocus) {
                            visibleFocusableElements.eq(-1).focus();
                            e.preventDefault();
                        } else {
                            this.close();
                        }
                    }
                },
                open: function() {
                    if ($target.is(_this.$anchor)) {
                        _this.open();
                        _this.$element.attr("tabindex", -1).focus();
                        e.preventDefault();
                    }
                },
                close: function() {
                    _this.close();
                    _this.$anchor.focus();
                }
            });
        });
    };
    Dropdown.prototype.open = function() {
        this.$element.trigger("closeme.zf.dropdown", this.$element.attr("id"));
        this.$anchor.addClass("hover").attr({
            "aria-expanded": true
        });
        this._setPosition();
        this.$element.addClass("is-open").attr({
            "aria-hidden": false
        });
        if (this.options.autoFocus) {
            var $focusable = Foundation.Keyboard.findFocusable(this.$element);
            if ($focusable.length) {
                $focusable.eq(0).focus();
            }
        }
        this.$element.trigger("show.zf.dropdown", [ this.$element ]);
    };
    Dropdown.prototype.close = function() {
        if (!this.$element.hasClass("is-open")) {
            return false;
        }
        this.$element.removeClass("is-open").attr({
            "aria-hidden": true
        });
        this.$anchor.removeClass("hover").attr("aria-expanded", false);
        if (this.classChanged) {
            var curPositionClass = this.getPositionClass();
            if (curPositionClass) {
                this.$element.removeClass(curPositionClass);
            }
            this.$element.addClass(this.options.positionClass).css({
                height: "",
                width: ""
            });
            this.classChanged = false;
            this.counter = 4;
            this.usedPositions.length = 0;
        }
        this.$element.trigger("hide.zf.dropdown", [ this.$element ]);
    };
    Dropdown.prototype.toggle = function() {
        if (this.$element.hasClass("is-open")) {
            if (this.$anchor.data("hover")) return;
            this.close();
        } else {
            this.open();
        }
    };
    Dropdown.prototype.destroy = function() {
        this.$element.off(".zf.trigger").hide();
        this.$anchor.off(".zf.dropdown");
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Dropdown, "Dropdown");
}(jQuery, window.Foundation);

!function($, Foundation) {
    "use strict";
    function DropdownMenu(element, options) {
        this.$element = element;
        this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);
        Foundation.Nest.Feather(this.$element, "dropdown");
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("DropdownMenu", {
            ENTER: "open",
            SPACE: "open",
            ARROW_RIGHT: "next",
            ARROW_UP: "up",
            ARROW_DOWN: "down",
            ARROW_LEFT: "previous",
            ESCAPE: "close"
        });
    }
    DropdownMenu.defaults = {
        disableHover: false,
        autoclose: true,
        hoverDelay: 50,
        clickOpen: false,
        closingTime: 500,
        alignment: "left",
        closeOnClick: true,
        verticalClass: "vertical",
        rightClass: "align-right",
        forceFollow: true
    };
    DropdownMenu.prototype._init = function() {
        var subs = this.$element.find("li.is-dropdown-submenu-parent");
        this.$element.children(".is-dropdown-submenu-parent").children(".is-dropdown-submenu").addClass("first-sub");
        this.$menuItems = this.$element.find('[role="menuitem"]');
        this.$tabs = this.$element.children('[role="menuitem"]');
        this.isVert = this.$element.hasClass(this.options.verticalClass);
        this.$tabs.find("ul.is-dropdown-submenu").addClass(this.options.verticalClass);
        if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === "right") {
            this.options.alignment = "right";
            subs.addClass("is-left-arrow opens-left");
        } else {
            subs.addClass("is-right-arrow opens-right");
        }
        if (!this.isVert) {
            this.$tabs.filter(".is-dropdown-submenu-parent").removeClass("is-right-arrow is-left-arrow opens-right opens-left").addClass("is-down-arrow");
        }
        this.changed = false;
        this._events();
    };
    DropdownMenu.prototype._events = function() {
        var _this = this, hasTouch = "ontouchstart" in window || typeof window.ontouchstart !== "undefined", parClass = "is-dropdown-submenu-parent", delay;
        if (this.options.clickOpen || hasTouch) {
            this.$menuItems.on("click.zf.dropdownmenu touchstart.zf.dropdownmenu", function(e) {
                var $elem = $(e.target).parentsUntil("ul", "." + parClass), hasSub = $elem.hasClass(parClass), hasClicked = $elem.attr("data-is-click") === "true", $sub = $elem.children(".is-dropdown-submenu");
                if (hasSub) {
                    if (hasClicked) {
                        if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                            return;
                        } else {
                            e.stopImmediatePropagation();
                            e.preventDefault();
                            _this._hide($elem);
                        }
                    } else {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        _this._show($elem.children(".is-dropdown-submenu"));
                        $elem.add($elem.parentsUntil(_this.$element, "." + parClass)).attr("data-is-click", true);
                    }
                } else {
                    return;
                }
            });
        }
        if (!this.options.disableHover) {
            this.$menuItems.on("mouseenter.zf.dropdownmenu", function(e) {
                e.stopImmediatePropagation();
                var $elem = $(this), hasSub = $elem.hasClass(parClass);
                if (hasSub) {
                    clearTimeout(delay);
                    delay = setTimeout(function() {
                        _this._show($elem.children(".is-dropdown-submenu"));
                    }, _this.options.hoverDelay);
                }
            }).on("mouseleave.zf.dropdownmenu", function(e) {
                var $elem = $(this), hasSub = $elem.hasClass(parClass);
                if (hasSub && _this.options.autoclose) {
                    if ($elem.attr("data-is-click") === "true" && _this.options.clickOpen) {
                        return false;
                    }
                    delay = setTimeout(function() {
                        _this._hide($elem);
                    }, _this.options.closingTime);
                }
            });
        }
        this.$menuItems.on("keydown.zf.dropdownmenu", function(e) {
            var $element = $(e.target).parentsUntil("ul", '[role="menuitem"]'), isTab = _this.$tabs.index($element) > -1, $elements = isTab ? _this.$tabs : $element.siblings("li").add($element), $prevElement, $nextElement;
            $elements.each(function(i) {
                if ($(this).is($element)) {
                    $prevElement = $elements.eq(i - 1);
                    $nextElement = $elements.eq(i + 1);
                    return;
                }
            });
            var nextSibling = function() {
                if (!$element.is(":last-child")) $nextElement.children("a:first").focus();
            }, prevSibling = function() {
                $prevElement.children("a:first").focus();
            }, openSub = function() {
                var $sub = $element.children("ul.is-dropdown-submenu");
                if ($sub.length) {
                    _this._show($sub);
                    $element.find("li > a:first").focus();
                } else {
                    return;
                }
            }, closeSub = function() {
                var close = $element.parent("ul").parent("li");
                close.children("a:first").focus();
                _this._hide(close);
            };
            var functions = {
                open: openSub,
                close: function() {
                    _this._hide(_this.$element);
                    _this.$menuItems.find("a:first").focus();
                },
                handled: function() {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }
            };
            if (isTab) {
                if (_this.vertical) {
                    if (_this.options.alignment === "left") {
                        $.extend(functions, {
                            down: nextSibling,
                            up: prevSibling,
                            next: openSub,
                            previous: closeSub
                        });
                    } else {
                        $.extend(functions, {
                            down: nextSibling,
                            up: prevSibling,
                            next: closeSub,
                            previous: openSub
                        });
                    }
                } else {
                    $.extend(functions, {
                        next: nextSibling,
                        previous: prevSibling,
                        down: openSub,
                        up: closeSub
                    });
                }
            } else {
                if (_this.options.alignment === "left") {
                    $.extend(functions, {
                        next: openSub,
                        previous: closeSub,
                        down: nextSibling,
                        up: prevSibling
                    });
                } else {
                    $.extend(functions, {
                        next: closeSub,
                        previous: openSub,
                        down: nextSibling,
                        up: prevSibling
                    });
                }
            }
            Foundation.Keyboard.handleKey(e, _this, functions);
        });
    };
    DropdownMenu.prototype._addBodyHandler = function() {
        var $body = $(document.body), _this = this;
        $body.off("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu").on("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu", function(e) {
            var $link = _this.$element.find(e.target);
            if ($link.length) {
                return;
            }
            _this._hide();
            $body.off("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu");
        });
    };
    DropdownMenu.prototype._show = function($sub) {
        var idx = this.$tabs.index(this.$tabs.filter(function(i, el) {
            return $(el).find($sub).length > 0;
        }));
        var $sibs = $sub.parent("li.is-dropdown-submenu-parent").siblings("li.is-dropdown-submenu-parent");
        this._hide($sibs, idx);
        $sub.css("visibility", "hidden").addClass("js-dropdown-active").attr({
            "aria-hidden": false
        }).parent("li.is-dropdown-submenu-parent").addClass("is-active").attr({
            "aria-selected": true,
            "aria-expanded": true
        });
        var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
            var oldClass = this.options.alignment === "left" ? "-right" : "-left", $parentLi = $sub.parent(".is-dropdown-submenu-parent");
            $parentLi.removeClass("opens" + oldClass).addClass("opens-" + this.options.alignment);
            clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
            if (!clear) {
                $parentLi.removeClass("opens-" + this.options.alignment).addClass("opens-inner");
            }
            this.changed = true;
        }
        $sub.css("visibility", "");
        if (this.options.closeOnClick) {
            this._addBodyHandler();
        }
        this.$element.trigger("show.zf.dropdownmenu", [ $sub ]);
    };
    DropdownMenu.prototype._hide = function($elem, idx) {
        var $toClose;
        if ($elem && $elem.length) {
            $toClose = $elem;
        } else if (idx !== undefined) {
            $toClose = this.$tabs.not(function(i, el) {
                return i === idx;
            });
        } else {
            $toClose = this.$element;
        }
        var somethingToClose = $toClose.hasClass("is-active") || $toClose.find(".is-active").length > 0;
        if (somethingToClose) {
            $toClose.find("li.is-active").add($toClose).attr({
                "aria-selected": false,
                "aria-expanded": false,
                "data-is-click": false
            }).removeClass("is-active");
            $toClose.find("ul.js-dropdown-active").attr({
                "aria-hidden": true
            }).removeClass("js-dropdown-active");
            if (this.changed || $toClose.find("opens-inner").length) {
                var oldClass = this.options.alignment === "left" ? "right" : "left";
                $toClose.find("li.is-dropdown-submenu-parent").add($toClose).removeClass("opens-inner opens-" + this.options.alignment).addClass("opens-" + oldClass);
                this.changed = false;
            }
            this.$element.trigger("hide.zf.dropdownmenu", [ $toClose ]);
        }
    };
    DropdownMenu.prototype.destroy = function() {
        this.$menuItems.off(".zf.dropdownmenu").removeAttr("data-is-click").removeClass("is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner");
        Foundation.Nest.Burn(this.$element, "dropdown");
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(DropdownMenu, "DropdownMenu");
}(jQuery, window.Foundation);

!function(Foundation, $) {
    "use strict";
    function Equalizer(element, options) {
        this.$element = element;
        this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);
        this.$window = $(window);
        this.name = "equalizer";
        this.attr = "data-equalizer";
        this._init();
        this._events();
        Foundation.registerPlugin(this);
    }
    Equalizer.defaults = {
        equalizeOnStack: true,
        throttleInterval: 50
    };
    Equalizer.prototype._init = function() {
        this._reflow();
    };
    Equalizer.prototype._events = function() {
        var self = this;
        this.$window.off(".equalizer").on("resize.fndtn.equalizer", Foundation.util.throttle(function() {
            self._reflow();
        }, self.options.throttleInterval));
    };
    Equalizer.prototype._killswitch = function() {
        return;
    };
    Equalizer.prototype._reflow = function() {
        var self = this;
        $("[" + this.attr + "]").each(function() {
            var $eqParent = $(this), adjustedHeights = [], $images = $eqParent.find("img");
            if ($images.length) {
                Foundation.onImagesLoaded($images, function() {
                    adjustedHeights = self.getHeights($eqParent);
                    self.applyHeight($eqParent, adjustedHeights);
                });
            } else {
                adjustedHeights = self.getHeights($eqParent);
                self.applyHeight($eqParent, adjustedHeights);
            }
        });
    };
    Equalizer.prototype.getHeights = function($eqParent) {
        var eqGroupName = $eqParent.data("equalizer"), eqGroup = eqGroupName ? $eqParent.find("[" + this.attr + '-watch="' + eqGroupName + '"]:visible') : $eqParent.find("[" + this.attr + "-watch]:visible"), heights;
        eqGroup.height("inherit");
        heights = eqGroup.map(function() {
            return $(this).outerHeight(false);
        }).get();
        return heights;
    };
    Equalizer.prototype.applyHeight = function($eqParent, heights) {
        var eqGroupName = $eqParent.data("equalizer"), eqGroup = eqGroupName ? $eqParent.find("[" + this.attr + '-watch="' + eqGroupName + '"]:visible') : $eqParent.find("[" + this.attr + "-watch]:visible"), max = Math.max.apply(null, heights);
        $eqParent.trigger("preEqualized.zf.Equalizer");
        for (var i = 0; i < eqGroup.length; i++) {
            $(eqGroup[i]).css("height", max);
        }
        $eqParent.trigger("postEqualized.zf.Equalizer");
    };
    Equalizer.prototype.destroy = function() {};
    Foundation.plugin(Equalizer, "Equalizer");
    if (typeof module !== "undefined" && typeof module.exports !== "undefined") module.exports = Equalizer;
    if (typeof define === "function") define([ "foundation" ], function() {
        return Equalizer;
    });
}(Foundation, jQuery);

!function(Foundation, $) {
    "use strict";
    function Interchange(element, options) {
        this.$element = element;
        this.options = $.extend({}, Interchange.defaults, options);
        this.rules = [];
        this.currentPath = "";
        this._init();
        this._events();
        Foundation.registerPlugin(this);
    }
    Interchange.defaults = {
        rules: null
    };
    Interchange.SPECIAL_QUERIES = {
        landscape: "screen and (orientation: landscape)",
        portrait: "screen and (orientation: portrait)",
        retina: "only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)"
    };
    Interchange.prototype._init = function() {
        this._addBreakpoints();
        this._generateRules();
        this._reflow();
    };
    Interchange.prototype._events = function() {
        $(window).on("resize.fndtn.interchange", Foundation.util.throttle(this._reflow.bind(this), 50));
    };
    Interchange.prototype._reflow = function() {
        var match;
        for (var i in this.rules) {
            var rule = this.rules[i];
            if (window.matchMedia(rule.query).matches) {
                match = rule;
            }
        }
        if (match) {
            this.replace(match.path);
        }
    };
    Interchange.prototype._addBreakpoints = function() {
        for (var i in Foundation.MediaQuery.queries) {
            var query = Foundation.MediaQuery.queries[i];
            Interchange.SPECIAL_QUERIES[query.name] = query.value;
        }
    };
    Interchange.prototype._generateRules = function() {
        var rulesList = [];
        var rules;
        if (this.options.rules) {
            rules = this.options.rules;
        } else {
            rules = this.$element.data("interchange").match(/\[.*?\]/g);
        }
        for (var i in rules) {
            var rule = rules[i].slice(1, -1).split(", ");
            var path = rule.slice(0, -1).join("");
            var query = rule[rule.length - 1];
            if (Interchange.SPECIAL_QUERIES[query]) {
                query = Interchange.SPECIAL_QUERIES[query];
            }
            rulesList.push({
                path: path,
                query: query
            });
        }
        this.rules = rulesList;
    };
    Interchange.prototype.replace = function(path) {
        if (this.currentPath === path) return;
        var _this = this;
        if (this.$element[0].nodeName === "IMG") {
            this.$element.attr("src", path).load(function() {
                _this.$element.trigger("replaced.zf.interchange");
                _this.currentPath = path;
            });
        } else if (path.match(/\.(gif|jpg|jpeg|tiff|png)([?#].*)?/i)) {
            this.$element.css({
                "background-image": "url(" + path + ")"
            });
        } else {
            $.get(path, function(response) {
                _this.$element.html(response);
                _this.$element.trigger("replaced.zf.interchange");
                _this.currentPath = path;
            });
        }
    };
    Interchange.prototype.destroy = function() {};
    Foundation.plugin(Interchange, "Interchange");
    if (typeof module !== "undefined" && typeof module.exports !== "undefined") module.exports = Interchange;
    if (typeof define === "function") define([ "foundation" ], function() {
        return Interchange;
    });
}(Foundation, jQuery);

!function(Foundation, $) {
    "use strict";
    function Magellan(element, options) {
        this.$element = element;
        this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
    }
    Magellan.defaults = {
        animationDuration: 500,
        animationEasing: "linear",
        threshold: 50,
        activeClass: "active",
        deepLinking: false,
        barOffset: 0
    };
    Magellan.prototype._init = function() {
        var id = this.$element[0].id || Foundation.GetYoDigits(6, "magellan"), _this = this;
        this.$targets = $("[data-magellan-target]");
        this.$links = this.$element.find("a");
        this.$element.attr({
            "data-resize": id,
            "data-scroll": id,
            id: id
        });
        this.$active = $();
        this.scrollPos = parseInt(window.pageYOffset, 10);
        this._events();
    };
    Magellan.prototype.calcPoints = function() {
        var _this = this, body = document.body, html = document.documentElement;
        this.points = [];
        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));
        this.$targets.each(function() {
            var $tar = $(this), pt = Math.round($tar.offset().top - _this.options.threshold);
            $tar.targetPoint = pt;
            _this.points.push(pt);
        });
    };
    Magellan.prototype._events = function() {
        var _this = this, $body = $("html, body"), opts = {
            duration: _this.options.animationDuration,
            easing: _this.options.animationEasing
        };
        $(window).one("load", function() {
            _this.calcPoints();
            _this._updateActive();
        });
        this.$element.on({
            "resizeme.zf.trigger": this.reflow.bind(this),
            "scrollme.zf.trigger": this._updateActive.bind(this)
        }).on("click.zf.magellan", 'a[href^="#"]', function(e) {
            e.preventDefault();
            var arrival = this.getAttribute("href"), scrollPos = $(arrival).offset().top - _this.options.threshold / 2 - _this.options.barOffset;
            $body.stop(true).animate({
                scrollTop: scrollPos
            }, opts);
        });
    };
    Magellan.prototype.reflow = function() {
        this.calcPoints();
        this._updateActive();
    };
    Magellan.prototype._updateActive = function() {
        var winPos = parseInt(window.pageYOffset, 10), curIdx;
        if (winPos + this.winHeight === this.docHeight) {
            curIdx = this.points.length - 1;
        } else if (winPos < this.points[0]) {
            curIdx = 0;
        } else {
            var isDown = this.scrollPos < winPos, _this = this, curVisible = this.points.filter(function(p, i) {
                return isDown ? p <= winPos : p - _this.options.threshold <= winPos;
            });
            curIdx = curVisible.length ? curVisible.length - 1 : 0;
        }
        this.$active.removeClass(this.options.activeClass);
        this.$active = this.$links.eq(curIdx).addClass(this.options.activeClass);
        if (this.options.deepLinking) {
            var hash = this.$active[0].getAttribute("href");
            if (window.history.pushState) {
                window.history.pushState(null, null, hash);
            } else {
                window.location.hash = hash;
            }
        }
        this.scrollPos = winPos;
        this.$element.trigger("update.zf.magellan", [ this.$active ]);
    };
    Magellan.prototype.destroy = function() {
        this.$element.off(".zf.trigger .zf.magellan").find("." + this.options.activeClass).removeClass(this.options.activeClass);
        if (this.options.deepLinking) {
            var hash = this.$active[0].getAttribute("href");
            window.location.hash.replace(hash, "");
        }
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Magellan, "Magellan");
    if (typeof module !== "undefined" && typeof module.exports !== "undefined") module.exports = Magellan;
    if (typeof define === "function") define([ "foundation" ], function() {
        return Magellan;
    });
}(Foundation, jQuery);

!function($, Foundation) {
    "use strict";
    function OffCanvas(element, options) {
        this.$element = element;
        this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
        this.$lastTrigger = $();
        this._init();
        this._events();
        Foundation.registerPlugin(this);
    }
    OffCanvas.defaults = {
        closeOnClick: true,
        transitionTime: 0,
        position: "left",
        forceTop: true,
        isRevealed: false,
        revealOn: null,
        autoFocus: true,
        revealClass: "reveal-for-"
    };
    OffCanvas.prototype._init = function() {
        var id = this.$element.attr("id");
        this.$element.attr("aria-hidden", "true");
        $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr("aria-expanded", "false").attr("aria-controls", id);
        if (this.options.closeOnClick) {
            if ($(".js-off-canvas-exit").length) {
                this.$exiter = $(".js-off-canvas-exit");
            } else {
                var exiter = document.createElement("div");
                exiter.setAttribute("class", "js-off-canvas-exit");
                $("[data-off-canvas-content]").append(exiter);
                this.$exiter = $(exiter);
            }
        }
        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, "g").test(this.$element[0].className);
        if (this.options.isRevealed) {
            this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split("-")[2];
            this._setMQChecker();
        }
        if (!this.options.transitionTime) {
            this.options.transitionTime = parseFloat(window.getComputedStyle($("[data-off-canvas-wrapper]")[0]).transitionDuration) * 1e3;
        }
    };
    OffCanvas.prototype._events = function() {
        this.$element.on({
            "open.zf.trigger": this.open.bind(this),
            "close.zf.trigger": this.close.bind(this),
            "toggle.zf.trigger": this.toggle.bind(this),
            "keydown.zf.offcanvas": this._handleKeyboard.bind(this)
        });
        if (this.$exiter.length) {
            var _this = this;
            this.$exiter.on({
                "click.zf.offcanvas": this.close.bind(this)
            });
        }
    };
    OffCanvas.prototype._setMQChecker = function() {
        var _this = this;
        $(window).on("changed.zf.mediaquery", function() {
            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
                _this.reveal(true);
            } else {
                _this.reveal(false);
            }
        }).one("load.zf.offcanvas", function() {
            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
                _this.reveal(true);
            }
        });
    };
    OffCanvas.prototype.reveal = function(isRevealed) {
        var $closer = this.$element.find("[data-close]");
        if (isRevealed) {
            if ($closer.length) {
                $closer.hide();
            }
        } else {
            if ($closer.length) {
                $closer.show();
            }
        }
    };
    OffCanvas.prototype.open = function(event, trigger) {
        if (this.$element.hasClass("is-open")) {
            return;
        }
        var _this = this, $body = $(document.body);
        $("body").scrollTop(0);
        Foundation.Move(this.options.transitionTime, this.$element, function() {
            $("[data-off-canvas-wrapper]").addClass("is-off-canvas-open is-open-" + _this.options.position);
            _this.$element.addClass("is-open").attr("aria-hidden", "false").trigger("opened.zf.offcanvas");
        });
        if (trigger) {
            this.$lastTrigger = trigger.attr("aria-expanded", "true");
        }
        if (this.options.autoFocus) {
            this.$element.one("finished.zf.animate", function() {
                _this.$element.find("a, button").eq(0).focus();
            });
        }
    };
    OffCanvas.prototype.close = function() {
        if (!this.$element.hasClass("is-open")) {
            return;
        }
        var _this = this;
        Foundation.Move(this.options.transitionTime, this.$element, function() {
            $("[data-off-canvas-wrapper]").removeClass("is-off-canvas-open is-open-" + _this.options.position);
            _this.$element.removeClass("is-open");
        });
        this.$element.attr("aria-hidden", "true").trigger("closed.zf.offcanvas");
        this.$lastTrigger.attr("aria-expanded", "false");
    };
    OffCanvas.prototype.toggle = function(event, trigger) {
        if (this.$element.hasClass("is-open")) {
            this.close(event, trigger);
        } else {
            this.open(event, trigger);
        }
    };
    OffCanvas.prototype._handleKeyboard = function(event) {
        if (event.which !== 27) return;
        event.stopPropagation();
        event.preventDefault();
        this.close();
        this.$lastTrigger.focus();
    };
    OffCanvas.prototype.destroy = function() {};
    Foundation.plugin(OffCanvas, "OffCanvas");
}(jQuery, Foundation);

!function($, Foundation) {
    "use strict";
    function Orbit(element, options) {
        this.$element = element;
        this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("Orbit", {
            ltr: {
                ARROW_RIGHT: "next",
                ARROW_LEFT: "previous"
            },
            rtl: {
                ARROW_LEFT: "next",
                ARROW_RIGHT: "previous"
            }
        });
    }
    Orbit.defaults = {
        bullets: true,
        navButtons: true,
        animInFromRight: "slide-in-right",
        animOutToRight: "slide-out-right",
        animInFromLeft: "slide-in-left",
        animOutToLeft: "slide-out-left",
        autoPlay: true,
        timerDelay: 5e3,
        infiniteWrap: true,
        swipe: true,
        pauseOnHover: true,
        accessible: true,
        containerClass: "orbit-container",
        slideClass: "orbit-slide",
        boxOfBullets: "orbit-bullets",
        nextClass: "orbit-next",
        prevClass: "orbit-previous",
        useMUI: true
    };
    Orbit.prototype._init = function() {
        this.$wrapper = this.$element.find("." + this.options.containerClass);
        this.$slides = this.$element.find("." + this.options.slideClass);
        var $images = this.$element.find("img"), initActive = this.$slides.filter(".is-active");
        if (!initActive.length) {
            this.$slides.eq(0).addClass("is-active");
        }
        if (!this.options.useMUI) {
            this.$slides.addClass("no-motionui");
        }
        if ($images.length) {
            Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));
        } else {
            this._prepareForOrbit();
        }
        if (this.options.bullets) {
            this._loadBullets();
        }
        this._events();
        if (this.options.autoPlay) {
            this.geoSync();
        }
        if (this.options.accessible) {
            this.$wrapper.attr("tabindex", 0);
        }
    };
    Orbit.prototype._loadBullets = function() {
        this.$bullets = this.$element.find("." + this.options.boxOfBullets).find("button");
    };
    Orbit.prototype.geoSync = function() {
        var _this = this;
        this.timer = new Foundation.Timer(this.$element, {
            duration: this.options.timerDelay,
            infinite: false
        }, function() {
            _this.changeSlide(true);
        });
        this.timer.start();
    };
    Orbit.prototype._prepareForOrbit = function() {
        var _this = this;
        this._setWrapperHeight(function(max) {
            _this._setSlideHeight(max);
        });
    };
    Orbit.prototype._setWrapperHeight = function(cb) {
        var max = 0, temp, counter = 0;
        this.$slides.each(function() {
            temp = this.getBoundingClientRect().height;
            $(this).attr("data-slide", counter);
            if (counter) {
                $(this).css({
                    position: "relative",
                    display: "none"
                });
            }
            max = temp > max ? temp : max;
            counter++;
        });
        if (counter === this.$slides.length) {
            this.$wrapper.css({
                height: max
            });
            cb(max);
        }
    };
    Orbit.prototype._setSlideHeight = function(height) {
        this.$slides.each(function() {
            $(this).css("max-height", height);
        });
    };
    Orbit.prototype._events = function() {
        var _this = this;
        if (this.options.swipe) {
            this.$slides.off("swipeleft.zf.orbit swiperight.zf.orbit").on("swipeleft.zf.orbit", function(e) {
                e.preventDefault();
                _this.changeSlide(true);
            }).on("swiperight.zf.orbit", function(e) {
                e.preventDefault();
                _this.changeSlide(false);
            });
        }
        if (this.options.autoPlay) {
            this.$slides.on("click.zf.orbit", function() {
                _this.$element.data("clickedOn", _this.$element.data("clickedOn") ? false : true);
                _this.timer[_this.$element.data("clickedOn") ? "pause" : "start"]();
            });
            if (this.options.pauseOnHover) {
                this.$element.on("mouseenter.zf.orbit", function() {
                    _this.timer.pause();
                }).on("mouseleave.zf.orbit", function() {
                    if (!_this.$element.data("clickedOn")) {
                        _this.timer.start();
                    }
                });
            }
        }
        if (this.options.navButtons) {
            var $controls = this.$element.find("." + this.options.nextClass + ", ." + this.options.prevClass);
            $controls.attr("tabindex", 0).on("click.zf.orbit touchend.zf.orbit", function() {
                _this.changeSlide($(this).hasClass(_this.options.nextClass));
            });
        }
        if (this.options.bullets) {
            this.$bullets.on("click.zf.orbit touchend.zf.orbit", function() {
                if (/is-active/g.test(this.className)) {
                    return false;
                }
                var idx = $(this).data("slide"), ltr = idx > _this.$slides.filter(".is-active").data("slide"), $slide = _this.$slides.eq(idx);
                _this.changeSlide(ltr, $slide, idx);
            });
        }
        this.$wrapper.add(this.$bullets).on("keydown.zf.orbit", function(e) {
            Foundation.Keyboard.handleKey(e, _this, {
                next: function() {
                    _this.changeSlide(true);
                },
                previous: function() {
                    _this.changeSlide(false);
                },
                handled: function() {
                    if ($(e.target).is(_this.$bullets)) {
                        _this.$bullets.filter(".is-active").focus();
                    }
                }
            });
        });
    };
    Orbit.prototype.changeSlide = function(isLTR, chosenSlide, idx) {
        var $curSlide = this.$slides.filter(".is-active").eq(0);
        if (/mui/g.test($curSlide[0].className)) {
            return false;
        }
        var $firstSlide = this.$slides.first(), $lastSlide = this.$slides.last(), dirIn = isLTR ? "Right" : "Left", dirOut = isLTR ? "Left" : "Right", _this = this, $newSlide;
        if (!chosenSlide) {
            $newSlide = isLTR ? this.options.infiniteWrap ? $curSlide.next("." + this.options.slideClass).length ? $curSlide.next("." + this.options.slideClass) : $firstSlide : $curSlide.next("." + this.options.slideClass) : this.options.infiniteWrap ? $curSlide.prev("." + this.options.slideClass).length ? $curSlide.prev("." + this.options.slideClass) : $lastSlide : $curSlide.prev("." + this.options.slideClass);
        } else {
            $newSlide = chosenSlide;
        }
        if ($newSlide.length) {
            if (this.options.bullets) {
                idx = idx || this.$slides.index($newSlide);
                this._updateBullets(idx);
            }
            if (this.options.useMUI) {
                Foundation.Motion.animateIn($newSlide.addClass("is-active").css({
                    position: "absolute",
                    top: 0
                }), this.options["animInFrom" + dirIn], function() {
                    $newSlide.css({
                        position: "relative",
                        display: "block"
                    }).attr("aria-live", "polite");
                });
                Foundation.Motion.animateOut($curSlide.removeClass("is-active"), this.options["animOutTo" + dirOut], function() {
                    $curSlide.removeAttr("aria-live");
                    if (_this.options.autoPlay) {
                        _this.timer.restart();
                    }
                });
            } else {
                $curSlide.removeClass("is-active is-in").removeAttr("aria-live").hide();
                $newSlide.addClass("is-active is-in").attr("aria-live", "polite").show();
                if (this.options.autoPlay) {
                    this.timer.restart();
                }
            }
            this.$element.trigger("slidechange.zf.orbit", [ $newSlide ]);
        }
    };
    Orbit.prototype._updateBullets = function(idx) {
        var $oldBullet = this.$element.find("." + this.options.boxOfBullets).find(".is-active").removeClass("is-active").blur(), span = $oldBullet.find("span:last").detach(), $newBullet = this.$bullets.eq(idx).addClass("is-active").append(span);
    };
    Orbit.prototype.destroy = function() {
        delete this.timer;
        this.$element.off(".zf.orbit").find("*").off(".zf.orbit").end().hide();
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Orbit, "Orbit");
}(jQuery, window.Foundation);

!function(Foundation, $) {
    "use strict";
    var MenuPlugins = {
        dropdown: {
            cssClass: "dropdown",
            plugin: Foundation._plugins["dropdown-menu"] || null
        },
        drilldown: {
            cssClass: "drilldown",
            plugin: Foundation._plugins["drilldown"] || null
        },
        accordion: {
            cssClass: "accordion-menu",
            plugin: Foundation._plugins["accordion-menu"] || null
        }
    };
    var phMedia = {
        small: "(min-width: 0px)",
        medium: "(min-width: 640px)"
    };
    function ResponsiveMenu(element) {
        this.$element = $(element);
        this.rules = this.$element.data("responsive-menu");
        this.currentMq = null;
        this.currentPlugin = null;
        this._init();
        this._events();
        Foundation.registerPlugin(this);
    }
    ResponsiveMenu.defaults = {};
    ResponsiveMenu.prototype._init = function() {
        var rulesTree = {};
        var rules = this.rules.split(" ");
        for (var i = 0; i < rules.length; i++) {
            var rule = rules[i].split("-");
            var ruleSize = rule.length > 1 ? rule[0] : "small";
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];
            if (MenuPlugins[rulePlugin] !== null) {
                rulesTree[ruleSize] = MenuPlugins[rulePlugin];
            }
        }
        this.rules = rulesTree;
        if (!$.isEmptyObject(rulesTree)) {
            this._checkMediaQueries();
        }
    };
    ResponsiveMenu.prototype._events = function() {
        var _this = this;
        $(window).on("changed.zf.mediaquery", function() {
            _this._checkMediaQueries();
        });
    };
    ResponsiveMenu.prototype._checkMediaQueries = function() {
        var matchedMq, _this = this;
        $.each(this.rules, function(key) {
            if (Foundation.MediaQuery.atLeast(key)) {
                matchedMq = key;
            }
        });
        if (!matchedMq) return;
        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;
        $.each(MenuPlugins, function(key, value) {
            _this.$element.removeClass(value.cssClass);
        });
        this.$element.addClass(this.rules[matchedMq].cssClass);
        if (this.currentPlugin) this.currentPlugin.destroy();
        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
    };
    ResponsiveMenu.prototype.destroy = function() {
        this.currentPlugin.destroy();
        $(window).off(".zf.ResponsiveMenu");
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(ResponsiveMenu, "ResponsiveMenu");
}(Foundation, jQuery);

!function($, Foundation) {
    "use strict";
    function ResponsiveToggle(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);
        this._init();
        this._events();
        Foundation.registerPlugin(this);
    }
    ResponsiveToggle.defaults = {
        hideFor: "medium"
    };
    ResponsiveToggle.prototype._init = function() {
        var targetID = this.$element.data("responsive-toggle");
        if (!targetID) {
            console.error("Your tab bar needs an ID of a Menu as the value of data-tab-bar.");
        }
        this.$targetMenu = $("#" + targetID);
        this.$toggler = this.$element.find("[data-toggle]");
        this._update();
    };
    ResponsiveToggle.prototype._events = function() {
        var _this = this;
        $(window).on("changed.zf.mediaquery", this._update.bind(this));
        this.$toggler.on("click.zf.responsiveToggle", this.toggleMenu.bind(this));
    };
    ResponsiveToggle.prototype._update = function() {
        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
            this.$element.show();
            this.$targetMenu.hide();
        } else {
            this.$element.hide();
            this.$targetMenu.show();
        }
    };
    ResponsiveToggle.prototype.toggleMenu = function() {
        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
            this.$targetMenu.toggle(0);
            this.$element.trigger("toggled.zf.responsiveToggle");
        }
    };
    ResponsiveToggle.prototype.destroy = function() {};
    Foundation.plugin(ResponsiveToggle, "ResponsiveToggle");
}(jQuery, Foundation);

!function(Foundation, $) {
    "use strict";
    function Reveal(element, options) {
        this.$element = element;
        this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("Reveal", {
            ENTER: "open",
            SPACE: "open",
            ESCAPE: "close",
            TAB: "tab_forward",
            SHIFT_TAB: "tab_backward"
        });
    }
    Reveal.defaults = {
        animationIn: "",
        animationOut: "",
        showDelay: 0,
        hideDelay: 0,
        closeOnClick: true,
        closeOnEsc: true,
        multipleOpened: false,
        vOffset: 100,
        hOffset: 0,
        fullScreen: false,
        btmOffsetPct: 10,
        overlay: true,
        resetOnClose: false
    };
    Reveal.prototype._init = function() {
        this.id = this.$element.attr("id");
        this.isActive = false;
        this.$anchor = $('[data-open="' + this.id + '"]').length ? $('[data-open="' + this.id + '"]') : $('[data-toggle="' + this.id + '"]');
        if (this.$anchor.length) {
            var anchorId = this.$anchor[0].id || Foundation.GetYoDigits(6, "reveal");
            this.$anchor.attr({
                "aria-controls": this.id,
                id: anchorId,
                "aria-haspopup": true,
                tabindex: 0
            });
            this.$element.attr({
                "aria-labelledby": anchorId
            });
        }
        if (this.options.fullScreen || this.$element.hasClass("full")) {
            this.options.fullScreen = true;
            this.options.overlay = false;
        }
        if (this.options.overlay && !this.$overlay) {
            this.$overlay = this._makeOverlay(this.id);
        }
        this.$element.attr({
            role: "dialog",
            "aria-hidden": true,
            "data-yeti-box": this.id,
            "data-resize": this.id
        });
        this._events();
    };
    Reveal.prototype._makeOverlay = function(id) {
        var $overlay = $("<div></div>").addClass("reveal-overlay").attr({
            tabindex: -1,
            "aria-hidden": true
        }).appendTo("body");
        if (this.options.closeOnClick) {
            $overlay.attr({
                "data-close": id
            });
        }
        return $overlay;
    };
    Reveal.prototype._events = function() {
        var _this = this;
        this.$element.on({
            "open.zf.trigger": this.open.bind(this),
            "close.zf.trigger": this.close.bind(this),
            "toggle.zf.trigger": this.toggle.bind(this),
            "resizeme.zf.trigger": function() {
                if (_this.$element.is(":visible")) {
                    _this._setPosition(function() {});
                }
            }
        });
        if (this.$anchor.length) {
            this.$anchor.on("keydown.zf.reveal", function(e) {
                if (e.which === 13 || e.which === 32) {
                    e.stopPropagation();
                    e.preventDefault();
                    _this.open();
                }
            });
        }
        if (this.options.closeOnClick && this.options.overlay) {
            this.$overlay.off(".zf.reveal").on("click.zf.reveal", this.close.bind(this));
        }
    };
    Reveal.prototype._setPosition = function(cb) {
        var eleDims = Foundation.Box.GetDimensions(this.$element);
        var elePos = this.options.fullScreen ? "reveal full" : eleDims.height >= .5 * eleDims.windowDims.height ? "reveal" : "center";
        if (elePos === "reveal full") {
            this.$element.offset(Foundation.Box.GetOffsets(this.$element, null, elePos, this.options.vOffset)).css({
                height: eleDims.windowDims.height,
                width: eleDims.windowDims.width
            });
        } else if (!Foundation.MediaQuery.atLeast("medium") || !Foundation.Box.ImNotTouchingYou(this.$element, null, true, false)) {
            this.$element.css({
                width: eleDims.windowDims.width - this.options.hOffset * 2
            }).offset(Foundation.Box.GetOffsets(this.$element, null, "center", this.options.vOffset, this.options.hOffset));
            this.changedSize = true;
        } else {
            this.$element.css({
                "max-height": eleDims.windowDims.height - this.options.vOffset * (this.options.btmOffsetPct / 100 + 1),
                width: ""
            }).offset(Foundation.Box.GetOffsets(this.$element, null, elePos, this.options.vOffset));
        }
        cb();
    };
    Reveal.prototype.open = function() {
        var _this = this;
        this.isActive = true;
        this.$element.css({
            visibility: "hidden"
        }).show().scrollTop(0);
        this._setPosition(function() {
            _this.$element.hide().css({
                visibility: ""
            });
            if (!_this.options.multipleOpened) {
                _this.$element.trigger("closeme.zf.reveal", _this.id);
            }
            if (_this.options.animationIn) {
                if (_this.options.overlay) {
                    Foundation.Motion.animateIn(_this.$overlay, "fade-in", function() {
                        Foundation.Motion.animateIn(_this.$element, _this.options.animationIn, function() {
                            _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
                        });
                    });
                } else {
                    Foundation.Motion.animateIn(_this.$element, _this.options.animationIn, function() {
                        _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
                    });
                }
            } else {
                if (_this.options.overlay) {
                    _this.$overlay.show(0, function() {
                        _this.$element.show(_this.options.showDelay, function() {});
                    });
                } else {
                    _this.$element.show(_this.options.showDelay, function() {});
                }
            }
        });
        this.$element.attr({
            "aria-hidden": false
        }).attr("tabindex", -1).focus().trigger("open.zf.reveal");
        $("body").addClass("is-reveal-open").attr({
            "aria-hidden": this.options.overlay || this.options.fullScreen ? true : false
        });
        setTimeout(function() {
            _this._extraHandlers();
        }, 0);
    };
    Reveal.prototype._extraHandlers = function() {
        var _this = this;
        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);
        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
            $("body").on("click.zf.reveal", function(e) {
                _this.close();
            });
        }
        if (this.options.closeOnEsc) {
            $(window).on("keydown.zf.reveal", function(e) {
                Foundation.Keyboard.handleKey(e, _this, {
                    close: function() {
                        if (this.options.closeOnEsc) {
                            this.close();
                            this.$anchor.focus();
                        }
                    }
                });
                if (_this.focusableElements.length === 0) {
                    e.preventDefault();
                }
            });
        }
        this.$element.on("keydown.zf.reveal", function(e) {
            var $target = $(this);
            Foundation.Keyboard.handleKey(e, _this, {
                tab_forward: function() {
                    if (this.$element.find(":focus").is(_this.focusableElements.eq(-1))) {
                        _this.focusableElements.eq(0).focus();
                        e.preventDefault();
                    }
                },
                tab_backward: function() {
                    if (this.$element.find(":focus").is(_this.focusableElements.eq(0)) || this.$element.is(":focus")) {
                        _this.focusableElements.eq(-1).focus();
                        e.preventDefault();
                    }
                },
                open: function() {
                    if (_this.$element.find(":focus").is(_this.$element.find("[data-close]"))) {
                        setTimeout(function() {
                            _this.$anchor.focus();
                        }, 1);
                    } else if ($target.is(_this.focusableElements)) {
                        this.open();
                    }
                },
                close: function() {
                    if (this.options.closeOnEsc) {
                        this.close();
                        this.$anchor.focus();
                    }
                }
            });
        });
    };
    Reveal.prototype.close = function() {
        if (!this.isActive || !this.$element.is(":visible")) {
            return false;
        }
        var _this = this;
        if (this.options.animationOut) {
            Foundation.Motion.animateOut(this.$element, this.options.animationOut, function() {
                if (_this.options.overlay) {
                    Foundation.Motion.animateOut(_this.$overlay, "fade-out", function() {});
                }
            });
        } else {
            this.$element.hide(_this.options.hideDelay, function() {
                if (_this.options.overlay) {
                    _this.$overlay.hide(0, function() {});
                }
            });
        }
        if (this.options.closeOnEsc) {
            $(window).off("keydown.zf.reveal");
        }
        if (!this.options.overlay && this.options.closeOnClick) {
            $("body").off("click.zf.reveal");
        }
        this.$element.off("keydown.zf.reveal");
        if (this.changedSize) {
            this.$element.css({
                height: "",
                width: ""
            });
        }
        $("body").removeClass("is-reveal-open").attr({
            "aria-hidden": false,
            tabindex: ""
        });
        if (this.options.resetOnClose) {
            this.$element.html(this.$element.html());
        }
        this.isActive = false;
        this.$element.attr({
            "aria-hidden": true
        }).trigger("closed.zf.reveal");
    };
    Reveal.prototype.toggle = function() {
        if (this.isActive) {
            this.close();
        } else {
            this.open();
        }
    };
    Reveal.prototype.destroy = function() {
        if (this.options.overlay) {
            this.$overlay.hide().off().remove();
        }
        this.$element.hide();
        this.$anchor.off();
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Reveal, "Reveal");
    if (typeof module !== "undefined" && typeof module.exports !== "undefined") module.exports = Reveal;
    if (typeof define === "function") define([ "foundation" ], function() {
        return Reveal;
    });
}(Foundation, jQuery);

!function($, Foundation) {
    "use strict";
    function Slider(element, options) {
        this.$element = element;
        this.options = $.extend({}, Slider.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("Slider", {
            ltr: {
                ARROW_RIGHT: "increase",
                ARROW_UP: "increase",
                ARROW_DOWN: "decrease",
                ARROW_LEFT: "decrease",
                SHIFT_ARROW_RIGHT: "increase_fast",
                SHIFT_ARROW_UP: "increase_fast",
                SHIFT_ARROW_DOWN: "decrease_fast",
                SHIFT_ARROW_LEFT: "decrease_fast"
            },
            rtl: {
                ARROW_LEFT: "increase",
                ARROW_RIGHT: "decrease",
                SHIFT_ARROW_LEFT: "increase_fast",
                SHIFT_ARROW_RIGHT: "decrease_fast"
            }
        });
    }
    Slider.defaults = {
        start: 0,
        end: 100,
        step: 1,
        initialStart: 0,
        initialEnd: 100,
        binding: false,
        clickSelect: true,
        vertical: false,
        draggable: true,
        disabled: false,
        doubleSided: false,
        decimal: 2,
        moveTime: 200,
        disabledClass: "disabled"
    };
    Slider.prototype._init = function() {
        this.inputs = this.$element.find("input");
        this.handles = this.$element.find("[data-slider-handle]");
        this.$handle = this.handles.eq(0);
        this.$input = this.inputs.length ? this.inputs.eq(0) : $("#" + this.$handle.attr("aria-controls"));
        this.$fill = this.$element.find("[data-slider-fill]").css(this.options.vertical ? "height" : "width", 0);
        var isDbl = false, _this = this;
        if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
            this.options.disabled = true;
            this.$element.addClass(this.options.disabledClass);
        }
        if (!this.inputs.length) {
            this.inputs = $().add(this.$input);
            this.options.binding = true;
        }
        this._setInitAttr(0);
        this._events(this.$handle);
        if (this.handles[1]) {
            this.options.doubleSided = true;
            this.$handle2 = this.handles.eq(1);
            this.$input2 = this.inputs.length ? this.inputs.eq(1) : $("#" + this.$handle2.attr("aria-controls"));
            if (!this.inputs[1]) {
                this.inputs = this.inputs.add(this.$input2);
            }
            isDbl = true;
            this._setHandlePos(this.$handle, this.options.initialStart, true, function() {
                _this._setHandlePos(_this.$handle2, _this.options.initialEnd);
            });
            this._setInitAttr(1);
            this._events(this.$handle2);
        }
        if (!isDbl) {
            this._setHandlePos(this.$handle, this.options.initialStart, true);
        }
    };
    Slider.prototype._setHandlePos = function($hndl, location, noInvert, cb) {
        location = parseFloat(location);
        if (location < this.options.start) {
            location = this.options.start;
        } else if (location > this.options.end) {
            location = this.options.end;
        }
        var isDbl = this.options.doubleSided, callback = cb || null;
        if (isDbl) {
            if (this.handles.index($hndl) === 0) {
                var h2Val = parseFloat(this.$handle2.attr("aria-valuenow"));
                location = location >= h2Val ? h2Val - this.options.step : location;
            } else {
                var h1Val = parseFloat(this.$handle.attr("aria-valuenow"));
                location = location <= h1Val ? h1Val + this.options.step : location;
            }
        }
        if (this.options.vertical && !noInvert) {
            location = this.options.end - location;
        }
        var _this = this, vert = this.options.vertical, hOrW = vert ? "height" : "width", lOrT = vert ? "top" : "left", halfOfHandle = $hndl[0].getBoundingClientRect()[hOrW] / 2, elemDim = this.$element[0].getBoundingClientRect()[hOrW], pctOfBar = percent(location, this.options.end).toFixed(2), pxToMove = (elemDim - halfOfHandle) * pctOfBar, movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal), location = location > 0 ? parseFloat(location.toFixed(this.options.decimal)) : 0, anim, prog, start = null, css = {};
        this._setValues($hndl, location);
        if (this.options.doubleSided) {
            var isLeftHndl = this.handles.index($hndl) === 0, dim, idx = this.handles.index($hndl);
            if (isLeftHndl) {
                css[lOrT] = (pctOfBar > 0 ? pctOfBar * 100 : 0) + "%";
                dim = ((percent(this.$handle2.position()[lOrT] + halfOfHandle, elemDim) - parseFloat(pctOfBar)) * 100).toFixed(this.options.decimal) + "%";
                css["min-" + hOrW] = dim;
                if (cb && typeof cb === "function") {
                    cb();
                }
            } else {
                var handleLeft = parseFloat(this.$handle[0].style.left);
                location = (location < 100 ? location : 100) - (!isNaN(handleLeft) ? handleLeft : this.options.end - location);
                css["min-" + hOrW] = location + "%";
            }
        }
        this.$element.one("finished.zf.animate", function() {
            _this.animComplete = true;
            _this.$element.trigger("moved.zf.slider", [ $hndl ]);
        });
        var moveTime = _this.$element.data("dragging") ? 1e3 / 60 : _this.options.moveTime;
        Foundation.Move(moveTime, $hndl, function() {
            $hndl.css(lOrT, movement + "%");
            if (!_this.options.doubleSided) {
                _this.$fill.css(hOrW, pctOfBar * 100 + "%");
            } else {
                _this.$fill.css(css);
            }
        });
    };
    Slider.prototype._setInitAttr = function(idx) {
        var id = this.inputs.eq(idx).attr("id") || Foundation.GetYoDigits(6, "slider");
        this.inputs.eq(idx).attr({
            id: id,
            max: this.options.end,
            min: this.options.start
        });
        this.handles.eq(idx).attr({
            role: "slider",
            "aria-controls": id,
            "aria-valuemax": this.options.end,
            "aria-valuemin": this.options.start,
            "aria-valuenow": idx === 0 ? this.options.initialStart : this.options.initialEnd,
            "aria-orientation": this.options.vertical ? "vertical" : "horizontal",
            tabindex: 0
        });
    };
    Slider.prototype._setValues = function($handle, val) {
        var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
        this.inputs.eq(idx).val(val);
        $handle.attr("aria-valuenow", val);
    };
    Slider.prototype._handleEvent = function(e, $handle, val) {
        var value, hasVal;
        if (!val) {
            e.preventDefault();
            var _this = this, vertical = this.options.vertical, param = vertical ? "height" : "width", direction = vertical ? "top" : "left", pageXY = vertical ? e.pageY : e.pageX, halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2, barDim = this.$element[0].getBoundingClientRect()[param], barOffset = this.$element.offset()[direction] - pageXY, barXY = barOffset > 0 ? -halfOfHandle : barOffset - halfOfHandle < -barDim ? barDim : Math.abs(barOffset), offsetPct = percent(barXY, barDim);
            value = (this.options.end - this.options.start) * offsetPct;
            hasVal = false;
            if (!$handle) {
                var firstHndlPos = absPosition(this.$handle, direction, barXY, param), secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
                $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
            }
        } else {
            value = val;
            hasVal = true;
        }
        this._setHandlePos($handle, value, hasVal);
    };
    Slider.prototype._events = function($handle) {
        if (this.options.disabled) {
            return false;
        }
        var _this = this, curHandle, timer;
        this.inputs.off("change.zf.slider").on("change.zf.slider", function(e) {
            var idx = _this.inputs.index($(this));
            _this._handleEvent(e, _this.handles.eq(idx), $(this).val());
        });
        if (this.options.clickSelect) {
            this.$element.off("click.zf.slider").on("click.zf.slider", function(e) {
                if (_this.$element.data("dragging")) {
                    return false;
                }
                _this.animComplete = false;
                if (_this.options.doubleSided) {
                    _this._handleEvent(e);
                } else {
                    _this._handleEvent(e, _this.$handle);
                }
            });
        }
        if (this.options.draggable) {
            this.handles.addTouch();
            var $body = $("body");
            $handle.off("mousedown.zf.slider").on("mousedown.zf.slider", function(e) {
                $handle.addClass("is-dragging");
                _this.$fill.addClass("is-dragging");
                _this.$element.data("dragging", true);
                _this.animComplete = false;
                curHandle = $(e.currentTarget);
                $body.on("mousemove.zf.slider", function(e) {
                    e.preventDefault();
                    _this._handleEvent(e, curHandle);
                }).on("mouseup.zf.slider", function(e) {
                    _this.animComplete = true;
                    _this._handleEvent(e, curHandle);
                    $handle.removeClass("is-dragging");
                    _this.$fill.removeClass("is-dragging");
                    _this.$element.data("dragging", false);
                    $body.off("mousemove.zf.slider mouseup.zf.slider");
                });
            });
        }
        $handle.off("keydown.zf.slider").on("keydown.zf.slider", function(e) {
            var idx = _this.options.doubleSided ? _this.handles.index($(this)) : 0, oldValue = parseFloat(_this.inputs.eq(idx).val()), newValue;
            var _$handle = $(this);
            Foundation.Keyboard.handleKey(e, _this, {
                decrease: function() {
                    newValue = oldValue - _this.options.step;
                },
                increase: function() {
                    newValue = oldValue + _this.options.step;
                },
                decrease_fast: function() {
                    newValue = oldValue - _this.options.step * 10;
                },
                increase_fast: function() {
                    newValue = oldValue + _this.options.step * 10;
                },
                handled: function() {
                    e.preventDefault();
                    _this._setHandlePos(_$handle, newValue, true);
                }
            });
        });
    };
    Slider.prototype.destroy = function() {
        this.handles.off(".zf.slider");
        this.inputs.off(".zf.slider");
        this.$element.off(".zf.slider");
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Slider, "Slider");
    function percent(frac, num) {
        return frac / num;
    }
    function absPosition($handle, dir, clickPos, param) {
        return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
    }
}(jQuery, window.Foundation);

!function($, Foundation) {
    "use strict";
    function Sticky(element, options) {
        this.$element = element;
        this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
    }
    Sticky.defaults = {
        container: "<div data-sticky-container></div>",
        stickTo: "top",
        anchor: "",
        topAnchor: "",
        btmAnchor: "",
        marginTop: 1,
        marginBottom: 1,
        stickyOn: "medium",
        stickyClass: "sticky",
        containerClass: "sticky-container",
        checkEvery: -1
    };
    Sticky.prototype._init = function() {
        var $parent = this.$element.parent("[data-sticky-container]"), id = this.$element[0].id || Foundation.GetYoDigits(6, "sticky"), _this = this;
        if (!$parent.length) {
            this.wasWrapped = true;
        }
        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
        this.$container.addClass(this.options.containerClass);
        this.$element.addClass(this.options.stickyClass).attr({
            "data-resize": id
        });
        this.scrollCount = this.options.checkEvery;
        this.isStuck = false;
        if (this.options.topAnchor !== "") {
            this._parsePoints();
        } else {
            this.$anchor = this.options.anchor ? $("#" + this.options.anchor) : $(document.body);
        }
        this._setSizes(function() {
            _this._calc(false);
        });
        this._events(id.split("-").reverse().join("-"));
    };
    Sticky.prototype._parsePoints = function() {
        var top = this.options.topAnchor, btm = this.options.btmAnchor, pts = [ top, btm ], breaks = {};
        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
            var pt;
            if (typeof pts[i] === "number") {
                pt = pts[i];
            } else {
                var place = pts[i].split(":"), anchor = $("#" + place[0]);
                pt = anchor.offset().top;
                if (place[1] && place[1].toLowerCase() === "bottom") {
                    pt += anchor[0].getBoundingClientRect().height;
                }
            }
            breaks[i] = pt;
        }
        this.points = breaks;
        return;
    };
    Sticky.prototype._events = function(id) {
        var _this = this, scrollListener = "scroll.zf." + id;
        if (this.isOn) {
            return;
        }
        if (this.canStick) {
            this.isOn = true;
            $(window).off(scrollListener).on(scrollListener, function(e) {
                if (_this.scrollCount === 0) {
                    _this.scrollCount = _this.options.checkEvery;
                    _this._setSizes(function() {
                        _this._calc(false, window.pageYOffset);
                    });
                } else {
                    _this.scrollCount--;
                    _this._calc(false, window.pageYOffset);
                }
            });
        }
        this.$element.off("resizeme.zf.trigger").on("resizeme.zf.trigger", function(e, el) {
            _this._setSizes(function() {
                _this._calc(false);
                if (_this.canStick) {
                    if (!_this.isOn) {
                        _this._events(id);
                    }
                } else if (_this.isOn) {
                    _this._pauseListeners(scrollListener);
                }
            });
        });
    };
    Sticky.prototype._pauseListeners = function(scrollListener) {
        this.isOn = false;
        $(window).off(scrollListener);
        this.$element.trigger("pause.zf.sticky");
    };
    Sticky.prototype._calc = function(checkSizes, scroll) {
        if (checkSizes) {
            this._setSizes();
        }
        if (!this.canStick) {
            if (this.isStuck) {
                this._removeSticky(true);
            }
            return false;
        }
        if (!scroll) {
            scroll = window.pageYOffset;
        }
        if (scroll >= this.topPoint) {
            if (scroll <= this.bottomPoint) {
                if (!this.isStuck) {
                    this._setSticky();
                }
            } else {
                if (this.isStuck) {
                    this._removeSticky(false);
                }
            }
        } else {
            if (this.isStuck) {
                this._removeSticky(true);
            }
        }
    };
    Sticky.prototype._setSticky = function() {
        var stickTo = this.options.stickTo, mrgn = stickTo === "top" ? "marginTop" : "marginBottom", notStuckTo = stickTo === "top" ? "bottom" : "top", css = {};
        css[mrgn] = this.options[mrgn] + "em";
        css[stickTo] = 0;
        css[notStuckTo] = "auto";
        css["left"] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
        this.isStuck = true;
        this.$element.removeClass("is-anchored is-at-" + notStuckTo).addClass("is-stuck is-at-" + stickTo).css(css).trigger("sticky.zf.stuckto:" + stickTo);
    };
    Sticky.prototype._removeSticky = function(isTop) {
        var stickTo = this.options.stickTo, stickToTop = stickTo === "top", css = {}, anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight, mrgn = stickToTop ? "marginTop" : "marginBottom", notStuckTo = stickToTop ? "bottom" : "top", topOrBottom = isTop ? "top" : "bottom";
        css[mrgn] = 0;
        if (isTop && !stickToTop || stickToTop && !isTop) {
            css[stickTo] = anchorPt;
            css[notStuckTo] = 0;
        } else {
            css[stickTo] = 0;
            css[notStuckTo] = anchorPt;
        }
        css["left"] = "";
        this.isStuck = false;
        this.$element.removeClass("is-stuck is-at-" + stickTo).addClass("is-anchored is-at-" + topOrBottom).css(css).trigger("sticky.zf.unstuckfrom:" + topOrBottom);
    };
    Sticky.prototype._setSizes = function(cb) {
        this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);
        if (!this.canStick) {
            cb();
        }
        var _this = this, newElemWidth = this.$container[0].getBoundingClientRect().width, comp = window.getComputedStyle(this.$container[0]), pdng = parseInt(comp["padding-right"], 10);
        if (this.$anchor && this.$anchor.length) {
            this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
        } else {
            this._parsePoints();
        }
        this.$element.css({
            "max-width": newElemWidth - pdng + "px"
        });
        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
        this.containerHeight = newContainerHeight;
        this.$container.css({
            height: newContainerHeight
        });
        this.elemHeight = newContainerHeight;
        if (this.isStuck) {
            this.$element.css({
                left: this.$container.offset().left + parseInt(comp["padding-left"], 10)
            });
        }
        this._setBreakPoints(newContainerHeight, function() {
            if (cb) {
                cb();
            }
        });
    };
    Sticky.prototype._setBreakPoints = function(elemHeight, cb) {
        if (!this.canStick) {
            if (cb) {
                cb();
            } else {
                return false;
            }
        }
        var mTop = emCalc(this.options.marginTop), mBtm = emCalc(this.options.marginBottom), topPoint = this.points ? this.points[0] : this.$anchor.offset().top, bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight, winHeight = window.innerHeight;
        if (this.options.stickTo === "top") {
            topPoint -= mTop;
            bottomPoint -= elemHeight + mTop;
        } else if (this.options.stickTo === "bottom") {
            topPoint -= winHeight - (elemHeight + mBtm);
            bottomPoint -= winHeight - mBtm;
        } else {}
        this.topPoint = topPoint;
        this.bottomPoint = bottomPoint;
        if (cb) {
            cb();
        }
    };
    Sticky.prototype.destroy = function() {
        this._removeSticky(true);
        this.$element.removeClass(this.options.stickyClass + " is-anchored is-at-top").css({
            height: "",
            top: "",
            bottom: "",
            "max-width": ""
        }).off("resizeme.zf.trigger");
        this.$anchor.off("change.zf.sticky");
        $(window).off("scroll.zf.sticky");
        if (this.wasWrapped) {
            this.$element.unwrap();
        } else {
            this.$container.removeClass(this.options.containerClass).css({
                height: ""
            });
        }
        Foundation.unregisterPlugin(this);
    };
    function emCalc(em) {
        return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
    }
    Foundation.plugin(Sticky, "Sticky");
}(jQuery, window.Foundation);

!function($, Foundation) {
    "use strict";
    function Tabs(element, options) {
        this.$element = element;
        this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);
        this._init();
        Foundation.registerPlugin(this);
        Foundation.Keyboard.register("Tabs", {
            ENTER: "open",
            SPACE: "open",
            ARROW_RIGHT: "next",
            ARROW_UP: "previous",
            ARROW_DOWN: "next",
            ARROW_LEFT: "previous"
        });
    }
    Tabs.defaults = {
        autoFocus: false,
        wrapOnKeys: true,
        matchHeight: false,
        linkClass: "tabs-title",
        panelClass: "tabs-panel"
    };
    Tabs.prototype._init = function() {
        var _this = this;
        this.$tabTitles = this.$element.find("." + this.options.linkClass);
        this.$tabContent = $('[data-tabs-content="' + this.$element[0].id + '"]');
        this.$tabTitles.each(function() {
            var $elem = $(this), $link = $elem.find("a"), isActive = $elem.hasClass("is-active"), hash = $link.attr("href").slice(1), linkId = hash + "-label", $tabContent = $(hash);
            $elem.attr({
                role: "presentation"
            });
            $link.attr({
                role: "tab",
                "aria-controls": hash,
                "aria-selected": isActive,
                id: linkId
            });
            $tabContent.attr({
                role: "tabpanel",
                "aria-hidden": !isActive,
                "aria-labelledby": linkId
            });
            if (isActive && _this.options.autoFocus) {
                $link.focus();
            }
        });
        if (this.options.matchHeight) {
            var $images = this.$tabContent.find("img");
            if ($images.length) {
                Foundation.onImagesLoaded($images, this._setHeight.bind(this));
            } else {
                this._setHeight();
            }
        }
        this._events();
    };
    Tabs.prototype._events = function() {
        this._addKeyHandler();
        this._addClickHandler();
        if (this.options.matchHeight) {
            $(window).on("changed.zf.mediaquery", this._setHeight.bind(this));
        }
    };
    Tabs.prototype._addClickHandler = function() {
        var _this = this;
        this.$element.off("click.zf.tabs").on("click.zf.tabs", "." + this.options.linkClass, function(e) {
            e.preventDefault();
            e.stopPropagation();
            if ($(this).hasClass("is-active")) {
                return;
            }
            _this._handleTabChange($(this));
        });
    };
    Tabs.prototype._addKeyHandler = function() {
        var _this = this;
        var $firstTab = _this.$element.find("li:first-of-type");
        var $lastTab = _this.$element.find("li:last-of-type");
        this.$tabTitles.off("keydown.zf.tabs").on("keydown.zf.tabs", function(e) {
            if (e.which === 9) return;
            e.stopPropagation();
            e.preventDefault();
            var $element = $(this), $elements = $element.parent("ul").children("li"), $prevElement, $nextElement;
            $elements.each(function(i) {
                if ($(this).is($element)) {
                    if (_this.options.wrapOnKeys) {
                        $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
                        $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
                    } else {
                        $prevElement = $elements.eq(Math.max(0, i - 1));
                        $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
                    }
                    return;
                }
            });
            Foundation.Keyboard.handleKey(e, _this, {
                open: function() {
                    $element.find('[role="tab"]').focus();
                    _this._handleTabChange($element);
                },
                previous: function() {
                    $prevElement.find('[role="tab"]').focus();
                    _this._handleTabChange($prevElement);
                },
                next: function() {
                    $nextElement.find('[role="tab"]').focus();
                    _this._handleTabChange($nextElement);
                }
            });
        });
    };
    Tabs.prototype._handleTabChange = function($target) {
        var $tabLink = $target.find('[role="tab"]'), hash = $tabLink.attr("href"), $targetContent = $(hash), $oldTab = this.$element.find("." + this.options.linkClass + ".is-active").removeClass("is-active").find('[role="tab"]').attr({
            "aria-selected": "false"
        }).attr("href");
        $($oldTab).removeClass("is-active").attr({
            "aria-hidden": "true"
        });
        $target.addClass("is-active");
        $tabLink.attr({
            "aria-selected": "true"
        });
        $targetContent.addClass("is-active").attr({
            "aria-hidden": "false"
        });
        this.$element.trigger("change.zf.tabs", [ $target ]);
    };
    Tabs.prototype.selectTab = function(elem) {
        var idStr;
        if (typeof elem === "object") {
            idStr = elem[0].id;
        } else {
            idStr = elem;
        }
        if (idStr.indexOf("#") < 0) {
            idStr = "#" + idStr;
        }
        var $target = this.$tabTitles.find('[href="' + idStr + '"]').parent("." + this.options.linkClass);
        this._handleTabChange($target);
    };
    Tabs.prototype._setHeight = function() {
        var max = 0;
        this.$tabContent.find("." + this.options.panelClass).css("height", "").each(function() {
            var panel = $(this), isActive = panel.hasClass("is-active");
            if (!isActive) {
                panel.css({
                    visibility: "hidden",
                    display: "block"
                });
            }
            var temp = this.getBoundingClientRect().height;
            if (!isActive) {
                panel.css({
                    visibility: "",
                    display: ""
                });
            }
            max = temp > max ? temp : max;
        }).css("height", max + "px");
    };
    Tabs.prototype.destroy = function() {
        this.$element.find("." + this.options.linkClass).off(".zf.tabs").hide().end().find("." + this.options.panelClass).hide();
        if (this.options.matchHeight) {
            $(window).off("changed.zf.mediaquery");
        }
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Tabs, "Tabs");
    function checkClass($elem) {
        return $elem.hasClass("is-active");
    }
}(jQuery, window.Foundation);

!function(Foundation, $) {
    "use strict";
    function Toggler(element, options) {
        this.$element = element;
        this.options = $.extend({}, Toggler.defaults, element.data(), options);
        this.className = "";
        this._init();
        this._events();
        Foundation.registerPlugin(this);
    }
    Toggler.defaults = {
        animate: false
    };
    Toggler.prototype._init = function() {
        var input;
        if (this.options.animate) {
            input = this.options.animate.split(" ");
            this.animationIn = input[0];
            this.animationOut = input[1] || null;
        } else {
            input = this.$element.data("toggler");
            this.className = input[0] === "." ? input.slice(1) : input;
        }
        var id = this.$element[0].id;
        $('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr("aria-controls", id);
        this.$element.attr("aria-expanded", this.$element.is(":hidden") ? false : true);
    };
    Toggler.prototype._events = function() {
        this.$element.off("toggle.zf.trigger").on("toggle.zf.trigger", this.toggle.bind(this));
    };
    Toggler.prototype.toggle = function() {
        this[this.options.animate ? "_toggleAnimate" : "_toggleClass"]();
    };
    Toggler.prototype._toggleClass = function() {
        this.$element.toggleClass(this.className);
        var isOn = this.$element.hasClass(this.className);
        if (isOn) {
            this.$element.trigger("on.zf.toggler");
        } else {
            this.$element.trigger("off.zf.toggler");
        }
        this._updateARIA(isOn);
    };
    Toggler.prototype._toggleAnimate = function() {
        var _this = this;
        if (this.$element.is(":hidden")) {
            Foundation.Motion.animateIn(this.$element, this.animationIn, function() {
                this.trigger("on.zf.toggler");
                _this._updateARIA(true);
            });
        } else {
            Foundation.Motion.animateOut(this.$element, this.animationOut, function() {
                this.trigger("off.zf.toggler");
                _this._updateARIA(false);
            });
        }
    };
    Toggler.prototype._updateARIA = function(isOn) {
        this.$element.attr("aria-expanded", isOn ? true : false);
    };
    Toggler.prototype.destroy = function() {
        this.$element.off(".zf.toggler");
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Toggler, "Toggler");
    if (typeof module !== "undefined" && typeof module.exports !== "undefined") module.exports = Toggler;
    if (typeof define === "function") define([ "foundation" ], function() {
        return Toggler;
    });
}(Foundation, jQuery);

!function($, document, Foundation) {
    "use strict";
    function Tooltip(element, options) {
        this.$element = element;
        this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);
        this.isActive = false;
        this.isClick = false;
        this._init();
        Foundation.registerPlugin(this);
    }
    Tooltip.defaults = {
        disableForTouch: false,
        hoverDelay: 200,
        fadeInDuration: 150,
        fadeOutDuration: 150,
        disableHover: false,
        templateClasses: "",
        tooltipClass: "tooltip",
        triggerClass: "has-tip",
        showOn: "small",
        template: "",
        tipText: "",
        touchCloseText: "Tap to close.",
        clickOpen: true,
        positionClass: "",
        vOffset: 10,
        hOffset: 12
    };
    Tooltip.prototype._init = function() {
        var elemId = this.$element.attr("aria-describedby") || Foundation.GetYoDigits(6, "tooltip");
        this.options.positionClass = this._getPositionClass(this.$element);
        this.options.tipText = this.options.tipText || this.$element.attr("title");
        this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);
        this.template.appendTo(document.body).text(this.options.tipText).hide();
        this.$element.attr({
            title: "",
            "aria-describedby": elemId,
            "data-yeti-box": elemId,
            "data-toggle": elemId,
            "data-resize": elemId
        }).addClass(this.triggerClass);
        this.usedPositions = [];
        this.counter = 4;
        this.classChanged = false;
        this._events();
    };
    Tooltip.prototype._getPositionClass = function(element) {
        if (!element) {
            return "";
        }
        var position = element[0].className.match(/(top|left|right)/g);
        position = position ? position[0] : "";
        return position;
    };
    Tooltip.prototype._buildTemplate = function(id) {
        var templateClasses = (this.options.tooltipClass + " " + this.options.positionClass).trim();
        var $template = $("<div></div>").addClass(templateClasses).attr({
            role: "tooltip",
            "aria-hidden": true,
            "data-is-active": false,
            "data-is-focus": false,
            id: id
        });
        return $template;
    };
    Tooltip.prototype._reposition = function(position) {
        this.usedPositions.push(position ? position : "bottom");
        if (!position && this.usedPositions.indexOf("top") < 0) {
            this.template.addClass("top");
        } else if (position === "top" && this.usedPositions.indexOf("bottom") < 0) {
            this.template.removeClass(position);
        } else if (position === "left" && this.usedPositions.indexOf("right") < 0) {
            this.template.removeClass(position).addClass("right");
        } else if (position === "right" && this.usedPositions.indexOf("left") < 0) {
            this.template.removeClass(position).addClass("left");
        } else if (!position && this.usedPositions.indexOf("top") > -1 && this.usedPositions.indexOf("left") < 0) {
            this.template.addClass("left");
        } else if (position === "top" && this.usedPositions.indexOf("bottom") > -1 && this.usedPositions.indexOf("left") < 0) {
            this.template.removeClass(position).addClass("left");
        } else if (position === "left" && this.usedPositions.indexOf("right") > -1 && this.usedPositions.indexOf("bottom") < 0) {
            this.template.removeClass(position);
        } else if (position === "right" && this.usedPositions.indexOf("left") > -1 && this.usedPositions.indexOf("bottom") < 0) {
            this.template.removeClass(position);
        } else {
            this.template.removeClass(position);
        }
        this.classChanged = true;
        this.counter--;
    };
    Tooltip.prototype._setPosition = function() {
        var position = this._getPositionClass(this.template), $tipDims = Foundation.Box.GetDimensions(this.template), $anchorDims = Foundation.Box.GetDimensions(this.$element), direction = position === "left" ? "left" : position === "right" ? "left" : "top", param = direction === "top" ? "height" : "width", offset = param === "height" ? this.options.vOffset : this.options.hOffset, _this = this;
        if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
            this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, "center bottom", this.options.vOffset, this.options.hOffset, true)).css({
                width: $anchorDims.windowDims.width - this.options.hOffset * 2,
                height: "auto"
            });
            return false;
        }
        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, "center " + (position || "bottom"), this.options.vOffset, this.options.hOffset));
        while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {
            this._reposition(position);
            this._setPosition();
        }
    };
    Tooltip.prototype.show = function() {
        if (this.options.showOn !== "all" && !Foundation.MediaQuery.atLeast(this.options.showOn)) {
            return false;
        }
        var _this = this;
        this.template.css("visibility", "hidden").show();
        this._setPosition();
        this.$element.trigger("closeme.zf.tooltip", this.template.attr("id"));
        this.template.attr({
            "data-is-active": true,
            "aria-hidden": false
        });
        _this.isActive = true;
        this.template.stop().hide().css("visibility", "").fadeIn(this.options.fadeInDuration, function() {});
        this.$element.trigger("show.zf.tooltip");
    };
    Tooltip.prototype.hide = function() {
        var _this = this;
        this.template.stop().attr({
            "aria-hidden": true,
            "data-is-active": false
        }).fadeOut(this.options.fadeOutDuration, function() {
            _this.isActive = false;
            _this.isClick = false;
            if (_this.classChanged) {
                _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);
                _this.usedPositions = [];
                _this.counter = 4;
                _this.classChanged = false;
            }
        });
        this.$element.trigger("hide.zf.tooltip");
    };
    Tooltip.prototype._events = function() {
        var _this = this;
        var $template = this.template;
        var isFocus = false;
        if (!this.options.disableHover) {
            this.$element.on("mouseenter.zf.tooltip", function(e) {
                if (!_this.isActive) {
                    _this.timeout = setTimeout(function() {
                        _this.show();
                    }, _this.options.hoverDelay);
                }
            }).on("mouseleave.zf.tooltip", function(e) {
                clearTimeout(_this.timeout);
                if (!isFocus || !_this.isClick && _this.options.clickOpen) {
                    _this.hide();
                }
            });
        }
        if (this.options.clickOpen) {
            this.$element.on("mousedown.zf.tooltip", function(e) {
                e.stopImmediatePropagation();
                if (_this.isClick) {
                    _this.hide();
                } else {
                    _this.isClick = true;
                    if ((_this.options.disableHover || !_this.$element.attr("tabindex")) && !_this.isActive) {
                        _this.show();
                    }
                }
            });
        }
        if (!this.options.disableForTouch) {
            this.$element.on("tap.zf.tooltip touchend.zf.tooltip", function(e) {
                _this.isActive ? _this.hide() : _this.show();
            });
        }
        this.$element.on({
            "close.zf.trigger": this.hide.bind(this)
        });
        this.$element.on("focus.zf.tooltip", function(e) {
            isFocus = true;
            
            if (_this.isClick) {
                return false;
            } else {
                _this.show();
            }
        }).on("focusout.zf.tooltip", function(e) {
            isFocus = false;
            _this.isClick = false;
            _this.hide();
        }).on("resizeme.zf.trigger", function() {
            if (_this.isActive) {
                _this._setPosition();
            }
        });
    };
    Tooltip.prototype.toggle = function() {
        if (this.isActive) {
            this.hide();
        } else {
            this.show();
        }
    };
    Tooltip.prototype.destroy = function() {
        this.$element.attr("title", this.template.text()).off(".zf.trigger .zf.tootip").removeAttr("aria-describedby").removeAttr("data-yeti-box").removeAttr("data-toggle").removeAttr("data-resize");
        this.template.remove();
        Foundation.unregisterPlugin(this);
    };
    Foundation.plugin(Tooltip, "Tooltip");
}(jQuery, window.document, window.Foundation);

ko.bindingHandlers.expandVisible = {
    init: function(element, valueAccessor) {
        var value = valueAccessor();
        $(element).toggle(ko.utils.unwrapObservable(value));
    },
    update: function(element, valueAccessor) {
        var value = valueAccessor();
        ko.utils.unwrapObservable(value) ? $(element).slideDown() : $(element).slideUp();
    }
};

ko.bindingHandlers["ui-vars"] = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        var observableValues = {};
        _.each(value, function(value, key) {
            observableValues[key] = ko.observable(value);
        });
        var innerBindingContext = bindingContext.extend(observableValues);
        ko.applyBindingsToDescendants(innerBindingContext, element);
        return {
            controlsDescendantBindings: true
        };
    },
    update: function() {}
};

ko.bindingHandlers["ui-panel"] = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        value.isExpanded = ko.observable(value.isExpanded === false ? false : true);
        var children = $(element).children();
        var firstChild = children.first();
        var secondChild = children.next();
        ko.applyBindingsToNode(secondChild[0], {
            expandVisible: value.isExpanded
        });
        firstChild.click(function() {
            value.isExpanded(!value.isExpanded());
        });
        var innerBindingContext = bindingContext.extend(value);
        ko.applyBindingsToDescendants(innerBindingContext, element);
        return {
            controlsDescendantBindings: true
        };
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel) {}
};

ko.bindingHandlers["ui-tabpanel"] = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        var $element = $(element);
        var children = $element.children();
        var ul = $element.children("ul");
        var lis = ul.children("li");
        var divs = $element.children("div");
        var lisAndDivs = _.zip(lis, divs);
        _.each(lisAndDivs, function(liAndDiv) {
            var li = liAndDiv[0];
            var div = liAndDiv[1];
            $(div).hide();
            $(li).click(function() {
                if (value.active) {
                    lis.removeClass(value.active);
                    $(li).addClass(value.active);
                }
                divs.hide();
                $(div).show();
            });
        });
        $(lisAndDivs[0][1]).show();
        if (value.active) {
            $(lisAndDivs[0][0]).addClass(value.active);
        }
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel) {}
};

ko.bindingHandlers["ui-table"] = {
    init: function(element, valueAccessor, binding, viewModel) {
        var config = ko.utils.unwrapObservable(valueAccessor());
        if (config.scroll) {
            var $oldTable = $(element);
            var thead = $oldTable.children("thead");
            var newTable = $('<table aria-hidden="true" class="jedi-grid-table-fixed">' + thead[0].outerHTML + "<tbody></tbody></table>");
            $oldTable.parent().parent().prepend(newTable);
            var oldThs = thead.children("tr").children("th");
            var thWidths = $.map(oldThs, function(th) {
                return $(th).width();
            });
            var newThs = newTable.children("thead").children("tr").children("th");
            $.each(newThs, function(thIndex, newTh) {
                $(newTh).width(thWidths[thIndex]);
            });
            thead.css({
                display: "block",
                position: "absolute",
                top: -1e4,
                right: -1e4
            });
            ko.applyBindings(viewModel, newTable[0]);
        }
    },
    update: function(element, valueAccessor) {}
};

ko.bindingHandlers["ui-accordion"] = {
    init: function(element, valueAccessor, binding, viewModel) {
        var children = $(element).children();
        var bodies = $.map(children, function(child) {
            return $(child).children()[1];
        });
        $.each(children, function(childIndex, child) {
            var child = $(child);
            var header = $(child.children()[0]);
            var body = $(child.children()[1]);
            header.click(function() {
                body.slideDown();
                $.each(bodies, function(bodyIndex, otherBody) {
                    if (bodyIndex !== childIndex) {
                        $(otherBody).slideUp();
                    }
                });
            });
        });
        $.each(bodies, function(i, body) {
            if (i !== 0) {
                $(body).hide();
            }
        });
    },
    update: function(element, valueAccessor) {}
};

ko.bindingHandlers["ui-dropdown"] = {
    init: function(element, valueAccessor, binding, viewModel) {
        var config = ko.utils.unwrapObservable(valueAccessor());
        var children = $(element).children();
        var first = children.first();
        var active = false;
        var bodyClick = function(e) {
            var fun = function(ev) {
                if (e.timeStamp !== ev.timeStamp) {
                    $(element).removeClass(config.active);
                    active = false;
                    $("body").off("click", fun);
                }
            };
            return fun;
        };
        $(first).click(function(e) {
            if (!active) {
                active = true;
                $(element).addClass(config.active);
                $("body").on("click", bodyClick(e));
            }
        });
    },
    update: function() {}
};

(function($) {
    $.fn.unveil = function(threshold, callback) {
        var $w = $(window), th = threshold || 0, retina = window.devicePixelRatio > 1, attrib = retina ? "data-src-retina" : "data-src", images = this, loaded;
        this.one("unveil", function() {
            var source = this.getAttribute(attrib);
            source = source || this.getAttribute("data-src");
            if (source) {
                this.setAttribute("src", source);
                if (typeof callback === "function") callback.call(this);
            }
        });
        function unveil() {
            var inview = images.filter(function() {
                var $e = $(this);
                if ($e.is(":hidden")) return;
                var wt = $w.scrollTop(), wb = wt + $w.height(), et = $e.offset().top, eb = et + $e.height();
                return eb >= wt - th && et <= wb + th;
            });
            loaded = inview.trigger("unveil");
            images = images.not(loaded);
        }
        $w.on("scroll.unveil resize.unveil lookup.unveil", unveil);
        unveil();
        return this;
    };
})(window.jQuery || window.Zepto);

(function() {
    "use strict";
    var keyCounter = 0;
    var allWaypoints = {};
    function Waypoint(options) {
        if (!options) {
            throw new Error("No options passed to Waypoint constructor");
        }
        if (!options.element) {
            throw new Error("No element option passed to Waypoint constructor");
        }
        if (!options.handler) {
            throw new Error("No handler option passed to Waypoint constructor");
        }
        this.key = "waypoint-" + keyCounter;
        this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options);
        this.element = this.options.element;
        this.adapter = new Waypoint.Adapter(this.element);
        this.callback = options.handler;
        this.axis = this.options.horizontal ? "horizontal" : "vertical";
        this.enabled = this.options.enabled;
        this.triggerPoint = null;
        this.group = Waypoint.Group.findOrCreate({
            name: this.options.group,
            axis: this.axis
        });
        this.context = Waypoint.Context.findOrCreateByElement(this.options.context);
        if (Waypoint.offsetAliases[this.options.offset]) {
            this.options.offset = Waypoint.offsetAliases[this.options.offset];
        }
        this.group.add(this);
        this.context.add(this);
        allWaypoints[this.key] = this;
        keyCounter += 1;
    }
    Waypoint.prototype.queueTrigger = function(direction) {
        this.group.queueTrigger(this, direction);
    };
    Waypoint.prototype.trigger = function(args) {
        if (!this.enabled) {
            return;
        }
        if (this.callback) {
            this.callback.apply(this, args);
        }
    };
    Waypoint.prototype.destroy = function() {
        this.context.remove(this);
        this.group.remove(this);
        delete allWaypoints[this.key];
    };
    Waypoint.prototype.disable = function() {
        this.enabled = false;
        return this;
    };
    Waypoint.prototype.enable = function() {
        this.context.refresh();
        this.enabled = true;
        return this;
    };
    Waypoint.prototype.next = function() {
        return this.group.next(this);
    };
    Waypoint.prototype.previous = function() {
        return this.group.previous(this);
    };
    Waypoint.invokeAll = function(method) {
        var allWaypointsArray = [];
        for (var waypointKey in allWaypoints) {
            allWaypointsArray.push(allWaypoints[waypointKey]);
        }
        for (var i = 0, end = allWaypointsArray.length; i < end; i++) {
            allWaypointsArray[i][method]();
        }
    };
    Waypoint.destroyAll = function() {
        Waypoint.invokeAll("destroy");
    };
    Waypoint.disableAll = function() {
        Waypoint.invokeAll("disable");
    };
    Waypoint.enableAll = function() {
        Waypoint.invokeAll("enable");
    };
    Waypoint.refreshAll = function() {
        Waypoint.Context.refreshAll();
    };
    Waypoint.viewportHeight = function() {
        return window.innerHeight || document.documentElement.clientHeight;
    };
    Waypoint.viewportWidth = function() {
        return document.documentElement.clientWidth;
    };
    Waypoint.adapters = [];
    Waypoint.defaults = {
        context: window,
        continuous: true,
        enabled: true,
        group: "default",
        horizontal: false,
        offset: 0
    };
    Waypoint.offsetAliases = {
        "bottom-in-view": function() {
            return this.context.innerHeight() - this.adapter.outerHeight();
        },
        "right-in-view": function() {
            return this.context.innerWidth() - this.adapter.outerWidth();
        }
    };
    window.Waypoint = Waypoint;
})();

(function() {
    "use strict";
    function requestAnimationFrameShim(callback) {
        window.setTimeout(callback, 1e3 / 60);
    }
    var keyCounter = 0;
    var contexts = {};
    var Waypoint = window.Waypoint;
    var oldWindowLoad = window.onload;
    function Context(element) {
        this.element = element;
        this.Adapter = Waypoint.Adapter;
        this.adapter = new this.Adapter(element);
        this.key = "waypoint-context-" + keyCounter;
        this.didScroll = false;
        this.didResize = false;
        this.oldScroll = {
            x: this.adapter.scrollLeft(),
            y: this.adapter.scrollTop()
        };
        this.waypoints = {
            vertical: {},
            horizontal: {}
        };
        element.waypointContextKey = this.key;
        contexts[element.waypointContextKey] = this;
        keyCounter += 1;
        this.createThrottledScrollHandler();
        this.createThrottledResizeHandler();
    }
    Context.prototype.add = function(waypoint) {
        var axis = waypoint.options.horizontal ? "horizontal" : "vertical";
        this.waypoints[axis][waypoint.key] = waypoint;
        this.refresh();
    };
    Context.prototype.checkEmpty = function() {
        var horizontalEmpty = this.Adapter.isEmptyObject(this.waypoints.horizontal);
        var verticalEmpty = this.Adapter.isEmptyObject(this.waypoints.vertical);
        if (horizontalEmpty && verticalEmpty) {
            this.adapter.off(".waypoints");
            delete contexts[this.key];
        }
    };
    Context.prototype.createThrottledResizeHandler = function() {
        var self = this;
        function resizeHandler() {
            self.handleResize();
            self.didResize = false;
        }
        this.adapter.on("resize.waypoints", function() {
            if (!self.didResize) {
                self.didResize = true;
                Waypoint.requestAnimationFrame(resizeHandler);
            }
        });
    };
    Context.prototype.createThrottledScrollHandler = function() {
        var self = this;
        function scrollHandler() {
            self.handleScroll();
            self.didScroll = false;
        }
        this.adapter.on("scroll.waypoints", function() {
            if (!self.didScroll || Waypoint.isTouch) {
                self.didScroll = true;
                Waypoint.requestAnimationFrame(scrollHandler);
            }
        });
    };
    Context.prototype.handleResize = function() {
        Waypoint.Context.refreshAll();
    };
    Context.prototype.handleScroll = function() {
        var triggeredGroups = {};
        var axes = {
            horizontal: {
                newScroll: this.adapter.scrollLeft(),
                oldScroll: this.oldScroll.x,
                forward: "right",
                backward: "left"
            },
            vertical: {
                newScroll: this.adapter.scrollTop(),
                oldScroll: this.oldScroll.y,
                forward: "down",
                backward: "up"
            }
        };
        for (var axisKey in axes) {
            var axis = axes[axisKey];
            var isForward = axis.newScroll > axis.oldScroll;
            var direction = isForward ? axis.forward : axis.backward;
            for (var waypointKey in this.waypoints[axisKey]) {
                var waypoint = this.waypoints[axisKey][waypointKey];
                var wasBeforeTriggerPoint = axis.oldScroll < waypoint.triggerPoint;
                var nowAfterTriggerPoint = axis.newScroll >= waypoint.triggerPoint;
                var crossedForward = wasBeforeTriggerPoint && nowAfterTriggerPoint;
                var crossedBackward = !wasBeforeTriggerPoint && !nowAfterTriggerPoint;
                if (crossedForward || crossedBackward) {
                    waypoint.queueTrigger(direction);
                    triggeredGroups[waypoint.group.id] = waypoint.group;
                }
            }
        }
        for (var groupKey in triggeredGroups) {
            triggeredGroups[groupKey].flushTriggers();
        }
        this.oldScroll = {
            x: axes.horizontal.newScroll,
            y: axes.vertical.newScroll
        };
    };
    Context.prototype.innerHeight = function() {
        if (this.element == this.element.window) {
            return Waypoint.viewportHeight();
        }
        return this.adapter.innerHeight();
    };
    Context.prototype.remove = function(waypoint) {
        delete this.waypoints[waypoint.axis][waypoint.key];
        this.checkEmpty();
    };
    Context.prototype.innerWidth = function() {
        if (this.element == this.element.window) {
            return Waypoint.viewportWidth();
        }
        return this.adapter.innerWidth();
    };
    Context.prototype.destroy = function() {
        var allWaypoints = [];
        for (var axis in this.waypoints) {
            for (var waypointKey in this.waypoints[axis]) {
                allWaypoints.push(this.waypoints[axis][waypointKey]);
            }
        }
        for (var i = 0, end = allWaypoints.length; i < end; i++) {
            allWaypoints[i].destroy();
        }
    };
    Context.prototype.refresh = function() {
        var isWindow = this.element == this.element.window;
        var contextOffset = isWindow ? undefined : this.adapter.offset();
        var triggeredGroups = {};
        var axes;
        this.handleScroll();
        axes = {
            horizontal: {
                contextOffset: isWindow ? 0 : contextOffset.left,
                contextScroll: isWindow ? 0 : this.oldScroll.x,
                contextDimension: this.innerWidth(),
                oldScroll: this.oldScroll.x,
                forward: "right",
                backward: "left",
                offsetProp: "left"
            },
            vertical: {
                contextOffset: isWindow ? 0 : contextOffset.top,
                contextScroll: isWindow ? 0 : this.oldScroll.y,
                contextDimension: this.innerHeight(),
                oldScroll: this.oldScroll.y,
                forward: "down",
                backward: "up",
                offsetProp: "top"
            }
        };
        for (var axisKey in axes) {
            var axis = axes[axisKey];
            for (var waypointKey in this.waypoints[axisKey]) {
                var waypoint = this.waypoints[axisKey][waypointKey];
                var adjustment = waypoint.options.offset;
                var oldTriggerPoint = waypoint.triggerPoint;
                var elementOffset = 0;
                var freshWaypoint = oldTriggerPoint == null;
                var contextModifier, wasBeforeScroll, nowAfterScroll;
                var triggeredBackward, triggeredForward;
                if (waypoint.element !== waypoint.element.window) {
                    elementOffset = waypoint.adapter.offset()[axis.offsetProp];
                }
                if (typeof adjustment === "function") {
                    adjustment = adjustment.apply(waypoint);
                } else if (typeof adjustment === "string") {
                    adjustment = parseFloat(adjustment);
                    if (waypoint.options.offset.indexOf("%") > -1) {
                        adjustment = Math.ceil(axis.contextDimension * adjustment / 100);
                    }
                }
                contextModifier = axis.contextScroll - axis.contextOffset;
                waypoint.triggerPoint = elementOffset + contextModifier - adjustment;
                wasBeforeScroll = oldTriggerPoint < axis.oldScroll;
                nowAfterScroll = waypoint.triggerPoint >= axis.oldScroll;
                triggeredBackward = wasBeforeScroll && nowAfterScroll;
                triggeredForward = !wasBeforeScroll && !nowAfterScroll;
                if (!freshWaypoint && triggeredBackward) {
                    waypoint.queueTrigger(axis.backward);
                    triggeredGroups[waypoint.group.id] = waypoint.group;
                } else if (!freshWaypoint && triggeredForward) {
                    waypoint.queueTrigger(axis.forward);
                    triggeredGroups[waypoint.group.id] = waypoint.group;
                } else if (freshWaypoint && axis.oldScroll >= waypoint.triggerPoint) {
                    waypoint.queueTrigger(axis.forward);
                    triggeredGroups[waypoint.group.id] = waypoint.group;
                }
            }
        }
        Waypoint.requestAnimationFrame(function() {
            for (var groupKey in triggeredGroups) {
                triggeredGroups[groupKey].flushTriggers();
            }
        });
        return this;
    };
    Context.findOrCreateByElement = function(element) {
        return Context.findByElement(element) || new Context(element);
    };
    Context.refreshAll = function() {
        for (var contextId in contexts) {
            contexts[contextId].refresh();
        }
    };
    Context.findByElement = function(element) {
        return contexts[element.waypointContextKey];
    };
    window.onload = function() {
        if (oldWindowLoad) {
            oldWindowLoad();
        }
        Context.refreshAll();
    };
    Waypoint.requestAnimationFrame = function(callback) {
        var requestFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || requestAnimationFrameShim;
        requestFn.call(window, callback);
    };
    Waypoint.Context = Context;
})();

(function() {
    "use strict";
    function byTriggerPoint(a, b) {
        return a.triggerPoint - b.triggerPoint;
    }
    function byReverseTriggerPoint(a, b) {
        return b.triggerPoint - a.triggerPoint;
    }
    var groups = {
        vertical: {},
        horizontal: {}
    };
    var Waypoint = window.Waypoint;
    function Group(options) {
        this.name = options.name;
        this.axis = options.axis;
        this.id = this.name + "-" + this.axis;
        this.waypoints = [];
        this.clearTriggerQueues();
        groups[this.axis][this.name] = this;
    }
    Group.prototype.add = function(waypoint) {
        this.waypoints.push(waypoint);
    };
    Group.prototype.clearTriggerQueues = function() {
        this.triggerQueues = {
            up: [],
            down: [],
            left: [],
            right: []
        };
    };
    Group.prototype.flushTriggers = function() {
        for (var direction in this.triggerQueues) {
            var waypoints = this.triggerQueues[direction];
            var reverse = direction === "up" || direction === "left";
            waypoints.sort(reverse ? byReverseTriggerPoint : byTriggerPoint);
            for (var i = 0, end = waypoints.length; i < end; i += 1) {
                var waypoint = waypoints[i];
                if (waypoint.options.continuous || i === waypoints.length - 1) {
                    waypoint.trigger([ direction ]);
                }
            }
        }
        this.clearTriggerQueues();
    };
    Group.prototype.next = function(waypoint) {
        this.waypoints.sort(byTriggerPoint);
        var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
        var isLast = index === this.waypoints.length - 1;
        return isLast ? null : this.waypoints[index + 1];
    };
    Group.prototype.previous = function(waypoint) {
        this.waypoints.sort(byTriggerPoint);
        var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
        return index ? this.waypoints[index - 1] : null;
    };
    Group.prototype.queueTrigger = function(waypoint, direction) {
        this.triggerQueues[direction].push(waypoint);
    };
    Group.prototype.remove = function(waypoint) {
        var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
        if (index > -1) {
            this.waypoints.splice(index, 1);
        }
    };
    Group.prototype.first = function() {
        return this.waypoints[0];
    };
    Group.prototype.last = function() {
        return this.waypoints[this.waypoints.length - 1];
    };
    Group.findOrCreate = function(options) {
        return groups[options.axis][options.name] || new Group(options);
    };
    Waypoint.Group = Group;
})();

(function() {
    "use strict";
    var $ = window.jQuery;
    var Waypoint = window.Waypoint;
    function JQueryAdapter(element) {
        this.$element = $(element);
    }
    $.each([ "innerHeight", "innerWidth", "off", "offset", "on", "outerHeight", "outerWidth", "scrollLeft", "scrollTop" ], function(i, method) {
        JQueryAdapter.prototype[method] = function() {
            var args = Array.prototype.slice.call(arguments);
            return this.$element[method].apply(this.$element, args);
        };
    });
    $.each([ "extend", "inArray", "isEmptyObject" ], function(i, method) {
        JQueryAdapter[method] = $[method];
    });
    Waypoint.adapters.push({
        name: "jquery",
        Adapter: JQueryAdapter
    });
    Waypoint.Adapter = JQueryAdapter;
})();

(function() {
    "use strict";
    var Waypoint = window.Waypoint;
    function createExtension(framework) {
        return function() {
            var waypoints = [];
            var overrides = arguments[0];
            if (framework.isFunction(arguments[0])) {
                overrides = framework.extend({}, arguments[1]);
                overrides.handler = arguments[0];
            }
            this.each(function() {
                var options = framework.extend({}, overrides, {
                    element: this
                });
                if (typeof options.context === "string") {
                    options.context = framework(this).closest(options.context)[0];
                }
                waypoints.push(new Waypoint(options));
            });
            return waypoints;
        };
    }
    if (window.jQuery) {
        window.jQuery.fn.waypoint = createExtension(window.jQuery);
    }
    if (window.Zepto) {
        window.Zepto.fn.waypoint = createExtension(window.Zepto);
    }
})();

(function() {
    "use strict";
    var $ = window.jQuery;
    var Waypoint = window.Waypoint;
    function Sticky(options) {
        this.options = $.extend({}, Waypoint.defaults, Sticky.defaults, options);
        this.element = this.options.element;
        this.$element = $(this.element);
        this.createWrapper();
        this.createWaypoint();
    }
    Sticky.prototype.createWaypoint = function() {
        var originalHandler = this.options.handler;
        this.waypoint = new Waypoint($.extend({}, this.options, {
            element: this.wrapper,
            handler: $.proxy(function(direction) {
                var shouldBeStuck = this.options.direction.indexOf(direction) > -1;
                var wrapperHeight = shouldBeStuck ? this.$element.outerHeight(true) : "";
                this.$wrapper.height(wrapperHeight);
                this.$element.toggleClass(this.options.stuckClass, shouldBeStuck);
                if (originalHandler) {
                    originalHandler.call(this, direction);
                }
            }, this)
        }));
    };
    Sticky.prototype.createWrapper = function() {
        if (this.options.wrapper) {
            this.$element.wrap(this.options.wrapper);
        }
        this.$wrapper = this.$element.parent();
        this.wrapper = this.$wrapper[0];
    };
    Sticky.prototype.destroy = function() {
        if (this.$element.parent()[0] === this.wrapper) {
            this.waypoint.destroy();
            this.$element.removeClass(this.options.stuckClass);
            if (this.options.wrapper) {
                this.$element.unwrap();
            }
        }
    };
    Sticky.defaults = {
        wrapper: '<div class="sticky-wrapper" />',
        stuckClass: "",
        direction: "down right"
    };
    Waypoint.Sticky = Sticky;
})();

(function(global, factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], function(jQuery) {
            return factory(global, jQuery);
        });
    } else if (typeof exports === "object") {
        factory(global, require("jquery"));
    } else {
        factory(global, global.jQuery);
    }
})(typeof window !== "undefined" ? window : this, function(window, $) {
    "use strict";
    var list = "over out down up move enter leave cancel".split(" ");
    var hook = $.extend({}, $.event.mouseHooks);
    var events = {};
    if (window.PointerEvent) {
        $.each(list, function(i, name) {
            $.event.fixHooks[events[name] = "pointer" + name] = hook;
        });
    } else {
        var mouseProps = hook.props;
        hook.props = mouseProps.concat([ "touches", "changedTouches", "targetTouches", "altKey", "ctrlKey", "metaKey", "shiftKey" ]);
        hook.filter = function(event, originalEvent) {
            var touch;
            var i = mouseProps.length;
            if (!originalEvent.pageX && originalEvent.touches && (touch = originalEvent.touches[0])) {
                while (i--) {
                    event[mouseProps[i]] = touch[mouseProps[i]];
                }
            }
            return event;
        };
        $.each(list, function(i, name) {
            if (i < 2) {
                events[name] = "mouse" + name;
            } else {
                var touch = "touch" + (name === "down" ? "start" : name === "up" ? "end" : name);
                $.event.fixHooks[touch] = hook;
                events[name] = touch + " mouse" + name;
            }
        });
    }
    $.pointertouch = events;
    var datakey = "__pz__";
    var slice = Array.prototype.slice;
    var pointerEvents = !!window.PointerEvent;
    var rupper = /([A-Z])/g;
    var rsvg = /^http:[\w\.\/]+svg$/;
    var rinline = /^inline/;
    var floating = "(\\-?[\\d\\.e]+)";
    var commaSpace = "\\,?\\s*";
    var rmatrix = new RegExp("^matrix\\(" + floating + commaSpace + floating + commaSpace + floating + commaSpace + floating + commaSpace + floating + commaSpace + floating + "\\)$");
    function matrixEquals(first, second) {
        var i = first.length;
        while (--i) {
            if (+first[i] !== +second[i]) {
                return false;
            }
        }
        return true;
    }
    function createResetOptions(opts) {
        var options = {
            range: true,
            animate: true
        };
        if (typeof opts === "boolean") {
            options.animate = opts;
        } else {
            $.extend(options, opts);
        }
        return options;
    }
    function Matrix(a, b, c, d, e, f, g, h, i) {
        if ($.type(a) === "array") {
            this.elements = [ +a[0], +a[2], +a[4], +a[1], +a[3], +a[5], 0, 0, 1 ];
        } else {
            this.elements = [ a, b, c, d, e, f, g || 0, h || 0, i || 1 ];
        }
    }
    Matrix.prototype = {
        x: function(matrix) {
            var isVector = matrix instanceof Vector;
            var a = this.elements, b = matrix.elements;
            if (isVector && b.length === 3) {
                return new Vector(a[0] * b[0] + a[1] * b[1] + a[2] * b[2], a[3] * b[0] + a[4] * b[1] + a[5] * b[2], a[6] * b[0] + a[7] * b[1] + a[8] * b[2]);
            } else if (b.length === a.length) {
                return new Matrix(a[0] * b[0] + a[1] * b[3] + a[2] * b[6], a[0] * b[1] + a[1] * b[4] + a[2] * b[7], a[0] * b[2] + a[1] * b[5] + a[2] * b[8], a[3] * b[0] + a[4] * b[3] + a[5] * b[6], a[3] * b[1] + a[4] * b[4] + a[5] * b[7], a[3] * b[2] + a[4] * b[5] + a[5] * b[8], a[6] * b[0] + a[7] * b[3] + a[8] * b[6], a[6] * b[1] + a[7] * b[4] + a[8] * b[7], a[6] * b[2] + a[7] * b[5] + a[8] * b[8]);
            }
            return false;
        },
        inverse: function() {
            var d = 1 / this.determinant(), a = this.elements;
            return new Matrix(d * (a[8] * a[4] - a[7] * a[5]), d * -(a[8] * a[1] - a[7] * a[2]), d * (a[5] * a[1] - a[4] * a[2]), d * -(a[8] * a[3] - a[6] * a[5]), d * (a[8] * a[0] - a[6] * a[2]), d * -(a[5] * a[0] - a[3] * a[2]), d * (a[7] * a[3] - a[6] * a[4]), d * -(a[7] * a[0] - a[6] * a[1]), d * (a[4] * a[0] - a[3] * a[1]));
        },
        determinant: function() {
            var a = this.elements;
            return a[0] * (a[8] * a[4] - a[7] * a[5]) - a[3] * (a[8] * a[1] - a[7] * a[2]) + a[6] * (a[5] * a[1] - a[4] * a[2]);
        }
    };
    function Vector(x, y, z) {
        this.elements = [ x, y, z ];
    }
    Vector.prototype.e = Matrix.prototype.e = function(i) {
        return this.elements[i];
    };
    function Panzoom(elem, options) {
        if (!(this instanceof Panzoom)) {
            return new Panzoom(elem, options);
        }
        if (elem.nodeType !== 1) {
            $.error("Panzoom called on non-Element node");
        }
        if (!$.contains(document, elem)) {
            $.error("Panzoom element must be attached to the document");
        }
        var d = $.data(elem, datakey);
        if (d) {
            return d;
        }
        this.options = options = $.extend({}, Panzoom.defaults, options);
        this.elem = elem;
        var $elem = this.$elem = $(elem);
        this.$set = options.$set && options.$set.length ? options.$set : $elem;
        this.$doc = $(elem.ownerDocument || document);
        this.$parent = $elem.parent();
        this.isSVG = rsvg.test(elem.namespaceURI) && elem.nodeName.toLowerCase() !== "svg";
        this.panning = false;
        this._buildTransform();
        this._transform = !this.isSVG && $.cssProps.transform.replace(rupper, "-$1").toLowerCase();
        this._buildTransition();
        this.resetDimensions();
        var $empty = $();
        var self = this;
        $.each([ "$zoomIn", "$zoomOut", "$zoomRange", "$reset" ], function(i, name) {
            self[name] = options[name] || $empty;
        });
        this.enable();
        $.data(elem, datakey, this);
    }
    Panzoom.rmatrix = rmatrix;
    Panzoom.events = $.pointertouch;
    Panzoom.defaults = {
        eventNamespace: ".panzoom",
        transition: true,
        cursor: "move",
        disablePan: false,
        disableZoom: false,
        increment: .3,
        minScale: .4,
        maxScale: 5,
        rangeStep: .05,
        duration: 200,
        easing: "ease-in-out",
        contain: false
    };
    Panzoom.prototype = {
        constructor: Panzoom,
        instance: function() {
            return this;
        },
        enable: function() {
            this._initStyle();
            this._bind();
            this.disabled = false;
        },
        disable: function() {
            this.disabled = true;
            this._resetStyle();
            this._unbind();
        },
        isDisabled: function() {
            return this.disabled;
        },
        destroy: function() {
            this.disable();
            $.removeData(this.elem, datakey);
        },
        resetDimensions: function() {
            var $parent = this.$parent;
            this.container = {
                width: $parent.innerWidth(),
                height: $parent.innerHeight()
            };
            var po = $parent.offset();
            var elem = this.elem;
            var $elem = this.$elem;
            var dims;
            if (this.isSVG) {
                dims = elem.getBoundingClientRect();
                dims = {
                    left: dims.left - po.left,
                    top: dims.top - po.top,
                    width: dims.width,
                    height: dims.height,
                    margin: {
                        left: 0,
                        top: 0
                    }
                };
            } else {
                dims = {
                    left: $.css(elem, "left", true) || 0,
                    top: $.css(elem, "top", true) || 0,
                    width: $elem.innerWidth(),
                    height: $elem.innerHeight(),
                    margin: {
                        top: $.css(elem, "marginTop", true) || 0,
                        left: $.css(elem, "marginLeft", true) || 0
                    }
                };
            }
            dims.widthBorder = $.css(elem, "borderLeftWidth", true) + $.css(elem, "borderRightWidth", true) || 0;
            dims.heightBorder = $.css(elem, "borderTopWidth", true) + $.css(elem, "borderBottomWidth", true) || 0;
            this.dimensions = dims;
        },
        reset: function(options) {
            options = createResetOptions(options);
            var matrix = this.setMatrix(this._origTransform, options);
            if (!options.silent) {
                this._trigger("reset", matrix);
            }
        },
        resetZoom: function(options) {
            options = createResetOptions(options);
            var origMatrix = this.getMatrix(this._origTransform);
            options.dValue = origMatrix[3];
            this.zoom(origMatrix[0], options);
        },
        resetPan: function(options) {
            var origMatrix = this.getMatrix(this._origTransform);
            this.pan(origMatrix[4], origMatrix[5], createResetOptions(options));
        },
        setTransform: function(transform) {
            var method = this.isSVG ? "attr" : "style";
            var $set = this.$set;
            var i = $set.length;
            while (i--) {
                $[method]($set[i], "transform", transform);
            }
        },
        getTransform: function(transform) {
            var $set = this.$set;
            var transformElem = $set[0];
            if (transform) {
                this.setTransform(transform);
            } else {
                transform = $[this.isSVG ? "attr" : "style"](transformElem, "transform");
            }
            if (transform !== "none" && !rmatrix.test(transform)) {
                this.setTransform(transform = $.css(transformElem, "transform"));
            }
            return transform || "none";
        },
        getMatrix: function(transform) {
            var matrix = rmatrix.exec(transform || this.getTransform());
            if (matrix) {
                matrix.shift();
            }
            return matrix || [ 1, 0, 0, 1, 0, 0 ];
        },
        setMatrix: function(matrix, options) {
            if (this.disabled) {
                return;
            }
            if (!options) {
                options = {};
            }
            if (typeof matrix === "string") {
                matrix = this.getMatrix(matrix);
            }
            var dims, container, marginW, marginH, diffW, diffH, left, top, width, height;
            var scale = +matrix[0];
            var $parent = this.$parent;
            var contain = typeof options.contain !== "undefined" ? options.contain : this.options.contain;
            if (contain) {
                dims = this._checkDims();
                container = this.container;
                width = dims.width + dims.widthBorder;
                height = dims.height + dims.heightBorder;
                marginW = (width * Math.abs(scale) - container.width) / 2;
                marginH = (height * Math.abs(scale) - container.height) / 2;
                left = dims.left + dims.margin.left;
                top = dims.top + dims.margin.top;
                if (contain === "invert") {
                    diffW = width > container.width ? width - container.width : 0;
                    diffH = height > container.height ? height - container.height : 0;
                    marginW += (container.width - width) / 2;
                    marginH += (container.height - height) / 2;
                    matrix[4] = Math.max(Math.min(matrix[4], marginW - left), -marginW - left - diffW);
                    matrix[5] = Math.max(Math.min(matrix[5], marginH - top), -marginH - top - diffH + dims.heightBorder);
                } else {
                    marginH += dims.heightBorder / 2;
                    diffW = container.width > width ? container.width - width : 0;
                    diffH = container.height > height ? container.height - height : 0;
                    if ($parent.css("textAlign") !== "center" || !rinline.test($.css(this.elem, "display"))) {
                        marginW = marginH = 0;
                    } else {
                        diffW = 0;
                    }
                    matrix[4] = Math.min(Math.max(matrix[4], marginW - left), -marginW - left + diffW);
                    matrix[5] = Math.min(Math.max(matrix[5], marginH - top), -marginH - top + diffH);
                }
            }
            if (options.animate !== "skip") {
                this.transition(!options.animate);
            }
            if (options.range) {
                this.$zoomRange.val(scale);
            }
            this.setTransform("matrix(" + matrix.join(",") + ")");
            if (!options.silent) {
                this._trigger("change", matrix);
            }
            return matrix;
        },
        isPanning: function() {
            return this.panning;
        },
        transition: function(off) {
            if (!this._transition) {
                return;
            }
            var transition = off || !this.options.transition ? "none" : this._transition;
            var $set = this.$set;
            var i = $set.length;
            while (i--) {
                if ($.style($set[i], "transition") !== transition) {
                    $.style($set[i], "transition", transition);
                }
            }
        },
        pan: function(x, y, options) {
            if (this.options.disablePan) {
                return;
            }
            if (!options) {
                options = {};
            }
            var matrix = options.matrix;
            if (!matrix) {
                matrix = this.getMatrix();
            }
            if (options.relative) {
                x += +matrix[4];
                y += +matrix[5];
            }
            matrix[4] = x;
            matrix[5] = y;
            this.setMatrix(matrix, options);
            if (!options.silent) {
                this._trigger("pan", matrix[4], matrix[5]);
            }
        },
        zoom: function(scale, opts) {
            if (typeof scale === "object") {
                opts = scale;
                scale = null;
            } else if (!opts) {
                opts = {};
            }
            var options = $.extend({}, this.options, opts);
            if (options.disableZoom) {
                return;
            }
            var animate = false;
            var matrix = options.matrix || this.getMatrix();
            if (typeof scale !== "number") {
                scale = +matrix[0] + options.increment * (scale ? -1 : 1);
                animate = true;
            }
            if (scale > options.maxScale) {
                scale = options.maxScale;
            } else if (scale < options.minScale) {
                scale = options.minScale;
            }
            var focal = options.focal;
            if (focal && !options.disablePan) {
                var dims = this._checkDims();
                var clientX = focal.clientX;
                var clientY = focal.clientY;
                if (!this.isSVG) {
                    clientX -= (dims.width + dims.widthBorder) / 2;
                    clientY -= (dims.height + dims.heightBorder) / 2;
                }
                var clientV = new Vector(clientX, clientY, 1);
                var surfaceM = new Matrix(matrix);
                var o = this.parentOffset || this.$parent.offset();
                var offsetM = new Matrix(1, 0, o.left - this.$doc.scrollLeft(), 0, 1, o.top - this.$doc.scrollTop());
                var surfaceV = surfaceM.inverse().x(offsetM.inverse().x(clientV));
                var scaleBy = scale / matrix[0];
                surfaceM = surfaceM.x(new Matrix([ scaleBy, 0, 0, scaleBy, 0, 0 ]));
                clientV = offsetM.x(surfaceM.x(surfaceV));
                matrix[4] = +matrix[4] + (clientX - clientV.e(0));
                matrix[5] = +matrix[5] + (clientY - clientV.e(1));
            }
            matrix[0] = scale;
            matrix[3] = typeof options.dValue === "number" ? options.dValue : scale;
            this.setMatrix(matrix, {
                animate: typeof options.animate === "boolean" ? options.animate : animate,
                range: !options.noSetRange
            });
            if (!options.silent) {
                this._trigger("zoom", matrix[0], options);
            }
        },
        option: function(key, value) {
            var options;
            if (!key) {
                return $.extend({}, this.options);
            }
            if (typeof key === "string") {
                if (arguments.length === 1) {
                    return this.options[key] !== undefined ? this.options[key] : null;
                }
                options = {};
                options[key] = value;
            } else {
                options = key;
            }
            this._setOptions(options);
        },
        _setOptions: function(options) {
            $.each(options, $.proxy(function(key, value) {
                switch (key) {
                  case "disablePan":
                    this._resetStyle();

                  case "$zoomIn":
                  case "$zoomOut":
                  case "$zoomRange":
                  case "$reset":
                  case "disableZoom":
                  case "onStart":
                  case "onChange":
                  case "onZoom":
                  case "onPan":
                  case "onEnd":
                  case "onReset":
                  case "eventNamespace":
                    this._unbind();
                }
                this.options[key] = value;
                switch (key) {
                  case "disablePan":
                    this._initStyle();

                  case "$zoomIn":
                  case "$zoomOut":
                  case "$zoomRange":
                  case "$reset":
                    this[key] = value;

                  case "disableZoom":
                  case "onStart":
                  case "onChange":
                  case "onZoom":
                  case "onPan":
                  case "onEnd":
                  case "onReset":
                  case "eventNamespace":
                    this._bind();
                    break;

                  case "cursor":
                    $.style(this.elem, "cursor", value);
                    break;

                  case "minScale":
                    this.$zoomRange.attr("min", value);
                    break;

                  case "maxScale":
                    this.$zoomRange.attr("max", value);
                    break;

                  case "rangeStep":
                    this.$zoomRange.attr("step", value);
                    break;

                  case "startTransform":
                    this._buildTransform();
                    break;

                  case "duration":
                  case "easing":
                    this._buildTransition();

                  case "transition":
                    this.transition();
                    break;

                  case "$set":
                    if (value instanceof $ && value.length) {
                        this.$set = value;
                        this._initStyle();
                        this._buildTransform();
                    }
                }
            }, this));
        },
        _initStyle: function() {
            var styles = {
                "backface-visibility": "hidden",
                "transform-origin": this.isSVG ? "0 0" : "50% 50%"
            };
            if (!this.options.disablePan) {
                styles.cursor = this.options.cursor;
            }
            this.$set.css(styles);
            var $parent = this.$parent;
            if ($parent.length && !$.nodeName($parent[0], "body")) {
                styles = {
                    overflow: "hidden"
                };
                if ($parent.css("position") === "static") {
                    styles.position = "relative";
                }
                $parent.css(styles);
            }
        },
        _resetStyle: function() {
            this.$elem.css({
                cursor: "",
                transition: ""
            });
            this.$parent.css({
                overflow: "",
                position: ""
            });
        },
        _bind: function() {
            var self = this;
            var options = this.options;
            var ns = options.eventNamespace;
            var str_start = pointerEvents ? "pointerdown" + ns : "touchstart" + ns + " mousedown" + ns;
            var str_click = pointerEvents ? "pointerup" + ns : "touchend" + ns + " click" + ns;
            var events = {};
            var $reset = this.$reset;
            var $zoomRange = this.$zoomRange;
            $.each([ "Start", "Change", "Zoom", "Pan", "End", "Reset" ], function() {
                var m = options["on" + this];
                if ($.isFunction(m)) {
                    events["panzoom" + this.toLowerCase() + ns] = m;
                }
            });
            if (!options.disablePan || !options.disableZoom) {
                events[str_start] = function(e) {
                    var touches;
                    if (e.type === "touchstart" ? (touches = e.touches) && (touches.length === 1 && !options.disablePan || touches.length === 2) : !options.disablePan && e.which === 1) {
                        e.preventDefault();
                        e.stopPropagation();
                        self._startMove(e, touches);
                    }
                };
            }
            this.$elem.on(events);
            if ($reset.length) {
                $reset.on(str_click, function(e) {
                    e.preventDefault();
                    self.reset();
                });
            }
            if ($zoomRange.length) {
                $zoomRange.attr({
                    step: options.rangeStep === Panzoom.defaults.rangeStep && $zoomRange.attr("step") || options.rangeStep,
                    min: options.minScale,
                    max: options.maxScale
                }).prop({
                    value: this.getMatrix()[0]
                });
            }
            if (options.disableZoom) {
                return;
            }
            var $zoomIn = this.$zoomIn;
            var $zoomOut = this.$zoomOut;
            if ($zoomIn.length && $zoomOut.length) {
                $zoomIn.on(str_click, function(e) {
                    e.preventDefault();
                    self.zoom();
                });
                $zoomOut.on(str_click, function(e) {
                    e.preventDefault();
                    self.zoom(true);
                });
            }
            if ($zoomRange.length) {
                events = {};
                events[(pointerEvents ? "pointerdown" : "mousedown") + ns] = function() {
                    self.transition(true);
                };
                events["change" + ns] = function() {
                    self.zoom(+this.value, {
                        noSetRange: true
                    });
                };
                $zoomRange.on(events);
            }
        },
        _unbind: function() {
            this.$elem.add(this.$zoomIn).add(this.$zoomOut).add(this.$reset).off(this.options.eventNamespace);
        },
        _buildTransform: function() {
            return this._origTransform = this.getTransform(this.options.startTransform);
        },
        _buildTransition: function() {
            if (this._transform) {
                var options = this.options;
                this._transition = this._transform + " " + options.duration + "ms " + options.easing;
            }
        },
        _checkDims: function() {
            var dims = this.dimensions;
            if (!dims.width || !dims.height) {
                this.resetDimensions();
            }
            return this.dimensions;
        },
        _getDistance: function(touches) {
            var touch1 = touches[0];
            var touch2 = touches[1];
            return Math.sqrt(Math.pow(Math.abs(touch2.clientX - touch1.clientX), 2) + Math.pow(Math.abs(touch2.clientY - touch1.clientY), 2));
        },
        _getMiddle: function(touches) {
            var touch1 = touches[0];
            var touch2 = touches[1];
            return {
                clientX: (touch2.clientX - touch1.clientX) / 2 + touch1.clientX,
                clientY: (touch2.clientY - touch1.clientY) / 2 + touch1.clientY
            };
        },
        _trigger: function(event) {
            if (typeof event === "string") {
                event = "panzoom" + event;
            }
            this.$elem.triggerHandler(event, [ this ].concat(slice.call(arguments, 1)));
        },
        _startMove: function(event, touches) {
            var move, moveEvent, endEvent, startDistance, startScale, startMiddle, startPageX, startPageY;
            var self = this;
            var options = this.options;
            var ns = options.eventNamespace;
            var matrix = this.getMatrix();
            var original = matrix.slice(0);
            var origPageX = +original[4];
            var origPageY = +original[5];
            var panOptions = {
                matrix: matrix,
                animate: "skip"
            };
            if (pointerEvents) {
                moveEvent = "pointermove";
                endEvent = "pointerup";
            } else if (event.type === "touchstart") {
                moveEvent = "touchmove";
                endEvent = "touchend";
            } else {
                moveEvent = "mousemove";
                endEvent = "mouseup";
            }
            moveEvent += ns;
            endEvent += ns;
            this.transition(true);
            this.panning = true;
            this._trigger("start", event, touches);
            if (touches && touches.length === 2) {
                startDistance = this._getDistance(touches);
                startScale = +matrix[0];
                startMiddle = this._getMiddle(touches);
                move = function(e) {
                    e.preventDefault();
                    var middle = self._getMiddle(touches = e.touches);
                    var diff = self._getDistance(touches) - startDistance;
                    self.zoom(diff * (options.increment / 100) + startScale, {
                        focal: middle,
                        matrix: matrix,
                        animate: false
                    });
                    self.pan(+matrix[4] + middle.clientX - startMiddle.clientX, +matrix[5] + middle.clientY - startMiddle.clientY, panOptions);
                    startMiddle = middle;
                };
            } else {
                startPageX = event.pageX;
                startPageY = event.pageY;
                move = function(e) {
                    e.preventDefault();
                    self.pan(origPageX + e.pageX - startPageX, origPageY + e.pageY - startPageY, panOptions);
                };
            }
            $(document).off(ns).on(moveEvent, move).on(endEvent, function(e) {
                e.preventDefault();
                $(this).off(ns);
                self.panning = false;
                e.type = "panzoomend";
                self._trigger(e, matrix, !matrixEquals(matrix, original));
            });
        }
    };
    $.Panzoom = Panzoom;
    $.fn.panzoom = function(options) {
        var instance, args, m, ret;
        if (typeof options === "string") {
            ret = [];
            args = slice.call(arguments, 1);
            this.each(function() {
                instance = $.data(this, datakey);
                if (!instance) {
                    ret.push(undefined);
                } else if (options.charAt(0) !== "_" && typeof (m = instance[options]) === "function" && (m = m.apply(instance, args)) !== undefined) {
                    ret.push(m);
                }
            });
            return ret.length ? ret.length === 1 ? ret[0] : ret : this;
        }
        return this.each(function() {
            new Panzoom(this, options);
        });
    };
    return Panzoom;
});

(function(window) {
    var pagerJsModule = function($, ko) {
        "use strict";
        var makeComputed = function(fn, scope) {
            return function() {
                var args = arguments;
                return ko.computed(function() {
                    return fn.apply(scope, args);
                });
            };
        };
        var pager = {};
        pager.page = null;
        pager.now = function() {
            if (!Date.now) {
                return new Date().valueOf();
            } else {
                return Date.now();
            }
        };
        pager.extendWithPage = function(viewModel) {
            var page = new pager.Page();
            viewModel["$__page__"] = page;
            pager.page = page;
            pager.activePage$ = makeComputed(pager.getActivePage, pager)();
        };
        var fire = function(scope, name, options) {
            options = options || {};
            options.page = scope;
            pager[name].fire(options);
            if (scope.val(name)) {
                scope.val(name)(options);
            }
        };
        $.each([ "onBindingError", "onSourceError", "onNoMatch", "onMatch", "beforeRemove", "afterRemove", "beforeHide", "afterHide", "beforeShow", "afterShow" ], function(i, n) {
            pager[n] = $.Callbacks();
        });
        pager.showChild = function(route) {
            var trimmedRoute = route && route.length === 1 && route[0] === "" ? [] : route;
            pager.page.showPage(trimmedRoute);
        };
        pager.getParentPage = function(bindingContext) {
            while (bindingContext) {
                if (bindingContext.$page && bindingContext.$page.val("urlToggle") !== "none") {
                    return bindingContext.$page;
                } else if (bindingContext.$data && bindingContext.$data.$__page__) {
                    return bindingContext.$data.$__page__;
                }
                bindingContext = bindingContext.$parentContext;
            }
            return null;
        };
        var goToKey = null;
        var currentAsyncDeferred = null;
        var goTo = function(path) {
            if (currentAsyncDeferred) {
                currentAsyncDeferred.reject({
                    cancel: true
                });
            }
            goToKey = null;
            if (path.substring(0, pager.Href.hash.length) === pager.Href.hash) {
                path = path.slice(pager.Href.hash.length);
            }
            var hashRoute = parseHash(path);
            pager.showChild(hashRoute);
        };
        pager.goTo = goTo;
        pager.navigate = function(path) {
            if (pager.useHTML5history) {
                pager.Href5.history.pushState(null, null, path);
            } else {
                location.hash = path;
            }
        };
        var parseHash = function(hash) {
            return $.map(hash.replace(/\+/g, " ").split("/"), decodeURIComponent);
        };
        var _ko = {};
        _ko.value = ko.utils.unwrapObservable;
        _ko.arrayValue = function(arr) {
            return $.map(arr, function(e) {
                return _ko.value(e);
            });
        };
        var parseStringAsParameters = function(query) {
            var match, urlParams = {}, search = /([^&=]+)=?([^&]*)/g;
            while (match = search.exec(query)) {
                urlParams[match[1]] = match[2];
            }
            return urlParams;
        };
        var splitRoutePartIntoNameAndParameters = function(routePart) {
            if (!routePart) {
                return {
                    name: null,
                    params: {}
                };
            }
            var routeSplit = routePart.split("?");
            var name = routeSplit[0];
            var paramsString = routeSplit[1];
            var params = {};
            if (paramsString) {
                params = parseStringAsParameters(paramsString);
            }
            return {
                name: name,
                params: params
            };
        };
        pager.ChildManager = function(children, page) {
            this.currentChildO = ko.observable(null);
            var me = this;
            this.page = page;
            this.timeStamp = pager.now();
            this.hideChild = function() {
                var currentChild = me.currentChildO();
                if (currentChild) {
                    currentChild.hidePage(function() {});
                    me.currentChildO(null);
                }
            };
            this.showChild = function(route) {
                var showOnlyStart = route.length === 0;
                this.timeStamp = pager.now();
                var timeStamp = this.timeStamp;
                var oldCurrentChild = me.currentChildO();
                var currentChild = null;
                var match = false;
                var currentRoutePair = splitRoutePartIntoNameAndParameters(route[0]);
                var currentRoute = currentRoutePair.name;
                var wildcard = null;
                $.each(children(), function(childIndex, child) {
                    if (!match) {
                        var id = child.getId();
                        if (id === currentRoute || (currentRoute === "" || currentRoute == null) && child.isStartPage()) {
                            match = true;
                            currentChild = child;
                        }
                        if (id === "?") {
                            wildcard = child;
                        }
                    }
                });
                var isModal = false;
                var currentChildManager = me;
                var findMatchModalOrWildCard = function(childIndex, child) {
                    if (!match) {
                        var id = child.getId();
                        var modal = child.getValue().modal;
                        if (modal) {
                            if (id === currentRoute || (currentRoute === "" || currentRoute == null) && child.isStartPage()) {
                                match = true;
                                currentChild = child;
                                isModal = true;
                            }
                            if (id === "?" && !wildcard) {
                                wildcard = child;
                                isModal = true;
                            }
                        }
                    }
                };
                while (!currentChild && currentChildManager.page.parentPage && !currentChildManager.page.getValue().modal) {
                    var parentChildren = currentChildManager.page.parentPage.children;
                    $.each(parentChildren(), findMatchModalOrWildCard);
                    if (!currentChild) {
                        currentChildManager = currentChildManager.page.parentPage.childManager;
                    }
                }
                if (!currentChild && wildcard && !showOnlyStart) {
                    currentChild = wildcard;
                }
                me.currentChildO(currentChild);
                if (currentChild) {
                    if (isModal) {
                        currentChild.currentParentPage(me.page);
                    } else {
                        currentChild.currentParentPage(null);
                    }
                }
                var onFailed = function() {
                    fire(me.page, "onNoMatch", {
                        route: route
                    });
                };
                var showCurrentChild = function() {
                    fire(me.page, "onMatch", {
                        route: route
                    });
                    var guard = _ko.value(currentChild.getValue().guard);
                    if (guard) {
                        guard(currentChild, route, function() {
                            if (me.timeStamp === timeStamp) {
                                currentChild.showPage(route.slice(1), currentRoutePair, route[0]);
                            }
                        }, oldCurrentChild);
                    } else {
                        currentChild.showPage(route.slice(1), currentRoutePair, route[0]);
                    }
                };
                if (oldCurrentChild && oldCurrentChild === currentChild) {
                    showCurrentChild();
                } else if (oldCurrentChild) {
                    oldCurrentChild.hidePage(function() {
                        if (currentChild) {
                            showCurrentChild();
                        } else {
                            onFailed();
                        }
                    });
                } else if (currentChild) {
                    showCurrentChild();
                } else {
                    onFailed();
                }
            };
        };
        pager.Page = function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            this.element = element;
            this.valueAccessor = valueAccessor;
            this.allBindingsAccessor = allBindingsAccessor;
            this.viewModel = viewModel;
            this.bindingContext = bindingContext;
            this.children = ko.observableArray([]);
            this.childManager = new pager.ChildManager(this.children, this);
            this.parentPage = null;
            this.currentId = null;
            this.getCurrentId = ko.observable();
            this.ctx = null;
            this.currentParentPage = ko.observable(null);
            this.isVisible = ko.observable(false);
            this.originalRoute = ko.observable(null);
            this.route = null;
        };
        var p = pager.Page.prototype;
        p.val = function(key) {
            return _ko.value(this.getValue()[key]);
        };
        p.currentChildPage = function() {
            return this.childManager.currentChildO;
        };
        p.find = function(key) {
            var k = _ko.value(key);
            var currentRoot = this;
            if (k.substring(0, 1) === "/") {
                currentRoot = pager.page;
                k = k.slice(1);
            } else {
                while (k.substring(0, 3) === "../") {
                    currentRoot = currentRoot.currentParentPage && currentRoot.currentParentPage() ? currentRoot.currentParentPage() : currentRoot.parentPage;
                    k = k.slice(3);
                }
            }
            var route = parseHash(k);
            $.each(route, function(_, r) {
                currentRoot = currentRoot.child(r)();
            });
            return currentRoot;
        };
        p.find$ = function(key) {
            return makeComputed(this.find, this)(key);
        };
        var absolutePathToRealPath = function(path) {
            if (pager.useHTML5history) {
                return $("base").attr("href") + path;
            } else {
                return pager.Href.hash + path;
            }
        };
        p.path = function(path) {
            var me = this;
            var p = _ko.value(path);
            if (p && typeof p === "object" && p.path && p.params && !(p instanceof pager.Page)) {
                var objectPath = p.path;
                var params = p.params;
                return me.path(objectPath) + "?" + $.param(params);
            } else {
                var page;
                if (p == null || p === "") {
                    page = me;
                } else if (p instanceof pager.Page) {
                    page = p;
                } else {
                    if (p.substring(0, 1) === "/") {
                        var pagePath = pager.page.getFullRoute()().join("/") + p.substring(1);
                        return absolutePathToRealPath(pagePath);
                    }
                    var parentsToTrim = 0;
                    while (p.substring(0, 3) === "../") {
                        parentsToTrim++;
                        p = p.slice(3);
                    }
                    var fullRoute = me.getFullRoute()();
                    var parentPath = fullRoute.slice(0, fullRoute.length - parentsToTrim).join("/");
                    var fullPathWithoutHash = (parentPath === "" ? "" : parentPath + "/") + p;
                    return absolutePathToRealPath(fullPathWithoutHash);
                }
                return absolutePathToRealPath(page.getFullRoute()().join("/"));
            }
        };
        p.path$ = function(path) {
            return makeComputed(this.path, this)(path);
        };
        p.async = function(fn, ok, notOk, state) {
            var me = this;
            return function() {
                if (currentAsyncDeferred) {
                    currentAsyncDeferred.reject({
                        cancel: true
                    });
                }
                var result = fn();
                currentAsyncDeferred = result;
                if (state) {
                    state(result.state());
                }
                var key = Math.random();
                goToKey = key;
                result.done(function() {
                    if (state) {
                        state(result.state());
                    }
                    if (key === goToKey) {
                        pager.navigate(me.path(ok));
                    }
                });
                result.fail(function(data) {
                    if (state) {
                        state(result.state());
                    }
                    var cancel = data && data.cancel;
                    if (key === goToKey) {
                        if (!cancel && notOk) {
                            pager.navigate(me.path(notOk));
                        }
                    }
                });
            };
        };
        p.showPage = function(route, pageRoute, originalRoute) {
            var m = this, currentId = m.currentId, params = m.pageRoute ? m.pageRoute.params : null, isVisible = m.isVisible();
            m.currentId = pageRoute ? pageRoute.name || "" : "";
            m.getCurrentId(m.currentId);
            m.isVisible(true);
            if (originalRoute) {
                m.originalRoute(originalRoute);
            }
            m.route = route;
            m.pageRoute = pageRoute;
            if (!isVisible) {
                m.setParams();
                m.show();
            } else {
                if (m.getId() === "?" && currentId !== m.currentId) {
                    m.show();
                }
                if (pageRoute && params !== pageRoute.params) {
                    m.setParams();
                }
            }
            m.childManager.showChild(route);
        };
        p.setParams = function() {
            if (this.pageRoute && this.pageRoute.params) {
                var params = this.pageRoute.params;
                var vm = this.ctx;
                var userParams = this.val("params") || {};
                if ($.isArray(userParams)) {
                    $.each(userParams, function(index, key) {
                        var value = params[key];
                        if (vm[key]) {
                            vm[key](value);
                        } else {
                            vm[key] = ko.observable(value);
                        }
                    });
                } else {
                    $.each(userParams, function(key, defaultValue) {
                        var value = params[key];
                        var runtimeValue;
                        if (value == null) {
                            runtimeValue = _ko.value(defaultValue);
                        } else {
                            runtimeValue = value;
                        }
                        if (vm[key]) {
                            vm[key](runtimeValue);
                        } else {
                            vm[key] = ko.observable(runtimeValue);
                        }
                    });
                }
            }
            if (this.pageRoute) {
                var nameParam = this.getValue()["nameParam"];
                if (nameParam) {
                    if (typeof nameParam === "string") {
                        if (this.ctx[nameParam]) {
                            this.ctx[nameParam](this.currentId);
                        } else {
                            this.ctx[nameParam] = ko.observable(this.currentId);
                        }
                    } else {
                        nameParam(this.currentId);
                    }
                }
            }
        };
        p.hidePage = function(callback) {
            var m = this;
            if ("show" !== m.val("urlToggle")) {
                m.hideElementWrapper(callback);
                m.childManager.hideChild();
            } else {
                if (callback) {
                    callback();
                }
            }
        };
        var applyBindingsToDescendants = function(page) {
            try {
                ko.applyBindingsToDescendants(page.childBindingContext, page.element);
            } catch (e) {
                fire(page, "onBindingError", {
                    error: e
                });
            }
        };
        p.init = function() {
            var m = this;
            m.cleanElement = m.element.innerHTML;
            var urlToggle = m.val("urlToggle");
            var id = m.val("id");
            if (id !== "?") {
                m.getCurrentId(id);
            }
            var existingPage = ko.utils.domData.get(m.element, "__ko_pagerjsBindingData");
            if (existingPage) {
                return {
                    controlsDescendantBindings: true
                };
            } else {
                ko.utils.domData.set(m.element, "__ko_pagerjsBindingData", m);
            }
            ko.utils.domNodeDisposal.addDisposeCallback(m.element, function() {
                fire(m, "beforeRemove");
                if (m.parentPage) {
                    m.parentPage.children.remove(m);
                }
                fire(m, "afterRemove");
            });
            var value = m.getValue();
            if (urlToggle !== "none") {
                m.parentPage = m.getParentPage();
                m.parentPage.children.push(this);
                m.hideElement();
            }
            if (m.val("source")) {
                m.loadSource(m.val("source"));
            }
            m.ctx = null;
            if (value.withOnShow) {
                m.ctx = {};
                m.childBindingContext = m.bindingContext.createChildContext(m.ctx);
                ko.utils.extend(m.childBindingContext, {
                    $page: this
                });
            } else {
                var context = value["with"] || m.bindingContext["$observableData"] || m.viewModel;
                m.ctx = _ko.value(context);
                m.augmentContext();
                if (ko.isObservable(context)) {
                    var dataInContext = ko.observable(m.ctx);
                    m.childBindingContext = m.bindingContext.createChildContext(dataInContext);
                    ko.utils.extend(m.childBindingContext, {
                        $page: this,
                        $observableData: context
                    });
                    applyBindingsToDescendants(m);
                    context.subscribe(function() {
                        dataInContext(_ko.value(context));
                    });
                } else {
                    m.childBindingContext = m.bindingContext.createChildContext(m.ctx);
                    ko.utils.extend(m.childBindingContext, {
                        $page: this,
                        $observableData: undefined
                    });
                    applyBindingsToDescendants(m);
                }
            }
            if (urlToggle !== "none") {
                var parent = m.parentPage;
                if (parent.route && (parent.route[0] === m.getId() || parent.route.length && m.getId() === "?")) {
                    setTimeout(function() {
                        parent.showPage(parent.route);
                    }, 0);
                }
            } else {
                var display = function() {
                    if ($(m.element).is(":visible")) {
                        m.showPage([]);
                    }
                };
                setTimeout(display, 0);
                m.getParentPage().isVisible.subscribe(function(x) {
                    if (x) {
                        setTimeout(display, 0);
                    }
                });
            }
            var bind = m.getValue()["bind"];
            if (ko.isObservable(bind)) {
                bind(m);
            }
            return {
                controlsDescendantBindings: true
            };
        };
        p.augmentContext = function() {
            var m = this;
            var params = m.val("params");
            if (params) {
                if ($.isArray(params)) {
                    $.each(params, function(index, param) {
                        if (!m.ctx[param]) {
                            m.ctx[param] = ko.observable();
                        }
                    });
                } else {
                    $.each(params, function(key, value) {
                        if (!m.ctx[key]) {
                            if (ko.isObservable(value)) {
                                m.ctx[key] = value;
                            } else if (value === null) {
                                params[key] = ko.observable(null);
                                m.ctx[key] = ko.observable(null);
                            } else {
                                m.ctx[key] = ko.observable(value);
                            }
                        }
                    });
                }
            }
            if (this.val("vars")) {
                $.each(this.val("vars"), function(key, value) {
                    if (ko.isObservable(value)) {
                        m.ctx[key] = value;
                    } else {
                        m.ctx[key] = ko.observable(value);
                    }
                });
            }
            var nameParam = this.getValue()["nameParam"];
            if (nameParam && typeof nameParam === "string" && !m.ctx[nameParam]) {
                m.ctx[nameParam] = ko.observable(null);
            }
            this.setParams();
        };
        p.getValue = function() {
            if (this.valueAccessor) {
                return _ko.value(this.valueAccessor());
            } else {
                return {};
            }
        };
        p.getParentPage = function() {
            return pager.getParentPage(this.bindingContext);
        };
        p.getId = function() {
            return this.val("id");
        };
        p.id = function() {
            var currentId = this.getCurrentId();
            if (currentId == null || currentId === "") {
                return this.getId();
            } else {
                return currentId;
            }
        };
        p.sourceUrl = function(source) {
            var me = this;
            if (this.getId() === "?") {
                return ko.computed(function() {
                    var path;
                    if (me.val("deep")) {
                        path = [ me.currentId ].concat(me.route).join("/");
                    } else {
                        path = me.currentId;
                    }
                    return _ko.value(source).replace("{1}", path);
                });
            } else {
                return ko.computed(function() {
                    return _ko.value(source);
                });
            }
        };
        p.loadWithOnShow = function() {
            var me = this;
            if (!me.withOnShowLoaded || me.val("sourceCache") !== true) {
                me.val("withOnShow")(function(vm) {
                    if (!me.val("sourceOnShow") && me.withOnShowLoaded) {
                        ko.cleanNode($(me.element));
                        $(me.element).empty();
                        me.element.innerHTML = me.cleanElement;
                    }
                    var childBindingContext = me.bindingContext.createChildContext(vm);
                    me.ctx = vm;
                    me.childBindingContext = childBindingContext;
                    me.augmentContext();
                    ko.utils.extend(childBindingContext, {
                        $page: me
                    });
                    applyBindingsToDescendants(me);
                    if (me.route) {
                        me.childManager.showChild(me.route);
                    }
                }, me);
                me.withOnShowLoaded = true;
            }
        };
        p.loadSource = function(source) {
            var value = this.getValue();
            var me = this;
            var element = this.element;
            var loader = null;
            var loaderMethod = value.loader || pager.loader;
            if (value.frame === "iframe") {
                var iframe = $("iframe", $(element));
                if (iframe.length === 0) {
                    iframe = $("<iframe></iframe>");
                    $(element).append(iframe);
                }
                if (loaderMethod) {
                    loader = _ko.value(loaderMethod)(me, iframe);
                    loader.load();
                }
                iframe.one("load", function() {
                    if (loader) {
                        loader.unload();
                    }
                    if (value.sourceLoaded) {
                        value.sourceLoaded(me);
                    }
                });
                ko.applyBindingsToNode(iframe[0], {
                    attr: {
                        src: this.sourceUrl(source)
                    }
                });
            } else {
                if (loaderMethod) {
                    loader = _ko.value(loaderMethod)(me, me.element);
                    loader.load();
                }
                var onLoad = function() {
                    if (loader) {
                        loader.unload();
                    }
                    if (!me.val("withOnShow")) {
                        applyBindingsToDescendants(me);
                    } else if (me.val("withOnShow")) {
                        me.loadWithOnShow();
                    }
                    if (value.sourceLoaded) {
                        value.sourceLoaded(me);
                    }
                    if (me.route) {
                        me.childManager.showChild(me.route);
                    }
                };
                if (typeof _ko.value(source) === "string") {
                    var s = _ko.value(this.sourceUrl(source));
                    koLoad(element, s, function() {
                        onLoad();
                    }, me);
                } else {
                    var childrenToRemove = $(element).children();
                    _ko.value(source)(this, function() {
                        $.each(childrenToRemove, function(i, c) {
                            ko.utils.domNodeDisposal.removeNode(c);
                        });
                        onLoad();
                    });
                }
            }
        };
        var rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
        var koLoad = function(element, url, callback, page) {
            var selector, response, self = $(element), off = url.indexOf(" ");
            if (off >= 0) {
                selector = url.slice(off, url.length);
                url = url.slice(0, off);
            }
            var loadPromise = jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "html",
                complete: function(jqXHR, status) {
                    if (callback) {
                        self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
                    }
                }
            }).done(function(responseText) {
                response = arguments;
                $.each(self.children(), function(i, c) {
                    ko.utils.domNodeDisposal.removeNode(c);
                });
                self.html(selector ? jQuery("<div>").append(responseText.replace(rscript, "")).find(selector) : responseText);
            });
            loadPromise.fail(function() {
                fire(page, "onSourceError", {
                    url: url,
                    xhrPromise: loadPromise
                });
            });
            return self;
        };
        p.show = function(callback) {
            var element = this.element;
            var me = this;
            me.showElementWrapper(callback);
            if (me.val("title")) {
                window.document.title = me.val("title");
            }
            if (me.val("sourceOnShow")) {
                if (!me.val("sourceCache") || !element.__pagerLoaded__ || typeof me.val("sourceCache") === "number" && element.__pagerLoaded__ + me.val("sourceCache") * 1e3 < pager.now()) {
                    element.__pagerLoaded__ = pager.now();
                    me.loadSource(me.val("sourceOnShow"));
                }
            } else if (me.val("withOnShow")) {
                me.loadWithOnShow();
            }
        };
        p.titleOrId = function() {
            return this.val("title") || this.id();
        };
        p.showElementWrapper = function(callback) {
            var me = this;
            fire(me, "beforeShow");
            me.showElement(callback);
            if (me.val("scrollToTop")) {
                me.element.scrollIntoView();
            }
            fire(me, "afterShow");
        };
        p.showElement = function(callback) {
            if (this.val("showElement")) {
                this.val("showElement")(this, callback);
            } else if (this.val("fx")) {
                pager.fx[this.val("fx")].showElement(this, callback);
            } else if (pager.showElement) {
                pager.showElement(this, callback);
            } else {
                $(this.element).show(callback);
            }
        };
        p.hideElementWrapper = function(callback) {
            this.isVisible(false);
            fire(this, "beforeHide");
            this.hideElement(callback);
            fire(this, "afterHide");
        };
        p.hideElement = function(callback) {
            if (this.val("hideElement")) {
                this.val("hideElement")(this, callback);
            } else if (this.val("fx")) {
                pager.fx[this.val("fx")].hideElement(this, callback);
            } else if (pager.hideElement) {
                pager.hideElement(this, callback);
            } else {
                $(this.element).hide();
                if (callback) {
                    callback();
                }
            }
        };
        p.getFullRoute = function() {
            if (this._fullRoute) {
                return this._fullRoute;
            } else {
                this._fullRoute = ko.computed(function() {
                    var res = null;
                    if (this.currentParentPage && this.currentParentPage()) {
                        res = this.currentParentPage().getFullRoute()().slice(0);
                        res.push(this.originalRoute() || this.getId());
                        return res;
                    } else if (this.parentPage) {
                        res = this.parentPage.getFullRoute()().slice(0);
                        res.push(this.originalRoute() || this.getId());
                        return res;
                    } else {
                        return [];
                    }
                }, this);
                return this._fullRoute;
            }
        };
        p.getRole = function() {
            return this.val("role") || "next";
        };
        p.isStartPage = function() {
            return this.getId() === "start" || this.getRole() === "start";
        };
        p.nullObject = new pager.Page();
        p.nullObject.children = ko.observableArray([]);
        p.child = function(key) {
            var me = this;
            if (me._child == null) {
                me._child = {};
            }
            if (!me._child[key]) {
                me._child[key] = ko.computed(function() {
                    var child = $.grep(this.children(), function(c) {
                        return c.id() === key;
                    })[0];
                    return child || this.nullObject;
                }, this);
            }
            return me._child[key];
        };
        pager.getActivePage = function() {
            var active = pager.page;
            while (active.currentChildPage()() != null) {
                active = active.currentChildPage()();
            }
            return active;
        };
        ko.bindingHandlers.page = {
            init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var page = null;
                if (_ko.value(valueAccessor()) instanceof pager.Page) {
                    page = _ko.value(valueAccessor());
                    page.element = element;
                    if (page.allBindingsAccessor == null) {
                        page.allBindingsAccessor = allBindingsAccessor;
                    }
                    if (page.viewModel == null) {
                        page.viewModel = viewModel;
                    }
                    if (page.bindingContext == null) {
                        page.bindingContext = bindingContext;
                    }
                } else {
                    page = new pager.Page(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                }
                return page.init();
            }
        };
        pager.useHTML5history = false;
        pager.rootURI = "/";
        pager.Href = function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            this.element = element;
            this.bindingContext = bindingContext;
            this.path = ko.observable();
            this.pageOrRelativePath = ko.observable(valueAccessor);
        };
        var hp = pager.Href.prototype;
        hp.getParentPage = function() {
            return pager.getParentPage(this.bindingContext);
        };
        hp.init = function() {
            var me = this;
            var page = me.getParentPage();
            me.path = ko.computed(function() {
                var value = _ko.value(me.pageOrRelativePath()());
                return page.path(value);
            });
        };
        pager.Href.hash = "#";
        hp.bind = function() {
            ko.applyBindingsToNode(this.element, {
                attr: {
                    href: this.path
                }
            });
        };
        hp.update = function(valueAccessor) {
            this.pageOrRelativePath(valueAccessor);
        };
        pager.Href5 = function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            pager.Href.apply(this, arguments);
        };
        pager.Href5.prototype = new pager.Href();
        pager.Href5.history = window.History;
        pager.Href5.prototype.bind = function() {
            var self = this;
            ko.applyBindingsToNode(self.element, {
                attr: {
                    href: self.path
                },
                click: function() {
                    var path = self.path();
                    if (path === "" || path === "/") {
                        path = $("base").attr("href");
                    }
                    pager.Href5.history.pushState(null, null, path);
                }
            });
        };
        ko.bindingHandlers["page-href"] = {
            init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var Cls = pager.useHTML5history ? pager.Href5 : pager.Href;
                var href = new Cls(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                href.init();
                href.bind();
                element.__ko__page = href;
            },
            update: function(element, valueAccessor) {
                element.__ko__page.update(valueAccessor);
            }
        };
        pager.fx = {};
        pager.fx.cssAsync = function(css) {
            return {
                showElement: function(page, callback) {
                    var $e = $(page.element);
                    $e.addClass(css);
                    $e.show();
                    var i = setInterval(function() {
                        clearInterval(i);
                        $e.addClass(css + "-in");
                    }, 10);
                    var i2 = setInterval(function() {
                        clearInterval(i2);
                        if (callback) {
                            callback();
                        }
                    }, 300);
                },
                hideElement: function(page, callback) {
                    var $e = $(page.element);
                    if (!page.pageHiddenOnce) {
                        page.pageHiddenOnce = true;
                        $e.hide();
                    } else {
                        $e.removeClass(css + "-in");
                        var i = setInterval(function() {
                            clearInterval(i);
                            if (callback) {
                                callback();
                            }
                            $e.hide();
                        }, 300);
                    }
                }
            };
        };
        pager.fx.zoom = pager.fx.cssAsync("pagerjs-fx-zoom");
        pager.fx.flip = pager.fx.cssAsync("pagerjs-fx-flip");
        pager.fx.popout = pager.fx.cssAsync("pagerjs-fx-popout-modal");
        pager.fx.jQuerySync = function(show, hide) {
            return {
                showElement: function(page, callback) {
                    show.call($(page.element), 300, callback);
                },
                hideElement: function(page, callback) {
                    hide.call($(page.element), 300, function() {
                        $(page.element).hide();
                    });
                    if (callback) {
                        callback();
                    }
                }
            };
        };
        pager.fx.slide = pager.fx.jQuerySync($.fn.slideDown, $.fn.slideUp);
        pager.fx.fade = pager.fx.jQuerySync($.fn.fadeIn, $.fn.fadeOut);
        pager.startHistoryJs = function(options) {
            var id = typeof options === "string" ? options : null;
            if (id) {
                pager.Href5.history.pushState(null, null, id);
            }
            pager.Href5.history.Adapter.bind(window, "statechange", function() {
                var relativeUrl = pager.Href5.history.getState().url.replace(pager.Href5.history.getBaseUrl(), "");
                goTo(relativeUrl);
            });
            pager.Href5.history.Adapter.bind(window, "anchorchange", function() {
                var hash = window.location.href.split("#")[1];
                goTo(hash ? "#" + hash : "");
            });
            if (!options || !options.noGo) {
                goTo(pager.Href5.history.getState().url.replace(pager.Href5.history.getBaseUrl(), ""));
            }
        };
        pager.start = function(options) {
            var id = typeof options === "string" ? options : null;
            if (id) {
                window.location.hash = pager.Href.hash + id;
            }
            var onHashChange = function() {
                var hash = window.location.href.split("#")[1];
                goTo(hash ? "#" + hash : "");
            };
            $(window).bind("hashchange", onHashChange);
            if (!options || !options.noGo) {
                onHashChange();
            }
        };
        return pager;
    };
    var define = window.define;
    if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("pager", [ "knockout", "jquery" ], function(ko, $) {
            return pagerJsModule($, ko);
        });
    } else {
        window.pager = pagerJsModule($, ko);
    }
})(window);
//# sourceMappingURL=vendor.min.js.map
